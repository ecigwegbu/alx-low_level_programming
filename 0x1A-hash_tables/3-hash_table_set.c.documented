#include "hash_tables.h"

/**
 * hash_table_set - set element in hash table given key and value
 * @key: the unique key for the table lookup
 * @value: the value to set in the hash table
 *
 * Return: 1 if it succeeded, 0 otherwise
 */
int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	unsigned long int index;
	hash_node_t *nptr;

	/* generate index using hash function */
	index = hash_djb2((const unsigned char *) key) % ht->size;

	nptr = ht->array[index]; /* temp pointer to element in array / list */
	/* case: no collision, ie no previous entry for index in hash table */
	if (nptr == NULL)
	{
	
		printf("not found\n");
		/* allocate memory to new node whose head pointer is at index */
		nptr = malloc(sizeof(hash_node_t));

		/* some due dilligence checks; plus dup strings */
		if (nptr == NULL || (nptr->value = strdup(value)) == NULL\
				|| (nptr->key = strdup(key)) == NULL)
			return (0);
		nptr->next = NULL; /* dull terminate the linked list */

		ht->array[index] = nptr;  /* nptr was temp */
	}
	else
	{
		/* case: collision, ie there was a previous entry for index */
		for (nptr = ht->array[index]; nptr != NULL; nptr = nptr->next)
		{
			printf("value: %s\n", value);
			printf("nptr->key: %s\n\tnptr->value: %s\n", nptr->key, nptr->value);
			if (strcmp(nptr->value, value) == 0)
			{
				printf("found\n");
				free(nptr->value);
				nptr->value = strdup(value);
			}
			else
			{
				/* collision, but new value; add new node */

				printf("collision with new entry\n");
				/* allocate memory to new node whose head pointer is at index */
				nptr = malloc(sizeof(hash_node_t));

				/* some due dilligence checks; plus dup strings */
				if (nptr == NULL || (nptr->value = strdup(value)) == NULL\
						|| (nptr->key = strdup(key)) == NULL)
					return (0);
				nptr->next = ht->array[index]->next; /* dull terminate the linked list */

				ht->array[index] = nptr;  /* nptr was temp */
			}
		}
	}
	return (1);
}
