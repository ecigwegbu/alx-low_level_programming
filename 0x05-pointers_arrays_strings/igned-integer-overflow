GCC(1)                                        GNU                                       GCC(1)

NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
           [--gg] [--ppgg] [--OO_l_e_v_e_l]
           [--WW_w_a_r_n...] [--WWppeeddaannttiicc]
           [--II_d_i_r...] [--LL_d_i_r...]
           [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [--oo _o_u_t_f_i_l_e] [@_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below for the remainder.  gg++++ accepts
       mostly the same options as ggcccc.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing, compilation, assembly and linking.
       The "overall options" allow you to stop this process at an intermediate stage.  For
       example, the --cc option says not to run the linker.  Then the output consists of object
       files output by the assembler.

       Other options are passed on to one or more stages of processing.  Some options control
       the preprocessor and others the compiler itself.  Yet other options control the
       assembler and linker; most of these are not documented here, since you rarely need to
       use any of them.

       Most of the command-line options that you can use with GCC are useful for C programs;
       when an option is only useful with another language (usually C++), the explanation says
       so explicitly.  If the description for a particular option does not mention a source
       language, you can use that option with all supported languages.

       The usual way to run GCC is to run the executable called ggcccc, or _m_a_c_h_i_n_e--ggcccc when
       cross-compiling, or _m_a_c_h_i_n_e--ggcccc--_v_e_r_s_i_o_n to run a specific version of GCC.  When you
       compile C++ programs, you should invoke GCC as gg++++ instead.

       The ggcccc program accepts options and file names as operands.  Many options have multi-
       letter names; therefore multiple single-letter options may _n_o_t be grouped: --ddvv is very
       different from --dd --vv.

       You can mix options and other arguments.  For the most part, the order you use doesn't
       matter.  Order does matter when you use several options of the same kind; for example,
       if you specify --LL more than once, the directories are searched in the order specified.
       Also, the placement of the --ll option is significant.

       Many options have long names starting with --ff or with --WW---for example,
       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss, --WWffoorrmmaatt and so on.  Most of these have both positive and
       negative forms; the negative form of --ffffoooo is --ffnnoo--ffoooo.  This manual documents only one
       of these two forms, whichever one is not the default.

       Some options take one or more arguments typically separated either by a space or by the
       equals sign (==) from the option name.  Unless documented otherwise, an argument can be
       either numeric or a string.  Numeric arguments must typically be small unsigned decimal
       or hexadecimal integers.  Hexadecimal arguments must begin with the 00xx prefix.
       Arguments to options that specify a size threshold of some sort may be arbitrarily
       large decimal or hexadecimal integers followed by a byte size suffix designating a
       multiple of bytes such as "kB" and "KiB" for kilobyte and kibibyte, respectively, "MB"
       and "MiB" for megabyte and mebibyte, "GB" and "GiB" for gigabyte and gigibyte, and so
       on.  Such arguments are designated by _b_y_t_e_-_s_i_z_e in the following text.  Refer to the
       NIST, IEC, and other relevant national and international standards for the full listing
       and explanation of the binary and decimal byte size prefixes.

OOPPTTIIOONNSS
   OOppttiioonn SSuummmmaarryy
       Here is a summary of all the options, grouped by type.  Explanations are in the
       following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           --cc  --SS  --EE  --oo _f_i_l_e  --xx _l_a_n_g_u_a_g_e --vv  --######  ----hheellpp[==_c_l_a_s_s[,,......]]  ----ttaarrggeett--hheellpp
           ----vveerrssiioonn --ppaassss--eexxiitt--ccooddeess  --ppiippee  --ssppeeccss==_f_i_l_e  --wwrraappppeerr @@_f_i_l_e
           --ffffiillee--pprreeffiixx--mmaapp==_o_l_d==_n_e_w --ffpplluuggiinn==_f_i_l_e  --ffpplluuggiinn--aarrgg--_n_a_m_e==_a_r_g
           --ffdduummpp--aaddaa--ssppeecc[--sslliimm]  --ffaaddaa--ssppeecc--ppaarreenntt==_u_n_i_t  --ffdduummpp--ggoo--ssppeecc==_f_i_l_e

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --aannssii  --ssttdd==_s_t_a_n_d_a_r_d  --ffggnnuu8899--iinnlliinnee --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==_s_t_a_n_d_a_r_d
           --aauuxx--iinnffoo _f_i_l_e_n_a_m_e  --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss --ffnnoo--aassmm  --ffnnoo--bbuuiillttiinn
           --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n  --ffggiimmppllee --ffhhoosstteedd  --ffffrreeeessttaannddiinngg --ffooppeennaacccc
           --ffooppeennaacccc--ddiimm==_g_e_o_m --ffooppeennmmpp  --ffooppeennmmpp--ssiimmdd --ffmmss--eexxtteennssiioonnss  --ffppllaann99--eexxtteennssiioonnss
           --ffssssoo--ssttrruucctt==_e_n_d_i_a_n_n_e_s_s --ffaallllooww--ssiinnggllee--pprreecciissiioonn  --ffccoonndd--mmiissmmaattcchh
           --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss --ffssiiggnneedd--bbiittffiieellddss  --ffssiiggnneedd--cchhaarr --ffuunnssiiggnneedd--bbiittffiieellddss
           --ffuunnssiiggnneedd--cchhaarr

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffaabbii--vveerrssiioonn==_n  --ffnnoo--aacccceessss--ccoonnttrrooll --ffaalliiggnneedd--nneeww==_n  --ffaarrggss--iinn--oorrddeerr==_n  --ffcchhaarr88__tt
           --ffcchheecckk--nneeww --ffccoonnsstteexxpprr--ddeepptthh==_n  --ffccoonnsstteexxpprr--lloooopp--lliimmiitt==_n --ffccoonnsstteexxpprr--ooppss--lliimmiitt==_n
           --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss --ffnnoo--eennffoorrccee--eehh--ssppeeccss --ffnnoo--ggnnuu--kkeeyywwoorrddss
           --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           --ffmmss--eexxtteennssiioonnss --ffnneeww--iinnhheerriittiinngg--ccttoorrss --ffnneeww--ttttpp--mmaattcchhiinngg --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           --ffnnootthhrrooww--oopptt  --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss  --ffppeerrmmiissssiivvee
           --ffnnoo--pprreettttyy--tteemmppllaatteess --ffrreeppoo  --ffnnoo--rrttttii  --ffssiizzeedd--ddeeaallllooccaattiioonn
           --fftteemmppllaattee--bbaacckkttrraaccee--lliimmiitt==_n --fftteemmppllaattee--ddeepptthh==_n --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           --ffuussee--ccxxaa--aatteexxiitt --ffnnoo--wweeaakk  --nnoossttddiinncc++++ --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           --ffvviissiibbiilliittyy--mmss--ccoommppaatt --ffeexxtt--nnuummeerriicc--lliitteerraallss --WWaabbii==_n  --WWaabbii--ttaagg  --WWccoonnvveerrssiioonn--nnuullll
           --WWccttoorr--ddttoorr--pprriivvaaccyy --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr  --WWddeepprreeccaatteedd--ccooppyy
           --WWddeepprreeccaatteedd--ccooppyy--ddttoorr --WWlliitteerraall--ssuuffffiixx --WWmmuullttiippllee--iinnhheerriittaannccee
           --WWnnoo--iinniitt--lliisstt--lliiffeettiimmee --WWnnaammeessppaacceess  --WWnnaarrrroowwiinngg --WWppeessssiimmiizziinngg--mmoovvee
           --WWrreedduunnddaanntt--mmoovvee --WWnnooeexxcceepptt  --WWnnooeexxcceepptt--ttyyppee  --WWccllaassss--mmeemmaacccceessss --WWnnoonn--vviirrttuuaall--ddttoorr
           --WWrreeoorrddeerr  --WWrreeggiisstteerr --WWeeffffcc++++  --WWssttrriicctt--nnuullll--sseennttiinneell  --WWtteemmppllaatteess
           --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd  --WWoolldd--ssttyyllee--ccaasstt --WWoovveerrllooaaddeedd--vviirrttuuaall
           --WWnnoo--ppmmff--ccoonnvveerrssiioonnss --WWnnoo--ccllaassss--ccoonnvveerrssiioonn  --WWnnoo--tteerrmmiinnaattee --WWssiiggnn--pprroommoo
           --WWvviirrttuuaall--iinnhheerriittaannccee

       _O_b_j_e_c_t_i_v_e_-_C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee  --ffnneexxtt--rruunnttiimmee --ffnnoo--nniill--rreecceeiivveerrss
           --ffoobbjjcc--aabbii--vveerrssiioonn==_n --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           --ffoobbjjcc--eexxcceeppttiioonnss --ffoobbjjcc--ggcc --ffoobbjjcc--nniillcchheecckk --ffoobbjjcc--ssttdd==oobbjjcc11 --ffnnoo--llooccaall--iivvaarrss
           --ffiivvaarr--vviissiibbiilliittyy==[ppuubblliicc|pprrootteecctteedd|pprriivvaattee|ppaacckkaaggee] --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           --ffzzeerroo--lliinnkk --ggeenn--ddeeccllss --WWaassssiiggnn--iinntteerrcceepptt --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr
           --WWssttrriicctt--sseelleeccttoorr--mmaattcchh --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _D_i_a_g_n_o_s_t_i_c _M_e_s_s_a_g_e _F_o_r_m_a_t_t_i_n_g _O_p_t_i_o_n_s
           --ffmmeessssaaggee--lleennggtthh==_n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]
           --ffddiiaaggnnoossttiiccss--ccoolloorr==[aauuttoo|nneevveerr|aallwwaayyss] --ffddiiaaggnnoossttiiccss--ffoorrmmaatt==[tteexxtt|jjssoonn]
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn  --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ccaarreett
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--llaabbeellss  --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--lliinnee--nnuummbbeerrss
           --ffddiiaaggnnoossttiiccss--mmiinniimmuumm--mmaarrggiinn--wwiiddtthh==_w_i_d_t_h --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss
           --ffddiiaaggnnoossttiiccss--ggeenneerraattee--ppaattcchh --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee  --ffnnoo--eelliiddee--ttyyppee
           --ffnnoo--sshhooww--ccoolluummnn

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --ffssyynnttaaxx--oonnllyy  --ffmmaaxx--eerrrroorrss==_n  --WWppeeddaannttiicc --ppeeddaannttiicc--eerrrroorrss --ww  --WWeexxttrraa  --WWaallll
           --WWaaddddrreessss  --WWaaddddrreessss--ooff--ppaacckkeedd--mmeemmbbeerr --WWaaggggrreeggaattee--rreettuurrnn  --WWaalliiggnneedd--nneeww
           --WWaalllloocc--zzeerroo  --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e --WWaallllooccaa
           --WWaallllooccaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e --WWnnoo--aaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss  --WWaarrrraayy--bboouunnddss
           --WWaarrrraayy--bboouunnddss==_n --WWnnoo--aattttrriibbuutteess  --WWaattttrriibbuuttee--aalliiaass==_n --WWbbooooll--ccoommppaarree
           --WWbbooooll--ooppeerraattiioonn --WWnnoo--bbuuiillttiinn--ddeeccllaarraattiioonn--mmiissmmaattcchh --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd
           --WWcc9900--cc9999--ccoommppaatt  --WWcc9999--cc1111--ccoommppaatt --WWcc1111--cc22xx--ccoommppaatt --WWcc++++--ccoommppaatt  --WWcc++++1111--ccoommppaatt
           --WWcc++++1144--ccoommppaatt  --WWcc++++1177--ccoommppaatt --WWccaasstt--aalliiggnn  --WWccaasstt--aalliiggnn==ssttrriicctt
           --WWccaasstt--ffuunnccttiioonn--ttyyppee  --WWccaasstt--qquuaall --WWcchhaarr--ssuubbssccrriippttss  --WWccaattcchh--vvaalluuee  --WWccaattcchh--vvaalluuee==_n
           --WWcclloobbbbeerreedd  --WWccoommmmeenntt  --WWccoonnddiittiioonnaallllyy--ssuuppppoorrtteedd --WWccoonnvveerrssiioonn  --WWccoovveerraaggee--mmiissmmaattcchh
           --WWnnoo--ccpppp  --WWddaanngglliinngg--eellssee  --WWddaattee--ttiimmee --WWddeelleettee--iinnccoommpplleettee --WWnnoo--aattttrriibbuuttee--wwaarrnniinngg
           --WWnnoo--ddeepprreeccaatteedd  --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss  --WWnnoo--ddeessiiggnnaatteedd--iinniitt
           --WWddiissaabblleedd--ooppttiimmiizzaattiioonn --WWnnoo--ddiissccaarrddeedd--qquuaalliiffiieerrss  --WWnnoo--ddiissccaarrddeedd--aarrrraayy--qquuaalliiffiieerrss
           --WWnnoo--ddiivv--bbyy--zzeerroo  --WWddoouubbllee--pprroommoottiioonn --WWdduupplliiccaatteedd--bbrraanncchheess  --WWdduupplliiccaatteedd--ccoonndd
           --WWeemmppttyy--bbooddyy  --WWeennuumm--ccoommppaarree  --WWnnoo--eennddiiff--llaabbeellss  --WWeexxppaannssiioonn--ttoo--ddeeffiinneedd --WWeerrrroorr
           --WWeerrrroorr==**  --WWeexxttrraa--sseemmii  --WWffaattaall--eerrrroorrss --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
           --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull  --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss --WWffoorrmmaatt--nnoonnlliitteerraall
           --WWffoorrmmaatt--oovveerrffllooww==_n --WWffoorrmmaatt--sseeccuurriittyy  --WWffoorrmmaatt--ssiiggnneeddnneessss  --WWffoorrmmaatt--ttrruunnccaattiioonn==_n
           --WWffoorrmmaatt--yy22kk  --WWffrraammee--aaddddrreessss --WWffrraammee--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt --WWjjuummpp--mmiisssseess--iinniitt --WWhhssaa  --WWiiff--nnoott--aalliiggnneedd
           --WWiiggnnoorreedd--qquuaalliiffiieerrss  --WWiiggnnoorreedd--aattttrriibbuutteess  --WWiinnccoommppaattiibbllee--ppooiinntteerr--ttyyppeess --WWiimmpplliicciitt
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh  --WWiimmpplliicciitt--ffaalllltthhrroouugghh==_n --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
           --WWiimmpplliicciitt--iinntt --WWiinniitt--sseellff  --WWiinnlliinnee  --WWnnoo--iinntt--ccoonnvveerrssiioonn  --WWiinntt--iinn--bbooooll--ccoonntteexxtt
           --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt  --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell  --WWnnoo--iinnvvaalliidd--ooffffsseettooff
           --WWiinnvvaalliidd--ppcchh  --WWllaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e --WWllooggiiccaall--oopp  --WWllooggiiccaall--nnoott--ppaarreenntthheesseess
           --WWlloonngg--lloonngg --WWmmaaiinn  --WWmmaayybbee--uunniinniittiiaalliizzeedd  --WWmmeemmsseett--eelltt--ssiizzee
           --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn  --WWmmiissssiinngg--aattttrriibbuutteess
           --WWmmiissssiinngg--bbrraacceess --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss  --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
           --WWmmiissssiinngg--iinncclluuddee--ddiirrss  --WWmmiissssiinngg--nnoorreettuurrnn  --WWmmiissssiinngg--pprrooffiillee --WWnnoo--mmuullttiicchhaarr
           --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss  --WWnnoonnnnuullll  --WWnnoonnnnuullll--ccoommppaarree
           --WWnnoorrmmaalliizzeedd==[nnoonnee|iidd|nnffcc|nnffkkcc] --WWnnuullll--ddeerreeffeerreennccee  --WWooddrr  --WWnnoo--oovveerrffllooww
           --WWooppeennmmpp--ssiimmdd --WWoovveerrrriiddee--iinniitt--ssiiddee--eeffffeeccttss  --WWoovveerrlleennggtthh--ssttrriinnggss --WWppaacckkeedd
           --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt --WWppaacckkeedd--nnoott--aalliiggnneedd  --WWppaaddddeedd --WWppaarreenntthheesseess
           --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt --WWppllaacceemmeenntt--nneeww  --WWppllaacceemmeenntt--nneeww==_n --WWppooiinntteerr--aarriitthh
           --WWppooiinntteerr--ccoommppaarree  --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt --WWnnoo--pprraaggmmaass  --WWnnoo--pprriioo--ccttoorr--ddttoorr
           --WWrreedduunnddaanntt--ddeeccllss --WWrreessttrriicctt  --WWnnoo--rreettuurrnn--llooccaall--aaddddrr --WWrreettuurrnn--ttyyppee
           --WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww  --WWnnoo--sshhaaddooww--iivvaarr --WWsshhaaddooww==gglloobbaall,,  --WWsshhaaddooww==llooccaall,,
           --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall --WWsshhiifftt--oovveerrffllooww  --WWsshhiifftt--oovveerrffllooww==_n
           --WWsshhiifftt--ccoouunntt--nneeggaattiivvee  --WWsshhiifftt--ccoouunntt--oovveerrffllooww  --WWsshhiifftt--nneeggaattiivvee--vvaalluuee
           --WWssiiggnn--ccoommppaarree  --WWssiiggnn--ccoonnvveerrssiioonn  --WWffllooaatt--ccoonnvveerrssiioonn --WWnnoo--ssccaallaarr--ssttoorraaggee--oorrddeerr
           --WWssiizzeeooff--ppooiinntteerr--ddiivv --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss  --WWssiizzeeooff--aarrrraayy--aarrgguummeenntt
           --WWssttaacckk--pprrootteeccttoorr  --WWssttaacckk--uussaaggee==_b_y_t_e_-_s_i_z_e  --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--aalliiaassiinngg==nn
           --WWssttrriicctt--oovveerrffllooww  --WWssttrriicctt--oovveerrffllooww==_n --WWssttrriinnggoopp--oovveerrffllooww==_n  --WWssttrriinnggoopp--ttrruunnccaattiioonn
           --WWssuubboobbjjeecctt--lliinnkkaaggee --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn|ffoorrmmaatt|mmaalllloocc]
           --WWssuuggggeesstt--ffiinnaall--ttyyppeess   --WWssuuggggeesstt--ffiinnaall--mmeetthhooddss  --WWssuuggggeesstt--oovveerrrriiddee --WWsswwiittcchh
           --WWsswwiittcchh--bbooooll  --WWsswwiittcchh--ddeeffaauulltt  --WWsswwiittcchh--eennuumm --WWsswwiittcchh--uunnrreeaacchhaabbllee  --WWssyynncc--nnaanndd
           --WWssyysstteemm--hheeaaddeerrss  --WWttaauuttoollooggiiccaall--ccoommppaarree  --WWttrraammppoolliinneess  --WWttrriiggrraapphhss --WWttyyppee--lliimmiittss
           --WWuunnddeeff --WWuunniinniittiiaalliizzeedd  --WWuunnkknnoowwnn--pprraaggmmaass --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss  --WWuunnuusseedd
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell  --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss  --WWuunnuusseedd--mmaaccrrooss
           --WWuunnuusseedd--ppaarraammeetteerr  --WWnnoo--uunnuusseedd--rreessuulltt --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarriiaabbllee
           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee  --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==_n --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee --WWuusseelleessss--ccaasstt  --WWvvaarriiaaddiicc--mmaaccrrooss
           --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee --WWvvllaa  --WWvvllaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr --WWwwrriittee--ssttrriinnggss --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt

       _C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --WWbbaadd--ffuunnccttiioonn--ccaasstt  --WWmmiissssiinngg--ddeeccllaarraattiioonnss --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee
           --WWmmiissssiinngg--pprroottoottyyppeess  --WWnneesstteedd--eexxtteerrnnss --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn
           --WWoolldd--ssttyyllee--ddeeffiinniittiioonn --WWssttrriicctt--pprroottoottyyppeess  --WWttrraaddiittiioonnaall  --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn
           --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt  --WWppooiinntteerr--ssiiggnn

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           --gg  --gg_l_e_v_e_l  --ggddwwaarrff  --ggddwwaarrff--_v_e_r_s_i_o_n --ggggddbb  --ggrreeccoorrdd--ggcccc--sswwiittcchheess
           --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess --ggssttaabbss  --ggssttaabbss++  --ggssttrriicctt--ddwwaarrff  --ggnnoo--ssttrriicctt--ddwwaarrff
           --ggaass--lloocc--ssuuppppoorrtt  --ggnnoo--aass--lloocc--ssuuppppoorrtt --ggaass--llooccvviieeww--ssuuppppoorrtt  --ggnnoo--aass--llooccvviieeww--ssuuppppoorrtt
           --ggccoolluummnn--iinnffoo  --ggnnoo--ccoolluummnn--iinnffoo --ggssttaatteemmeenntt--ffrroonnttiieerrss  --ggnnoo--ssttaatteemmeenntt--ffrroonnttiieerrss
           --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss  --ggnnoo--vvaarriiaabbllee--llooccaattiioonn--vviieewwss
           --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss  --ggnnoo--iinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss --ggiinnlliinnee--ppooiinnttss
           --ggnnoo--iinnlliinnee--ppooiinnttss --ggvvmmss  --ggxxccooffff  --ggxxccooffff++  --ggzz[==_t_y_p_e] --ggsspplliitt--ddwwaarrff
           --ggddeessccrriibbee--ddiieess  --ggnnoo--ddeessccrriibbee--ddiieess --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           --ffddeebbuugg--ttyyppeess--sseeccttiioonn --ffnnoo--eelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy  --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t] --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss  --ffnnoo--ddwwaarrff22--ccffii--aassmm
           --ffvvaarr--ttrraacckkiinngg  --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           --ffaaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss --ffaalliiggnn--ffuunnccttiioonnss[[==_n[[::_m::[[_n_2[[::_m_2]]]]]]]]
           --ffaalliiggnn--jjuummppss[[==_n[[::_m::[[_n_2[[::_m_2]]]]]]]] --ffaalliiggnn--llaabbeellss[[==_n[[::_m::[[_n_2[[::_m_2]]]]]]]]
           --ffaalliiggnn--llooooppss[[==_n[[::_m::[[_n_2[[::_m_2]]]]]]]] --ffaassssoocciiaattiivvee--mmaatthh  --ffaauuttoo--pprrooffiillee
           --ffaauuttoo--pprrooffiillee[[==_p_a_t_h]] --ffaauuttoo--iinncc--ddeecc  --ffbbrraanncchh--pprroobbaabbiilliittiieess
           --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee  --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22 --ffbbttrr--bbbb--eexxcclluussiivvee
           --ffccaalllleerr--ssaavveess --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss  --ffccoonnsseerrvvee--ssttaacckk --ffccoommppaarree--eelliimm
           --ffccpprroopp--rreeggiisstteerrss  --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffccxx--ffoorrttrraann--rruulleess --ffccxx--lliimmiitteedd--rraannggee --ffddaattaa--sseeccttiioonnss  --ffddccee  --ffddeellaayyeedd--bbrraanncchh
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss  --ffddeevviirrttuuaalliizzee  --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy
           --ffddeevviirrttuuaalliizzee--aatt--llttrraannss  --ffddssee --ffeeaarrllyy--iinnlliinniinngg  --ffiippaa--ssrraa
           --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss  --ffffaatt--llttoo--oobbjjeeccttss --ffffaasstt--mmaatthh  --ffffiinniittee--mmaatthh--oonnllyy
           --ffffllooaatt--ssttoorree  --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e --ffffoorrwwaarrdd--pprrooppaaggaattee  --ffffpp--ccoonnttrraacctt==_s_t_y_l_e
           --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee  --ffggccssee--aafftteerr--rreellooaadd  --ffggccssee--llaass  --ffggccssee--llmm
           --ffggrraapphhiittee--iiddeennttiittyy --ffggccssee--ssmm  --ffhhooiisstt--aaddjjaacceenntt--llooaaddss  --ffiiff--ccoonnvveerrssiioonn
           --ffiiff--ccoonnvveerrssiioonn22  --ffiinnddiirreecctt--iinnlliinniinngg --ffiinnlliinnee--ffuunnccttiioonnss
           --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee  --ffiinnlliinnee--lliimmiitt==_n --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss  --ffiippaa--ccpp
           --ffiippaa--ccpp--cclloonnee --ffiippaa--bbiitt--ccpp  --ffiippaa--vvrrpp  --ffiippaa--ppttaa  --ffiippaa--pprrooffiillee  --ffiippaa--ppuurree--ccoonnsstt
           --ffiippaa--rreeffeerreennccee  --ffiippaa--rreeffeerreennccee--aaddddrreessssaabbllee --ffiippaa--ssttaacckk--aalliiggnnmmeenntt  --ffiippaa--iiccff
           --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m --fflliivvee--ppaattcchhiinngg==_l_e_v_e_l --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           --ffiirraa--hhooiisstt--pprreessssuurree --ffiirraa--lloooopp--pprreessssuurree  --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee
           --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--aattttrriibbuuttee --ffiivvooppttss  --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           --ffkkeeeepp--ssttaattiicc--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss  --fflliimmiitt--ffuunnccttiioonn--aalliiggnnmmeenntt
           --fflliivvee--rraannggee--sshhrriinnkkaaggee --fflloooopp--bblloocckk  --fflloooopp--iinntteerrcchhaannggee  --fflloooopp--ssttrriipp--mmiinnee
           --fflloooopp--uunnrroollll--aanndd--jjaamm  --fflloooopp--nneesstt--ooppttiimmiizzee --fflloooopp--ppaarraalllleelliizzee--aallll  --ffllrraa--rreemmaatt
           --ffllttoo  --ffllttoo--ccoommpprreessssiioonn--lleevveell --ffllttoo--ppaarrttiittiioonn==_a_l_g  --ffmmeerrggee--aallll--ccoonnssttaannttss
           --ffmmeerrggee--ccoonnssttaannttss  --ffmmoodduulloo--sscchheedd  --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           --ffmmoovvee--lloooopp--iinnvvaarriiaannttss  --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffeerr--ppoopp
           --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt  --ffnnoo--ffuunnccttiioonn--ccssee --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           --ffnnoo--iinnlliinnee  --ffnnoo--mmaatthh--eerrrrnnoo  --ffnnoo--ppeeeepphhoollee --ffnnoo--ppeeeepphhoollee22
           --ffnnoo--pprriinnttff--rreettuurrnn--vvaalluuee  --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc  --ffnnoo--ssiiggnneedd--zzeerrooss
           --ffnnoo--ttoopplleevveell--rreeoorrddeerr  --ffnnoo--ttrraappppiinngg--mmaatthh  --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           --ffoommiitt--ffrraammee--ppooiinntteerr  --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppaarrttiiaall--iinnlliinniinngg  --ffppeeeell--llooooppss
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffpprrooffiillee--ccoorrrreeccttiioonn --ffpprrooffiillee--uussee
           --ffpprrooffiillee--uussee==_p_a_t_h  --ffpprrooffiillee--vvaalluueess --ffpprrooffiillee--rreeoorrddeerr--ffuunnccttiioonnss --ffrreecciipprrooccaall--mmaatthh
           --ffrreeee  --ffrreennaammee--rreeggiisstteerrss  --ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn  --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrreerruunn--ccssee--aafftteerr--lloooopp
           --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss --ffrroouunnddiinngg--mmaatthh  --ffssaavvee--ooppttiimmiizzaattiioonn--rreeccoorrdd
           --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss  --ffsscchheedd--pprreessssuurree --ffsscchheedd--ssppeecc--llooaadd
           --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp[[==_n]]
           --ffsscchheedd--ssttaalllleedd--iinnssnnss[[==_n]] --ffsscchheedd--ggrroouupp--hheeuurriissttiicc  --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc
           --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc  --ffsscchheedd--rraannkk--hheeuurriissttiicc --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc --ffsscchheedduullee--ffuussiioonn --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22
           --ffsseeccttiioonn--aanncchhoorrss --ffsseelleeccttiivvee--sscchheedduulliinngg  --ffsseelleeccttiivvee--sscchheedduulliinngg22
           --ffsseell--sscchheedd--ppiippeelliinniinngg  --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss --ffsseemmaannttiicc--iinntteerrppoossiittiioonn
           --ffsshhrriinnkk--wwrraapp  --ffsshhrriinnkk--wwrraapp--sseeppaarraattee --ffssiiggnnaalliinngg--nnaannss --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           --ffsspplliitt--iivvss--iinn--uunnrroolllleerr  --ffsspplliitt--llooooppss --ffsspplliitt--ppaatthhss --ffsspplliitt--wwiiddee--ttyyppeess
           --ffssssaa--bbaacckkpprroopp  --ffssssaa--pphhiioopptt --ffssttddaarrgg--oopptt  --ffssttoorree--mmeerrggiinngg  --ffssttrriicctt--aalliiaassiinngg
           --fftthhrreeaadd--jjuummppss  --ffttrraacceerr  --ffttrreeee--bbiitt--ccccpp --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee  --ffttrreeee--ccccpp
           --ffttrreeee--cchh --ffttrreeee--ccooaalleessccee--vvaarrss  --ffttrreeee--ccooppyy--pprroopp  --ffttrreeee--ddccee  --ffttrreeee--ddoommiinnaattoorr--ooppttss
           --ffttrreeee--ddssee  --ffttrreeee--ffoorrwwpprroopp  --ffttrreeee--ffrree  --ffccooddee--hhooiissttiinngg --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt
           --ffttrreeee--lloooopp--iimm --ffttrreeee--pphhiipprroopp  --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffttrreeee--lloooopp--iivvccaannoonn  --ffttrreeee--lloooopp--lliinneeaarr
           --ffttrreeee--lloooopp--ooppttiimmiizzee --ffttrreeee--lloooopp--vveeccttoorriizzee --ffttrreeee--ppaarraalllleelliizzee--llooooppss==_n  --ffttrreeee--pprree
           --ffttrreeee--ppaarrttiiaall--pprree  --ffttrreeee--ppttaa --ffttrreeee--rreeaassssoocc  --ffttrreeee--sscceevv--ccpprroopp  --ffttrreeee--ssiinnkk
           --ffttrreeee--ssllssrr  --ffttrreeee--ssrraa --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn  --ffttrreeee--ttaaiill--mmeerrggee --ffttrreeee--tteerr
           --ffttrreeee--vveeccttoorriizzee  --ffttrreeee--vvrrpp  --ffuunnccoonnssttrraaiinneedd--ccoommmmoonnss --ffuunniitt--aatt--aa--ttiimmee
           --ffuunnrroollll--aallll--llooooppss  --ffuunnrroollll--llooooppss --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss  --ffuunnsswwiittcchh--llooooppss
           --ffiippaa--rraa  --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr  --ffvveecctt--ccoosstt--mmooddeell  --ffvvpptt --ffwweebb
           --ffwwhhoollee--pprrooggrraamm  --ffwwppaa  --ffuussee--lliinnkkeerr--pplluuggiinn ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO  --OO00  --OO11  --OO22
           --OO33  --OOss  --OOffaasstt  --OOgg

       _P_r_o_g_r_a_m _I_n_s_t_r_u_m_e_n_t_a_t_i_o_n _O_p_t_i_o_n_s
           --pp  --ppgg  --ffpprrooffiillee--aarrccss  ----ccoovveerraaggee  --fftteesstt--ccoovveerraaggee --ffpprrooffiillee--aabbss--ppaatthh
           --ffpprrooffiillee--ddiirr==_p_a_t_h  --ffpprrooffiillee--ggeenneerraattee  --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           --ffpprrooffiillee--uuppddaattee==_m_e_t_h_o_d  --ffpprrooffiillee--ffiilltteerr--ffiilleess==_r_e_g_e_x --ffpprrooffiillee--eexxcclluuddee--ffiilleess==_r_e_g_e_x
           --ffssaanniittiizzee==_s_t_y_l_e  --ffssaanniittiizzee--rreeccoovveerr  --ffssaanniittiizzee--rreeccoovveerr==_s_t_y_l_e
           --ffaassaann--sshhaaddooww--ooffffsseett==_n_u_m_b_e_r  --ffssaanniittiizzee--sseeccttiioonnss==_s_1,,_s_2,,......
           --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr  --ffbboouunnddss--cchheecckk
           --ffccff--pprrootteeccttiioonn==[ffuullll|bbrraanncchh|rreettuurrnn|nnoonnee|cchheecckk] --ffssttaacckk--pprrootteeccttoorr
           --ffssttaacckk--pprrootteeccttoorr--aallll  --ffssttaacckk--pprrootteeccttoorr--ssttrroonngg --ffssttaacckk--pprrootteeccttoorr--eexxpplliicciitt
           --ffssttaacckk--cchheecckk --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m --ffnnoo--ssttaacckk--lliimmiitt
           --ffsspplliitt--ssttaacckk --ffvvttaabbllee--vveerriiffyy==[ssttdd|pprreeiinniitt|nnoonnee] --ffvvttvv--ccoouunnttss  --ffvvttvv--ddeebbuugg
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --CCCC  --DD_m_a_c_r_o[==_d_e_f_n] --ddDD  --ddII  --ddMM  --ddNN
           --ddUU --ffddeebbuugg--ccpppp  --ffddiirreeccttiivveess--oonnllyy  --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           --ffeexxtteennddeedd--iiddeennttiiffiieerrss --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t  --ffmmaaccrroo--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           --ffnnoo--ccaannoonniiccaall--ssyysstteemm--hheeaaddeerrss  --ffppcchh--ddeeppss  --ffppcchh--pprreepprroocceessss --ffpprreepprroocceesssseedd
           --ffttaabbssttoopp==_w_i_d_t_h  --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           --ffwwoorrkkiinngg--ddiirreeccttoorryy --HH  --iimmaaccrrooss _f_i_l_e  --iinncclluuddee _f_i_l_e --MM  --MMDD  --MMFF  --MMGG  --MMMM  --MMMMDD
           --MMPP  --MMQQ  --MMTT --nnoo--iinntteeggrraatteedd--ccpppp  --PP  --pptthhrreeaadd  --rreemmaapp --ttrraaddiittiioonnaall
           --ttrraaddiittiioonnaall--ccpppp  --ttrriiggrraapphhss --UU_m_a_c_r_o  --uunnddeeff --WWpp,,_o_p_t_i_o_n  --XXpprreepprroocceessssoorr _o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n_s
           --WWaa,,_o_p_t_i_o_n  --XXaasssseemmbblleerr _o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ffuussee--lldd==_l_i_n_k_e_r  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess  --nnooddeeffaauullttlliibbss  --nnoolliibbcc
           --nnoossttddlliibb --ee _e_n_t_r_y  ----eennttrryy==_e_n_t_r_y --ppiiee  --pptthhrreeaadd  --rr  --rrddyynnaammiicc --ss  --ssttaattiicc
           --ssttaattiicc--ppiiee  --ssttaattiicc--lliibbggcccc  --ssttaattiicc--lliibbssttddcc++++ --ssttaattiicc--lliibbaassaann  --ssttaattiicc--lliibbttssaann
           --ssttaattiicc--lliibbllssaann  --ssttaattiicc--lliibbuubbssaann --sshhaarreedd  --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --TT _s_c_r_i_p_t
           --WWll,,_o_p_t_i_o_n  --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l  --zz _k_e_y_w_o_r_d

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           --BB_p_r_e_f_i_x  --II_d_i_r  --II-- --iiddiirraafftteerr _d_i_r --iimmaaccrrooss _f_i_l_e  --iimmuullttiilliibb _d_i_r --iipplluuggiinnddiirr==_d_i_r
           --iipprreeffiixx _f_i_l_e --iiqquuoottee _d_i_r  --iissyyssrroooott _d_i_r  --iissyysstteemm _d_i_r --iiwwiitthhpprreeffiixx _d_i_r
           --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r --LL_d_i_r  --nnoo--ccaannoonniiccaall--pprreeffiixxeess  ----nnoo--ssyyssrroooott--ssuuffffiixx --nnoossttddiinncc
           --nnoossttddiinncc++++  ----ssyyssrroooott==_d_i_r

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g  --ffeexxcceeppttiioonnss --ffnnoonn--ccaallll--eexxcceeppttiioonnss
           --ffddeelleettee--ddeeaadd--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           --ffnnoo--ggnnuu--uunniiqquuee --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee  --ffnnoo--ccoommmmoonn  --ffnnoo--iiddeenntt
           --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc  --ffPPIICC  --ffppiiee  --ffPPIIEE  --ffnnoo--pplltt --ffnnoo--jjuummpp--ttaabblleess
           --ffrreeccoorrdd--ggcccc--sswwiittcchheess --ffrreegg--ssttrruucctt--rreettuurrnn  --ffsshhoorrtt--eennuummss  --ffsshhoorrtt--wwcchhaarr
           --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt[[==_n]] --fflleeaaddiinngg--uunnddeerrssccoorree  --ffttllss--mmooddeell==_m_o_d_e_l
           --ffssttaacckk--rreeuussee==_r_e_u_s_e___l_e_v_e_l --ffttrraammppoolliinneess  --ffttrraappvv  --ffwwrraappvv
           --ffvviissiibbiilliittyy==[ddeeffaauulltt|iinntteerrnnaall|hhiiddddeenn|pprrootteecctteedd] --ffssttrriicctt--vvoollaattiillee--bbiittffiieellddss
           --ffssyynncc--lliibbccaallllss

       _D_e_v_e_l_o_p_e_r _O_p_t_i_o_n_s
           --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee  --dduummppvveerrssiioonn --dduummppffuullllvveerrssiioonn  --ffcchheecckkiinngg
           --ffcchheecckkiinngg==_n  --ffddbbgg--ccnntt--lliisstt --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t --ffddiissaabbllee--iippaa--_p_a_s_s___n_a_m_e
           --ffddiissaabbllee--rrttll--_p_a_s_s___n_a_m_e --ffddiissaabbllee--rrttll--_p_a_s_s_-_n_a_m_e==_r_a_n_g_e_-_l_i_s_t --ffddiissaabbllee--ttrreeee--_p_a_s_s___n_a_m_e
           --ffddiissaabbllee--ttrreeee--_p_a_s_s_-_n_a_m_e==_r_a_n_g_e_-_l_i_s_t --ffdduummpp--ddeebbuugg  --ffdduummpp--eeaarrllyyddeebbuugg --ffdduummpp--nnooaaddddrr
           --ffdduummpp--uunnnnuummbbeerreedd  --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss --ffdduummpp--ffiinnaall--iinnssnnss[==_f_i_l_e] --ffdduummpp--iippaa--aallll
           --ffdduummpp--iippaa--ccggrraapphh  --ffdduummpp--iippaa--iinnlliinnee --ffdduummpp--llaanngg--aallll --ffdduummpp--llaanngg--_s_w_i_t_c_h
           --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e --ffdduummpp--ppaasssseess
           --ffdduummpp--rrttll--_p_a_s_s  --ffdduummpp--rrttll--_p_a_s_s==_f_i_l_e_n_a_m_e --ffdduummpp--ssttaattiissttiiccss --ffdduummpp--ttrreeee--aallll
           --ffdduummpp--ttrreeee--_s_w_i_t_c_h --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e
           --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]  --ffccoommppaarree--ddeebbuugg--sseeccoonndd --ffeennaabbllee--_k_i_n_d--_p_a_s_s
           --ffeennaabbllee--_k_i_n_d--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t --ffiirraa--vveerrbboossee==_n --ffllttoo--rreeppoorrtt  --ffllttoo--rreeppoorrtt--wwppaa
           --ffmmeemm--rreeppoorrtt--wwppaa --ffmmeemm--rreeppoorrtt  --ffpprree--iippaa--mmeemm--rreeppoorrtt  --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           --ffoopptt--iinnffoo  --ffoopptt--iinnffoo--_o_p_t_i_o_n_s[==_f_i_l_e] --ffpprrooffiillee--rreeppoorrtt --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g
           --ffsscchheedd--vveerrbboossee==_n --ffsseell--sscchheedd--vveerrbboossee  --ffsseell--sscchheedd--dduummpp--ccffgg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--vveerrbboossee --ffssttaattss  --ffssttaacckk--uussaaggee  --ffttiimmee--rreeppoorrtt
           --ffttiimmee--rreeppoorrtt--ddeettaaiillss --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee  --ggttooggggllee
           --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee --pprriinntt--mmuullttii--ddiirreeccttoorryy
           --pprriinntt--mmuullttii--lliibb  --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --pprriinntt--ssyyssrroooott  --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx --ssaavvee--tteemmppss
           --ssaavvee--tteemmppss==ccwwdd  --ssaavvee--tteemmppss==oobbjj  --ttiimmee[==_f_i_l_e]

       _M_a_c_h_i_n_e_-_D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _A_A_r_c_h_6_4 _O_p_t_i_o_n_s --mmaabbii==_n_a_m_e  --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann --mmggeenneerraall--rreeggss--oonnllyy
           --mmccmmooddeell==ttiinnyy  --mmccmmooddeell==ssmmaallll  --mmccmmooddeell==llaarrggee --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmttllss--ddiiaalleecctt==ddeesscc  --mmttllss--ddiiaalleecctt==ttrraaddiittiioonnaall
           --mmttllss--ssiizzee==_s_i_z_e --mmffiixx--ccoorrtteexx--aa5533--883355776699  --mmffiixx--ccoorrtteexx--aa5533--884433441199
           --mmllooww--pprreecciissiioonn--rreecciipp--ssqqrrtt  --mmllooww--pprreecciissiioonn--ssqqrrtt  --mmllooww--pprreecciissiioonn--ddiivv
           --mmppcc--rreellaattiivvee--lliitteerraall--llooaaddss --mmssiiggnn--rreettuurrnn--aaddddrreessss==_s_c_o_p_e
           --mmbbrraanncchh--pprrootteeccttiioonn==_n_o_n_e||_s_t_a_n_d_a_r_d||_p_a_c_-_r_e_t[[++_l_e_a_f]]||_b_t_i --mmhhaarrddeenn--ssllss==_o_p_t_s --mmaarrcchh==_n_a_m_e
           --mmccppuu==_n_a_m_e  --mmttuunnee==_n_a_m_e --mmoovveerrrriiddee==_s_t_r_i_n_g  --mmvveerrbboossee--ccoosstt--dduummpp
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_s_y_s_r_e_g
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t --mmttrraacckk--ssppeeccuullaattiioonn --mmoouuttlliinnee--aattoommiiccss

           _A_d_a_p_t_e_v_a _E_p_i_p_h_a_n_y _O_p_t_i_o_n_s --mmhhaallff--rreegg--ffiillee  --mmpprreeffeerr--sshhoorrtt--iinnssnn--rreeggss
           --mmbbrraanncchh--ccoosstt==_n_u_m  --mmccmmoovvee  --mmnnooppss==_n_u_m  --mmssoofftt--ccmmppssff --mmsspplliitt--lloohhii  --mmppoosstt--iinncc
           --mmppoosstt--mmooddiiffyy  --mmssttaacckk--ooffffsseett==_n_u_m --mmrroouunndd--nneeaarreesstt  --mmlloonngg--ccaallllss  --mmsshhoorrtt--ccaallllss
           --mmssmmaallll1166 --mmffpp--mmooddee==_m_o_d_e  --mmvveecctt--ddoouubbllee  --mmaaxx--vveecctt--aalliiggnn==_n_u_m --mmsspplliitt--vveeccmmoovvee--eeaarrllyy
           --mm11rreegg--_r_e_g

           _A_M_D _G_C_N _O_p_t_i_o_n_s --mmaarrcchh==_g_p_u --mmttuunnee==_g_p_u --mmssttaacckk--ssiizzee==_b_y_t_e_s

           _A_R_C _O_p_t_i_o_n_s --mmbbaarrrreell--sshhiifftteerr  --mmjjllii--aallwwaayyss --mmccppuu==_c_p_u  --mmAA66  --mmAARRCC660000  --mmAA77
           --mmAARRCC770000 --mmddppffpp  --mmddppffpp--ccoommppaacctt  --mmddppffpp--ffaasstt  --mmnnoo--ddppffpp--llrrssrr --mmeeaa  --mmnnoo--mmppyy
           --mmmmuull3322xx1166  --mmmmuull6644  --mmaattoommiicc --mmnnoorrmm  --mmssppffpp  --mmssppffpp--ccoommppaacctt  --mmssppffpp--ffaasstt  --mmssiimmdd
           --mmssoofftt--ffllooaatt  --mmsswwaapp --mmccrrcc  --mmddsspp--ppaacckkaa  --mmddvvbbff  --mmlloocckk  --mmmmaacc--dd1166  --mmmmaacc--2244
           --mmrrttsscc  --mmsswwaappee --mmtteelleepphhoonnyy  --mmxxyy  --mmiissiizzee  --mmaannnnoottaattee--aalliiggnn  --mmaarrcclliinnuuxx
           --mmaarrcclliinnuuxx__pprrooff --mmlloonngg--ccaallllss  --mmmmeeddiiuumm--ccaallllss  --mmssddaattaa  --mmiirrqq--ccttrrll--ssaavveedd
           --mmrrggff--bbaannkkeedd--rreeggss  --mmllppcc--wwiiddtthh==_w_i_d_t_h  --GG _n_u_m --mmvvoollaattiillee--ccaacchhee  --mmttpp--rreeggnnoo==_r_e_g_n_o
           --mmaalliiggnn--ccaallll  --mmaauuttoo--mmooddiiffyy--rreegg  --mmbbbbiitt--ppeeeepphhoollee  --mmnnoo--bbrrcccc --mmccaassee--vveeccttoorr--ppccrreell
           --mmccoommppaacctt--ccaasseessii  --mmnnoo--ccoonndd--eexxeecc  --mmeeaarrllyy--ccbbrraanncchhssii --mmeexxppaanndd--aaddddddii  --mmiinnddeexxeedd--llooaaddss
           --mmllrraa  --mmllrraa--pprriioorriittyy--nnoonnee --mmllrraa--pprriioorriittyy--ccoommppaacctt mmllrraa--pprriioorriittyy--nnoonnccoommppaacctt
           --mmmmiilllliiccooddee --mmmmiixxeedd--ccooddee  --mmqq--ccllaassss  --mmRRccqq  --mmRRccww  --mmssiizzee--lleevveell==_l_e_v_e_l --mmttuunnee==_c_p_u
           --mmmmuullttccoosstt==_n_u_m  --mmccooddee--ddeennssiittyy--ffrraammee --mmuunnaalliiggnn--pprroobb--tthhrreesshhoolldd==_p_r_o_b_a_b_i_l_i_t_y
           --mmmmppyy--ooppttiioonn==_m_u_l_t_o --mmddiivv--rreemm  --mmccooddee--ddeennssiittyy  --mmllll6644  --mmffppuu==_f_p_u  --mmrrff1166
           --mmbbrraanncchh--iinnddeexx

           _A_R_M _O_p_t_i_o_n_s --mmaappccss--ffrraammee  --mmnnoo--aappccss--ffrraammee --mmaabbii==_n_a_m_e --mmaappccss--ssttaacckk--cchheecckk
           --mmnnoo--aappccss--ssttaacckk--cchheecckk --mmaappccss--rreeeennttrraanntt  --mmnnoo--aappccss--rreeeennttrraanntt --mmggeenneerraall--rreeggss--oonnllyy
           --mmsscchheedd--pprroolloogg  --mmnnoo--sscchheedd--pprroolloogg --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann --mmbbee88  --mmbbee3322
           --mmffllooaatt--aabbii==_n_a_m_e --mmffpp1166--ffoorrmmaatt==_n_a_m_e --mmtthhuummbb--iinntteerrwwoorrkk  --mmnnoo--tthhuummbb--iinntteerrwwoorrkk
           --mmccppuu==_n_a_m_e  --mmaarrcchh==_n_a_m_e  --mmffppuu==_n_a_m_e --mmttuunnee==_n_a_m_e  --mmpprriinntt--ttuunnee--iinnffoo
           --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n --mmaabboorrtt--oonn--nnoorreettuurrnn --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss
           --mmssiinnggllee--ppiicc--bbaassee  --mmnnoo--ssiinnggllee--ppiicc--bbaassee --mmppiicc--rreeggiisstteerr==_r_e_g --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           --mmppookkee--ffuunnccttiioonn--nnaammee --mmtthhuummbb  --mmaarrmm  --mmfflliipp--tthhuummbb --mmttppccss--ffrraammee  --mmttppccss--lleeaaff--ffrraammee
           --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg  --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg --mmttpp==_n_a_m_e
           --mmttllss--ddiiaalleecctt==_d_i_a_l_e_c_t --mmwwoorrdd--rreellooccaattiioonnss --mmffiixx--ccoorrtteexx--mm33--llddrrdd --mmuunnaalliiggnneedd--aacccceessss
           --mmnneeoonn--ffoorr--6644bbiittss --mmssllooww--ffllaasshh--ddaattaa --mmaassmm--ssyynnttaaxx--uunniiffiieedd --mmrreessttrriicctt--iitt
           --mmvveerrbboossee--ccoosstt--dduummpp --mmppuurree--ccooddee --mmccmmssee

           _A_V_R _O_p_t_i_o_n_s --mmmmccuu==_m_c_u  --mmaabbssddaattaa  --mmaaccccuummuullaattee--aarrggss --mmbbrraanncchh--ccoosstt==_c_o_s_t
           --mmccaallll--pprroolloogguueess  --mmggaass--iissrr--pprroolloogguueess  --mmiinntt88 --mmnn__ffllaasshh==_s_i_z_e  --mmnnoo--iinntteerrrruuppttss
           --mmmmaaiinn--iiss--OOSS__ttaasskk  --mmrreellaaxx  --mmrrmmww  --mmssttrriicctt--XX  --mmttiinnyy--ssttaacckk
           --mmffrraacctt--ccoonnvveerrtt--ttrruunnccaattee --mmsshhoorrtt--ccaallllss --nnooddeevviicceelliibb  --nnooddeevviicceessppeeccss
           --WWaaddddrr--ssppaaccee--ccoonnvveerrtt  --WWmmiissssppeelllleedd--iissrr

           _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n] --mmssiimm  --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmssppeecclldd--aannoommaallyy  --mmnnoo--ssppeecclldd--aannoommaallyy  --mmccssyynncc--aannoommaallyy
           --mmnnoo--ccssyynncc--aannoommaallyy --mmllooww--6644kk  --mmnnoo--llooww6644kk  --mmssttaacckk--cchheecckk--ll11  --mmiidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy  --mmsshhaarreedd--lliibbrraarryy--iidd==_n --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa  --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmffaasstt--ffpp  --mmiinnlliinnee--pplltt  --mmmmuullttiiccoorree  --mmccoorreeaa  --mmccoorreebb  --mmssddrraamm
           --mmiiccppllbb

           _C_6_X _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmaarrcchh==_c_p_u --mmssiimm  --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e

           _C_R_I_S _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmaarrcchh==_c_p_u  --mmttuunnee==_c_p_u --mmmmaaxx--ssttaacckk--ffrraammee==_n
           --mmeelliinnuuxx--ssttaacckkssiizzee==_n --mmeettrraaxx44  --mmeettrraaxx110000  --mmppddeebbuugg  --mmcccc--iinniitt  --mmnnoo--ssiiddee--eeffffeeccttss
           --mmssttaacckk--aalliiggnn  --mmddaattaa--aalliiggnn  --mmccoonnsstt--aalliiggnn --mm3322--bbiitt  --mm1166--bbiitt  --mm88--bbiitt
           --mmnnoo--pprroolloogguuee--eeppiilloogguuee  --mmnnoo--ggoottpplltt --mmeellff  --mmaaoouutt  --mmeelliinnuuxx  --mmlliinnuuxx  --ssiimm  --ssiimm22
           --mmmmuull--bbuugg--wwoorrkkaarroouunndd  --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd

           _C_R_1_6 _O_p_t_i_o_n_s --mmmmaacc --mmccrr1166ccpplluuss  --mmccrr1166cc --mmssiimm  --mmiinntt3322  --mmbbiitt--ooppss
           --mmddaattaa--mmooddeell==_m_o_d_e_l

           _C_-_S_K_Y _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u --mmbbiigg--eennddiiaann  --EEBB  --mmlliittttllee--eennddiiaann  --EELL
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt  --mmffppuu==_f_p_u  --mmddoouubbllee--ffllooaatt  --mmffddiivvdduu --mmeellrrww  --mmiissttaacckk
           --mmmmpp  --mmccpp  --mmccaacchhee  --mmsseeccuurriittyy  --mmttrruusstt --mmddsspp  --mmeeddsspp  --mmvvddsspp --mmddiivv  --mmssmmaarrtt
           --mmhhiigghh--rreeggiisstteerrss  --mmaanncchhoorr --mmppuusshhppoopp  --mmmmuullttiippllee--ssttlldd  --mmccoonnssttppooooll  --mmssttaacckk--ssiizzee
           --mmccccrrtt --mmbbrraanncchh--ccoosstt==_n  --mmccssee--cccc  --mmsscchheedd--pprroolloogg

           _D_a_r_w_i_n _O_p_t_i_o_n_s --aallll__llooaadd  --aalllloowwaabbllee__cclliieenntt  --aarrcchh  --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy
           --bbiinndd__aatt__llooaadd  --bbuunnddllee  --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee  --ccoommppaattiibbiilliittyy__vveerrssiioonn
           --ccuurrrreenntt__vveerrssiioonn --ddeeaadd__ssttrriipp --ddeeppeennddeennccyy--ffiillee  --ddyylliibb__ffiillee  --ddyylliinnkkeerr__iinnssttaallll__nnaammee
           --ddyynnaammiicc  --ddyynnaammiicclliibb  --eexxppoorrtteedd__ssyymmbboollss__lliisstt --ffiilleelliisstt  --ffllaatt__nnaammeessppaaccee
           --ffoorrccee__ccppuussuubbttyyppee__AALLLL --ffoorrccee__ffllaatt__nnaammeessppaaccee  --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
           --iiffrraammeewwoorrkk --iimmaaggee__bbaassee  --iinniitt  --iinnssttaallll__nnaammee  --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee
           --mmuullttiippllyy__ddeeffiinneedd  --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd
           --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss --nnooffiixxpprreebbiinnddiinngg  --nnoommuullttiiddeeffss  --nnoopprreebbiinndd
           --nnoosseegglliinnkkeeddiitt --ppaaggeezzeerroo__ssiizzee  --pprreebbiinndd  --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
           --pprriivvaattee__bbuunnddllee  --rreeaadd__oonnllyy__rreellooccss  --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymmbboollss  --wwhhyyllooaadd
           --sseegg11aaddddrr --sseeccttccrreeaattee  --sseeccttoobbjjeeccttssyymmbboollss  --sseeccttoorrddeerr --sseeggaaddddrr
           --sseeggss__rreeaadd__oonnllyy__aaddddrr  --sseeggss__rreeaadd__wwrriittee__aaddddrr --sseegg__aaddddrr__ttaabbllee
           --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee  --sseegglliinnkkeeddiitt --sseeggpprroott  --sseeggss__rreeaadd__oonnllyy__aaddddrr
           --sseeggss__rreeaadd__wwrriittee__aaddddrr --ssiinnggllee__mmoodduullee  --ssttaattiicc  --ssuubb__lliibbrraarryy  --ssuubb__uummbbrreellllaa
           --ttwwoolleevveell__nnaammeessppaaccee  --uummbbrreellllaa  --uunnddeeffiinneedd --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
           --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess --wwhhaattssllooaaddeedd  --FF  --gguusseedd  --ggffuullll
           --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n --mmkkeerrnneell  --mmoonnee--bbyyttee--bbooooll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s --mmnnoo--ffpp--rreeggss  --mmssoofftt--ffllooaatt --mmiieeeeee  --mmiieeeeee--wwiitthh--iinneexxaacctt
           --mmiieeeeee--ccoonnffoorrmmaanntt --mmffpp--ttrraapp--mmooddee==_m_o_d_e  --mmffpp--rroouunnddiinngg--mmooddee==_m_o_d_e
           --mmttrraapp--pprreecciissiioonn==_m_o_d_e  --mmbbuuiilldd--ccoonnssttaannttss --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e --mmbbwwxx
           --mmmmaaxx  --mmffiixx  --mmcciixx --mmffllooaatt--vvaaxx  --mmffllooaatt--iieeeeee --mmeexxpplliicciitt--rreellooccss  --mmssmmaallll--ddaattaa
           --mmllaarrggee--ddaattaa --mmssmmaallll--tteexxtt  --mmllaarrggee--tteexxtt --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e

           _F_R_3_0 _O_p_t_i_o_n_s --mmssmmaallll--mmooddeell  --mmnnoo--llssiimm

           _F_T_3_2 _O_p_t_i_o_n_s --mmssiimm  --mmllrraa  --mmnnooddiivv  --mmfftt3322bb  --mmccoommpprreessss  --mmnnooppmm

           _F_R_V _O_p_t_i_o_n_s --mmggpprr--3322  --mmggpprr--6644  --mmffpprr--3322  --mmffpprr--6644 --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt
           --mmaalllloocc--cccc  --mmffiixxeedd--cccc  --mmddwwoorrdd  --mmnnoo--ddwwoorrdd --mmddoouubbllee  --mmnnoo--ddoouubbllee --mmmmeeddiiaa
           --mmnnoo--mmeeddiiaa  --mmmmuullaadddd  --mmnnoo--mmuullaadddd --mmffddppiicc  --mmiinnlliinnee--pplltt  --mmggpprreell--rroo
           --mmuullttiilliibb--lliibbrraarryy--ppiicc --mmlliinnkkeedd--ffpp  --mmlloonngg--ccaallllss  --mmaalliiggnn--llaabbeellss --mmlliibbrraarryy--ppiicc
           --mmaacccc--44  --mmaacccc--88 --mmppaacckk  --mmnnoo--ppaacckk  --mmnnoo--eeffllaaggss  --mmccoonndd--mmoovvee  --mmnnoo--ccoonndd--mmoovvee
           --mmooppttiimmiizzee--mmeemmbbaarr  --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr --mmsscccc  --mmnnoo--sscccc  --mmccoonndd--eexxeecc
           --mmnnoo--ccoonndd--eexxeecc --mmvvlliiww--bbrraanncchh  --mmnnoo--vvlliiww--bbrraanncchh --mmmmuullttii--ccoonndd--eexxeecc
           --mmnnoo--mmuullttii--ccoonndd--eexxeecc  --mmnneesstteedd--ccoonndd--eexxeecc --mmnnoo--nneesstteedd--ccoonndd--eexxeecc  --mmttoommccaatt--ssttaattss
           --mmTTLLSS  --mmttllss --mmccppuu==_c_p_u

           _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s --mmgglliibbcc  --mmuucclliibbcc  --mmmmuussll  --mmbbiioonniicc  --mmaannddrrooiidd --ttnnoo--aannddrrooiidd--cccc
           --ttnnoo--aannddrrooiidd--lldd

           _H_8_/_3_0_0 _O_p_t_i_o_n_s --mmrreellaaxx  --mmhh  --mmss  --mmnn  --mmeexxrr  --mmnnoo--eexxrr  --mmiinntt3322  --mmaalliiggnn--330000

           _H_P_P_A _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e --mmccaalllleerr--ccooppiieess  --mmddiissaabbllee--ffpprreeggss
           --mmddiissaabbllee--iinnddeexxiinngg --mmffaasstt--iinnddiirreecctt--ccaallllss  --mmggaass  --mmggnnuu--lldd   --mmhhpp--lldd
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmjjuummpp--iinn--ddeellaayy  --mmlliinnkkeerr--oopptt  --mmlloonngg--ccaallllss
           --mmlloonngg--llooaadd--ssttoorree  --mmnnoo--ddiissaabbllee--ffpprreeggss --mmnnoo--ddiissaabbllee--iinnddeexxiinngg
           --mmnnoo--ffaasstt--iinnddiirreecctt--ccaallllss  --mmnnoo--ggaass --mmnnoo--jjuummpp--iinn--ddeellaayy  --mmnnoo--lloonngg--llooaadd--ssttoorree
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee  --mmnnoo--ssoofftt--ffllooaatt --mmnnoo--ssppaaccee--rreeggss  --mmssoofftt--ffllooaatt  --mmppaa--rriisscc--11--00
           --mmppaa--rriisscc--11--11  --mmppaa--rriisscc--22--00  --mmppoorrttaabbllee--rruunnttiimmee --mmsscchheedduullee==_c_p_u_-_t_y_p_e  --mmssppaaccee--rreeggss
           --mmssiioo  --mmwwssiioo --mmuunniixx==_u_n_i_x_-_s_t_d  --nnoolliibbddlldd  --ssttaattiicc  --tthhrreeaaddss

           _I_A_-_6_4 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmggnnuu--aass  --mmggnnuu--lldd  --mmnnoo--ppiicc
           --mmvvoollaattiillee--aassmm--ssttoopp  --mmrreeggiisstteerr--nnaammeess  --mmssddaattaa  --mmnnoo--ssddaattaa --mmccoonnssttaanntt--ggpp
           --mmaauuttoo--ppiicc  --mmffuusseedd--mmaadddd --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt --mmnnoo--iinnlliinnee--ffllooaatt--ddiivviiddee
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--iinnlliinnee--iinntt--ddiivviiddee --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy  --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--iinnlliinnee--ssqqrrtt --mmddwwaarrff22--aassmm  --mmeeaarrllyy--ssttoopp--bbiittss --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e --mmttuunnee==_c_p_u_-_t_y_p_e  --mmiillpp3322  --mmllpp6644 --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--ddaattaa--ssppeecc  --mmsscchheedd--ccoonnttrrooll--ssppeecc --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc  --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc --mmsscchheedd--ssppeecc--llddcc
           --mmsscchheedd--ssppeecc--ccoonnttrrooll--llddcc --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss --mmsscchheedd--ssttoopp--bbiittss--aafftteerr--eevveerryy--ccyyccllee
           --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh --mmsseell--sscchheedd--ddoonntt--cchheecckk--ccoonnttrrooll--ssppeecc
           --mmsscchheedd--ffpp--mmeemm--ddeeppss--zzeerroo--ccoosstt --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss--hhaarrdd--lliimmiitt
           --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss==_m_a_x_-_i_n_s_n_s

           _L_M_3_2 _O_p_t_i_o_n_s --mmbbaarrrreell--sshhiifftt--eennaabblleedd  --mmddiivviiddee--eennaabblleedd  --mmmmuullttiippllyy--eennaabblleedd
           --mmssiiggnn--eexxtteenndd--eennaabblleedd  --mmuusseerr--eennaabblleedd

           _M_3_2_R_/_D _O_p_t_i_o_n_s --mm3322rr22  --mm3322rrxx  --mm3322rr --mmddeebbuugg --mmaalliiggnn--llooooppss  --mmnnoo--aalliiggnn--llooooppss
           --mmiissssuuee--rraattee==_n_u_m_b_e_r --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r --mmmmooddeell==_c_o_d_e_-_s_i_z_e_-_m_o_d_e_l_-_t_y_p_e
           --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e --mmnnoo--fflluusshh--ffuunncc  --mmfflluusshh--ffuunncc==_n_a_m_e --mmnnoo--fflluusshh--ttrraapp
           --mmfflluusshh--ttrraapp==_n_u_m_b_e_r --GG _n_u_m

           _M_3_2_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmssiimm  --mmeemmrreeggss==_n_u_m_b_e_r

           _M_6_8_0_x_0 _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u  --mmttuunnee==_t_u_n_e --mm6688000000  --mm6688002200  --mm6688002200--4400
           --mm6688002200--6600  --mm6688003300  --mm6688004400 --mm6688006600  --mmccppuu3322  --mm55220000  --mm55220066ee  --mm552288xx  --mm55330077
           --mm55440077 --mmccffvv44ee  --mmbbiittffiieelldd  --mmnnoo--bbiittffiieelldd  --mmcc6688000000  --mmcc6688002200 --mmnnoobbiittffiieelldd  --mmrrttdd
           --mmnnoo--rrttdd  --mmddiivv  --mmnnoo--ddiivv  --mmsshhoorrtt --mmnnoo--sshhoorrtt  --mmhhaarrdd--ffllooaatt  --mm6688888811  --mmssoofftt--ffllooaatt
           --mmppccrreell --mmaalliiggnn--iinntt  --mmssttrriicctt--aalliiggnn  --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa
           --mmsshhaarreedd--lliibbrraarryy--iidd==nn  --mmiidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy --mmxxggoott
           --mmnnoo--xxggoott  --mmlloonngg--jjuummpp--ttaabbllee--ooffffsseettss

           _M_C_o_r_e _O_p_t_i_o_n_s --mmhhaarrddlliitt  --mmnnoo--hhaarrddlliitt  --mmddiivv  --mmnnoo--ddiivv  --mmrreellaaxx--iimmmmeeddiiaatteess
           --mmnnoo--rreellaaxx--iimmmmeeddiiaatteess  --mmwwiiddee--bbiittffiieellddss  --mmnnoo--wwiiddee--bbiittffiieellddss --mm44bbyyttee--ffuunnccttiioonnss
           --mmnnoo--44bbyyttee--ffuunnccttiioonnss  --mmccaallllggrraapphh--ddaattaa --mmnnoo--ccaallllggrraapphh--ddaattaa  --mmssllooww--bbyytteess
           --mmnnoo--ssllooww--bbyytteess  --mmnnoo--llssiimm --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann  --mm221100  --mm334400
           --mmssttaacckk--iinnccrreemmeenntt

           _M_e_P _O_p_t_i_o_n_s --mmaabbssddiiffff  --mmaallll--ooppttss  --mmaavveerraaggee  --mmbbaasseedd==_n  --mmbbiittooppss --mmcc==_n  --mmcclliipp
           --mmccoonnffiigg==_n_a_m_e  --mmccoopp  --mmccoopp3322  --mmccoopp6644  --mmiivvcc22 --mmddcc  --mmddiivv  --mmeebb  --mmeell
           --mmiioo--vvoollaattiillee  --mmll  --mmlleeaaddzz  --mmmm  --mmmmiinnmmaaxx --mmmmuulltt  --mmnnoo--ooppttss  --mmrreeppeeaatt  --mmss
           --mmssaattuurr  --mmssddrraamm  --mmssiimm  --mmssiimmnnoovveecc  --mmttff --mmttiinnyy==_n

           _M_i_c_r_o_B_l_a_z_e _O_p_t_i_o_n_s --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmssmmaallll--ddiivviiddeess  --mmccppuu==_c_p_u --mmmmeemmccppyy
           --mmxxll--ssoofftt--mmuull  --mmxxll--ssoofftt--ddiivv  --mmxxll--bbaarrrreell--sshhiifftt --mmxxll--ppaatttteerrnn--ccoommppaarree
           --mmxxll--ssttaacckk--cchheecckk  --mmxxll--ggpp--oopptt  --mmnnoo--cclleeaarrbbssss --mmxxll--mmuullttiippllyy--hhiigghh  --mmxxll--ffllooaatt--ccoonnvveerrtt
           --mmxxll--ffllooaatt--ssqqrrtt --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmxxll--rreeoorrddeerr  --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l
           --mmppiicc--ddaattaa--iiss--tteexxtt--rreellaattiivvee

           _M_I_P_S _O_p_t_i_o_n_s --EELL  --EEBB  --mmaarrcchh==_a_r_c_h  --mmttuunnee==_a_r_c_h --mmiippss11  --mmiippss22  --mmiippss33  --mmiippss44
           --mmiippss3322  --mmiippss3322rr22  --mmiippss3322rr33  --mmiippss3322rr55 --mmiippss3322rr66  --mmiippss6644  --mmiippss6644rr22  --mmiippss6644rr33
           --mmiippss6644rr55  --mmiippss6644rr66 --mmiippss1166  --mmnnoo--mmiippss1166  --mmfflliipp--mmiippss1166 --mmiinntteerrlliinnkk--ccoommpprreesssseedd
           --mmnnoo--iinntteerrlliinnkk--ccoommpprreesssseedd --mmiinntteerrlliinnkk--mmiippss1166  --mmnnoo--iinntteerrlliinnkk--mmiippss1166 --mmaabbii==_a_b_i
           --mmaabbiiccaallllss  --mmnnoo--aabbiiccaallllss --mmsshhaarreedd  --mmnnoo--sshhaarreedd  --mmpplltt  --mmnnoo--pplltt  --mmxxggoott  --mmnnoo--xxggoott
           --mmggpp3322  --mmggpp6644  --mmffpp3322  --mmffppxxxx  --mmffpp6644  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmnnoo--ffllooaatt
           --mmssiinnggllee--ffllooaatt  --mmddoouubbllee--ffllooaatt --mmoodddd--sspprreegg  --mmnnoo--oodddd--sspprreegg --mmaabbss==_m_o_d_e
           --mmnnaann==_e_n_c_o_d_i_n_g --mmddsspp  --mmnnoo--ddsspp  --mmddsspprr22  --mmnnoo--ddsspprr22 --mmmmccuu  --mmmmnnoo--mmccuu --mmeevvaa
           --mmnnoo--eevvaa --mmvviirrtt  --mmnnoo--vviirrtt --mmxxppaa  --mmnnoo--xxppaa --mmccrrcc  --mmnnoo--ccrrcc --mmggiinnvv  --mmnnoo--ggiinnvv
           --mmmmiiccrroommiippss  --mmnnoo--mmiiccrroommiippss --mmmmssaa  --mmnnoo--mmssaa --mmlloooonnggssoonn--mmmmii  --mmnnoo--lloooonnggssoonn--mmmmii
           --mmlloooonnggssoonn--eexxtt  --mmnnoo--lloooonnggssoonn--eexxtt --mmlloooonnggssoonn--eexxtt22  --mmnnoo--lloooonnggssoonn--eexxtt22 --mmffppuu==_f_p_u_-
           _t_y_p_e --mmssmmaarrttmmiippss  --mmnnoo--ssmmaarrttmmiippss --mmppaaiirreedd--ssiinnggllee  --mmnnoo--ppaaiirreedd--ssiinnggllee  --mmddmmxx
           --mmnnoo--mmddmmxx --mmiippss33dd  --mmnnoo--mmiippss33dd  --mmmmtt  --mmnnoo--mmtt  --mmllllsscc  --mmnnoo--llllsscc --mmlloonngg6644  --mmlloonngg3322
           --mmssyymm3322  --mmnnoo--ssyymm3322 --GG_n_u_m  --mmllooccaall--ssddaattaa  --mmnnoo--llooccaall--ssddaattaa --mmeexxtteerrnn--ssddaattaa
           --mmnnoo--eexxtteerrnn--ssddaattaa  --mmggppoopptt  --mmnnoo--ggoopptt --mmeemmbbeeddddeedd--ddaattaa  --mmnnoo--eemmbbeeddddeedd--ddaattaa
           --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa  --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           --mmsspplliitt--aaddddrreesssseess  --mmnnoo--sspplliitt--aaddddrreesssseess --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss
           --mmcchheecckk--zzeerroo--ddiivviissiioonn  --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn --mmddiivviiddee--ttrraappss  --mmddiivviiddee--bbrreeaakkss
           --mmllooaadd--ssttoorree--ppaaiirrss  --mmnnoo--llooaadd--ssttoorree--ppaaiirrss --mmmmeemmccppyy  --mmnnoo--mmeemmccppyy  --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmmmaadd  --mmnnoo--mmaadd  --mmiimmaadddd  --mmnnoo--iimmaadddd  --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
           --nnooccpppp --mmffiixx--2244kk  --mmnnoo--ffiixx--2244kk --mmffiixx--rr44000000  --mmnnoo--ffiixx--rr44000000  --mmffiixx--rr44440000
           --mmnnoo--ffiixx--rr44440000 --mmffiixx--rr55990000  --mmnnoo--ffiixx--rr55990000 --mmffiixx--rr1100000000  --mmnnoo--ffiixx--rr1100000000
           --mmffiixx--rrmm77000000  --mmnnoo--ffiixx--rrmm77000000 --mmffiixx--vvrr44112200  --mmnnoo--ffiixx--vvrr44112200 --mmffiixx--vvrr44113300
           --mmnnoo--ffiixx--vvrr44113300  --mmffiixx--ssbb11  --mmnnoo--ffiixx--ssbb11 --mmfflluusshh--ffuunncc==_f_u_n_c  --mmnnoo--fflluusshh--ffuunncc
           --mmbbrraanncchh--ccoosstt==_n_u_m  --mmbbrraanncchh--lliikkeellyy  --mmnnoo--bbrraanncchh--lliikkeellyy --mmccoommppaacctt--bbrraanncchheess==_p_o_l_i_c_y
           --mmffpp--eexxcceeppttiioonnss  --mmnnoo--ffpp--eexxcceeppttiioonnss --mmvvrr44113300--aalliiggnn  --mmnnoo--vvrr44113300--aalliiggnn  --mmssyynnccii
           --mmnnoo--ssyynnccii --mmllxxcc11--ssxxcc11  --mmnnoo--llxxcc11--ssxxcc11  --mmmmaadddd44  --mmnnoo--mmaadddd44 --mmrreellaaxx--ppiicc--ccaallllss
           --mmnnoo--rreellaaxx--ppiicc--ccaallllss  --mmmmccoouunntt--rraa--aaddddrreessss --mmffrraammee--hheeaaddeerr--oopptt  --mmnnoo--ffrraammee--hheeaaddeerr--oopptt

           _M_M_I_X _O_p_t_i_o_n_s --mmlliibbffuunnccss  --mmnnoo--lliibbffuunnccss  --mmeeppssiilloonn  --mmnnoo--eeppssiilloonn  --mmaabbii==ggnnuu
           --mmaabbii==mmmmiixxwwaarree  --mmzzeerroo--eexxtteenndd  --mmkknnuutthhddiivv  --mmttoopplleevveell--ssyymmbboollss --mmeellff
           --mmbbrraanncchh--pprreeddiicctt  --mmnnoo--bbrraanncchh--pprreeddiicctt  --mmbbaassee--aaddddrreesssseess --mmnnoo--bbaassee--aaddddrreesssseess
           --mmssiinnggllee--eexxiitt  --mmnnoo--ssiinnggllee--eexxiitt

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s --mmmmuulltt--bbuugg  --mmnnoo--mmuulltt--bbuugg --mmnnoo--aamm3333  --mmaamm3333  --mmaamm3333--22  --mmaamm3344
           --mmttuunnee==_c_p_u_-_t_y_p_e --mmrreettuurrnn--ppooiinntteerr--oonn--dd00 --mmnnoo--ccrrtt00  --mmrreellaaxx  --mmlliiww  --mmsseettllbb

           _M_o_x_i_e _O_p_t_i_o_n_s --mmeebb  --mmeell  --mmmmuull..xx  --mmnnoo--ccrrtt00

           _M_S_P_4_3_0 _O_p_t_i_o_n_s --mmssiimm  --mmaassmm--hheexx  --mmmmccuu==  --mmccppuu==  --mmllaarrggee  --mmssmmaallll  --mmrreellaaxx
           --mmwwaarrnn--mmccuu --mmccooddee--rreeggiioonn==  --mmddaattaa--rreeggiioonn== --mmssiilliiccoonn--eerrrraattaa==  --mmssiilliiccoonn--eerrrraattaa--wwaarrnn==
           --mmhhwwmmuulltt==  --mmiinnrrtt

           _N_D_S_3_2 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann --mmrreedduucceedd--rreeggss  --mmffuullll--rreeggss --mmccmmoovv
           --mmnnoo--ccmmoovv --mmeexxtt--ppeerrff  --mmnnoo--eexxtt--ppeerrff --mmeexxtt--ppeerrff22  --mmnnoo--eexxtt--ppeerrff22 --mmeexxtt--ssttrriinngg
           --mmnnoo--eexxtt--ssttrriinngg --mmvv33ppuusshh  --mmnnoo--vv33ppuusshh --mm1166bbiitt  --mmnnoo--1166bbiitt --mmiissrr--vveeccttoorr--ssiizzee==_n_u_m
           --mmccaacchhee--bblloocckk--ssiizzee==_n_u_m --mmaarrcchh==_a_r_c_h --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmccttoorr--ddttoorr  --mmrreellaaxx

           _N_i_o_s _I_I _O_p_t_i_o_n_s --GG _n_u_m  --mmggppoopptt==_o_p_t_i_o_n  --mmggppoopptt  --mmnnoo--ggppoopptt --mmggpprreell--sseecc==_r_e_g_e_x_p
           --mmrr00rreell--sseecc==_r_e_g_e_x_p --mmeell  --mmeebb --mmnnoo--bbyyppaassss--ccaacchhee  --mmbbyyppaassss--ccaacchhee --mmnnoo--ccaacchhee--vvoollaattiillee
           --mmccaacchhee--vvoollaattiillee --mmnnoo--ffaasstt--ssww--ddiivv  --mmffaasstt--ssww--ddiivv --mmhhww--mmuull  --mmnnoo--hhww--mmuull  --mmhhww--mmuullxx
           --mmnnoo--hhww--mmuullxx  --mmnnoo--hhww--ddiivv  --mmhhww--ddiivv --mmccuussttoomm--_i_n_s_n==_N  --mmnnoo--ccuussttoomm--_i_n_s_n
           --mmccuussttoomm--ffppuu--ccffgg==_n_a_m_e --mmhhaall  --mmssmmaallllcc  --mmssyyss--ccrrtt00==_n_a_m_e  --mmssyyss--lliibb==_n_a_m_e --mmaarrcchh==_a_r_c_h
           --mmbbmmxx  --mmnnoo--bbmmxx  --mmccddxx  --mmnnoo--ccddxx

           _N_v_i_d_i_a _P_T_X _O_p_t_i_o_n_s --mm3322  --mm6644  --mmmmaaiinnkkeerrnneell  --mmooppttiimmiizzee

           _O_p_e_n_R_I_S_C _O_p_t_i_o_n_s --mmbbooaarrdd==_n_a_m_e  --mmnneewwlliibb  --mmhhaarrdd--mmuull  --mmhhaarrdd--ddiivv --mmssoofftt--mmuull
           --mmssoofftt--ddiivv --mmccmmoovv  --mmrroorr  --mmsseexxtt  --mmssffiimmmm  --mmsshhffttiimmmm

           _P_D_P_-_1_1 _O_p_t_i_o_n_s --mmffppuu  --mmssoofftt--ffllooaatt  --mmaacc00  --mmnnoo--aacc00  --mm4400  --mm4455  --mm1100 --mmiinntt3322
           --mmnnoo--iinntt1166  --mmiinntt1166  --mmnnoo--iinntt3322 --mmsspplliitt  --mmuunniixx--aassmm  --mmddeecc--aassmm  --mmggnnuu--aassmm  --mmllrraa

           _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s --mmaaee==_a_e___t_y_p_e  --mmvvlliiww--llooookkaahheeaadd==_N --mmssyymmbbooll--aass--aaddddrreessss
           --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss

           _P_o_w_e_r_P_C _O_p_t_i_o_n_s See RS/6000 and PowerPC Options.

           _R_I_S_C_-_V _O_p_t_i_o_n_s --mmbbrraanncchh--ccoosstt==_N_-_i_n_s_t_r_u_c_t_i_o_n --mmpplltt  --mmnnoo--pplltt --mmaabbii==_A_B_I_-_s_t_r_i_n_g --mmffddiivv
           --mmnnoo--ffddiivv --mmddiivv  --mmnnoo--ddiivv --mmaarrcchh==_I_S_A_-_s_t_r_i_n_g --mmttuunnee==_p_r_o_c_e_s_s_o_r_-_s_t_r_i_n_g
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m --mmssmmaallll--ddaattaa--lliimmiitt==_N_-_b_y_t_e_s --mmssaavvee--rreessttoorree
           --mmnnoo--ssaavvee--rreessttoorree --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn --mmccmmooddeell==mmeeddllooww
           --mmccmmooddeell==mmeeddaannyy --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss --mmrreellaaxx  --mmnnoo--rreellaaxx
           --mmrriissccvv--aattttrriibbuuttee  --mmmmoo--rriissccvv--aattttrriibbuuttee

           _R_L_7_8 _O_p_t_i_o_n_s --mmssiimm  --mmmmuull==nnoonnee  --mmmmuull==gg1133  --mmmmuull==gg1144  --mmaallllrreeggss --mmccppuu==gg1100
           --mmccppuu==gg1133  --mmccppuu==gg1144  --mmgg1100  --mmgg1133  --mmgg1144 --mm6644bbiitt--ddoouubblleess  --mm3322bbiitt--ddoouubblleess
           --mmssaavvee--mmdduucc--iinn--iinntteerrrruuppttss

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l
           --mmppoowweerrppcc6644 --mmaallttiivveecc  --mmnnoo--aallttiivveecc --mmppoowweerrppcc--ggppoopptt  --mmnnoo--ppoowweerrppcc--ggppoopptt
           --mmppoowweerrppcc--ggffxxoopptt  --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmmmffccrrff  --mmnnoo--mmffccrrff  --mmppooppccnnttbb  --mmnnoo--ppooppccnnttbb
           --mmppooppccnnttdd  --mmnnoo--ppooppccnnttdd --mmffpprrnndd  --mmnnoo--ffpprrnndd --mmccmmppbb  --mmnnoo--ccmmppbb  --mmmmffppggpprr
           --mmnnoo--mmffppggpprr  --mmhhaarrdd--ddffpp  --mmnnoo--hhaarrdd--ddffpp --mmffuullll--ttoocc   --mmmmiinniimmaall--ttoocc  --mmnnoo--ffpp--iinn--ttoocc
           --mmnnoo--ssuumm--iinn--ttoocc --mm6644  --mm3322  --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt  --mmppee --mmaalliiggnn--ppoowweerr
           --mmaalliiggnn--nnaattuurraall --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee --mmuuppddaattee
           --mmnnoo--uuppddaattee --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess  --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd  --mmbbiitt--aalliiggnn  --mmnnoo--bbiitt--aalliiggnn --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn
           --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee  --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc
           --mmnnoo--ttoocc  --mmlliittttllee  --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc  --mmsswwddiivv
           --mmssiinnggllee--ppiicc--bbaassee --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e --mmccaallll--aaiixxddeesscc
           --mmccaallll--eeaabbii  --mmccaallll--ffrreeeebbssdd --mmccaallll--lliinnuuxx  --mmccaallll--nneettbbssdd  --mmccaallll--ooppeennbbssdd --mmccaallll--ssyyssvv
           --mmccaallll--ssyyssvv--eeaabbii  --mmccaallll--ssyyssvv--nnooeeaabbii --mmttrraacceebbaacckk==_t_r_a_c_e_b_a_c_k___t_y_p_e --mmaaiixx--ssttrruucctt--rreettuurrnn
           --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-_t_y_p_e  --mmsseeccuurree--pplltt  --mmbbssss--pplltt --mmlloonnggccaallll
           --mmnnoo--lloonnggccaallll  --mmppllttsseeqq  --mmnnoo--ppllttsseeqq --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m
           --mmbblloocckk--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m --mmbblloocckk--ccoommppaarree--iinnlliinnee--lloooopp--lliimmiitt==_n_u_m
           --mmssttrriinngg--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m --mmiisseell  --mmnnoo--iisseell --mmvvrrssaavvee  --mmnnoo--vvrrssaavvee --mmmmuullhhww
           --mmnnoo--mmuullhhww --mmddllmmzzbb  --mmnnoo--ddllmmzzbb --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm  --mmmmvvmmee  --mmaaddss
           --mmyyeelllloowwkknniiffee  --mmeemmbb  --mmssddaattaa --mmssddaattaa==_o_p_t  --mmrreeaaddoonnllyy--iinn--ssddaattaa  --mmvvxxwwoorrkkss  --GG _n_u_m
           --mmrreecciipp  --mmrreecciipp==_o_p_t  --mmnnoo--rreecciipp  --mmrreecciipp--pprreecciissiioonn --mmnnoo--rreecciipp--pprreecciissiioonn
           --mmvveecclliibbaabbii==_t_y_p_e  --mmffrriizz  --mmnnoo--ffrriizz --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss --mmssaavvee--ttoocc--iinnddiirreecctt  --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt
           --mmppoowweerr88--ffuussiioonn  --mmnnoo--mmppoowweerr88--ffuussiioonn  --mmppoowweerr88--vveeccttoorr  --mmnnoo--ppoowweerr88--vveeccttoorr --mmccrryyppttoo
           --mmnnoo--ccrryyppttoo  --mmhhttmm  --mmnnoo--hhttmm --mmqquuaadd--mmeemmoorryy  --mmnnoo--qquuaadd--mmeemmoorryy --mmqquuaadd--mmeemmoorryy--aattoommiicc
           --mmnnoo--qquuaadd--mmeemmoorryy--aattoommiicc --mmccoommppaatt--aalliiggnn--ppaarrmm  --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm --mmffllooaatt112288
           --mmnnoo--ffllooaatt112288  --mmffllooaatt112288--hhaarrddwwaarree  --mmnnoo--ffllooaatt112288--hhaarrddwwaarree --mmggnnuu--aattttrriibbuuttee
           --mmnnoo--ggnnuu--aattttrriibbuuttee --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t

           _R_X _O_p_t_i_o_n_s --mm6644bbiitt--ddoouubblleess  --mm3322bbiitt--ddoouubblleess  --ffppuu  --nnooffppuu --mmccppuu== --mmbbiigg--eennddiiaann--ddaattaa
           --mmlliittttllee--eennddiiaann--ddaattaa --mmssmmaallll--ddaattaa --mmssiimm  --mmnnoo--ssiimm --mmaass110000--ssyynnttaaxx  --mmnnoo--aass110000--ssyynnttaaxx
           --mmrreellaaxx --mmmmaaxx--ccoonnssttaanntt--ssiizzee== --mmiinntt--rreeggiisstteerr== --mmppiidd --mmaallllooww--ssttrriinngg--iinnssnnss
           --mmnnoo--aallllooww--ssttrriinngg--iinnssnnss --mmjjssrr --mmnnoo--wwaarrnn--mmuullttiippllee--ffaasstt--iinntteerrrruuppttss
           --mmssaavvee--aacccc--iinn--iinntteerrrruuppttss

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e --mmhhaarrdd--ffllooaatt
           --mmssoofftt--ffllooaatt  --mmhhaarrdd--ddffpp  --mmnnoo--hhaarrdd--ddffpp --mmlloonngg--ddoouubbllee--6644  --mmlloonngg--ddoouubbllee--112288
           --mmbbaacckkcchhaaiinn  --mmnnoo--bbaacckkcchhaaiinn  --mmppaacckkeedd--ssttaacckk  --mmnnoo--ppaacckkeedd--ssttaacckk --mmssmmaallll--eexxeecc
           --mmnnoo--ssmmaallll--eexxeecc  --mmmmvvccllee  --mmnnoo--mmvvccllee --mm6644  --mm3311  --mmddeebbuugg  --mmnnoo--ddeebbuugg  --mmeessaa
           --mmzzaarrcchh --mmhhttmm  --mmvvxx  --mmzzvveeccttoorr --mmttppff--ttrraaccee  --mmnnoo--ttppff--ttrraaccee  --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd --mmwwaarrnn--ffrraammeessiizzee  --mmwwaarrnn--ddyynnaammiiccssttaacckk  --mmssttaacckk--ssiizzee  --mmssttaacckk--gguuaarrdd
           --mmhhoottppaattcchh==_h_a_l_f_w_o_r_d_s,,_h_a_l_f_w_o_r_d_s

           _S_c_o_r_e _O_p_t_i_o_n_s --mmeebb  --mmeell --mmnnhhwwlloooopp --mmuullss --mmmmaacc --mmssccoorree55  --mmssccoorree55uu  --mmssccoorree77
           --mmssccoorree77dd

           _S_H _O_p_t_i_o_n_s --mm11  --mm22  --mm22ee --mm22aa--nnooffppuu  --mm22aa--ssiinnggllee--oonnllyy  --mm22aa--ssiinnggllee  --mm22aa --mm33  --mm33ee
           --mm44--nnooffppuu  --mm44--ssiinnggllee--oonnllyy  --mm44--ssiinnggllee  --mm44 --mm44aa--nnooffppuu  --mm44aa--ssiinnggllee--oonnllyy
           --mm44aa--ssiinnggllee  --mm44aa  --mm44aall --mmbb  --mmll  --mmddaalliiggnn  --mmrreellaaxx --mmbbiiggttaabbllee  --mmffmmoovvdd  --mmrreenneessaass
           --mmnnoo--rreenneessaass  --mmnnoommaaccssaavvee --mmiieeeeee  --mmnnoo--iieeeeee  --mmbbiittooppss  --mmiissiizzee
           --mmiinnlliinnee--iicc__iinnvvaalliiddaattee  --mmppaaddssttrruucctt --mmpprreeffeerrggoott  --mmuusseerrmmooddee  --mmuullttccoosstt==_n_u_m_b_e_r
           --mmddiivv==_s_t_r_a_t_e_g_y --mmddiivvssii33__lliibbffuunncc==_n_a_m_e  --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss --mmaattoommiicc--mmooddeell==_a_t_o_m_i_c_-_m_o_d_e_l --mmbbrraanncchh--ccoosstt==_n_u_m
           --mmzzddccbbrraanncchh  --mmnnoo--zzddccbbrraanncchh --mmccbbrraanncchh--ffoorrccee--ddeellaayy--sslloott --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd  --mmffssccaa  --mmnnoo--ffssccaa  --mmffssrrrraa  --mmnnoo--ffssrrrraa --mmpprreetteenndd--ccmmoovvee  --mmttaass

           _S_o_l_a_r_i_s _2 _O_p_t_i_o_n_s --mmcclleeaarr--hhwwccaapp  --mmnnoo--cclleeaarr--hhwwccaapp  --mmiimmppuurree--tteexxtt  --mmnnoo--iimmppuurree--tteexxtt
           --pptthhrreeaaddss

           _S_P_A_R_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l
           --mmmmeemmoorryy--mmooddeell==_m_e_m_-_m_o_d_e_l --mm3322  --mm6644  --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss --mmffaasstteerr--ssttrruuccttss
           --mmnnoo--ffaasstteerr--ssttrruuccttss  --mmffllaatt  --mmnnoo--ffllaatt --mmffppuu  --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt
           --mmhhaarrdd--qquuaadd--ffllooaatt  --mmssoofftt--qquuaadd--ffllooaatt --mmssttaacckk--bbiiaass  --mmnnoo--ssttaacckk--bbiiaass
           --mmssttdd--ssttrruucctt--rreettuurrnn  --mmnnoo--ssttdd--ssttrruucctt--rreettuurrnn --mmuunnaalliiggnneedd--ddoouubblleess
           --mmnnoo--uunnaalliiggnneedd--ddoouubblleess --mmuusseerr--mmooddee  --mmnnoo--uusseerr--mmooddee --mmvv88pplluuss  --mmnnoo--vv88pplluuss  --mmvviiss
           --mmnnoo--vviiss --mmvviiss22  --mmnnoo--vviiss22  --mmvviiss33  --mmnnoo--vviiss33 --mmvviiss44  --mmnnoo--vviiss44  --mmvviiss44bb
           --mmnnoo--vviiss44bb --mmccbbccoonndd  --mmnnoo--ccbbccoonndd  --mmffmmaaff  --mmnnoo--ffmmaaff  --mmffssmmuulldd  --mmnnoo--ffssmmuulldd --mmppooppcc
           --mmnnoo--ppooppcc  --mmssuubbxxcc  --mmnnoo--ssuubbxxcc --mmffiixx--aatt669977ff  --mmffiixx--uutt669999  --mmffiixx--uutt770000
           --mmffiixx--ggrr771122rrcc --mmllrraa  --mmnnoo--llrraa

           _S_P_U _O_p_t_i_o_n_s --mmwwaarrnn--rreelloocc  --mmeerrrroorr--rreelloocc --mmssaaffee--ddmmaa  --mmuunnssaaffee--ddmmaa --mmbbrraanncchh--hhiinnttss
           --mmssmmaallll--mmeemm  --mmllaarrggee--mmeemm  --mmssttddmmaaiinn --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmeeaa3322  --mmeeaa6644
           --mmaaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn  --mmnnoo--aaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn --mmccaacchhee--ssiizzee==_c_a_c_h_e_-_s_i_z_e
           --mmaattoommiicc--uuppddaatteess  --mmnnoo--aattoommiicc--uuppddaatteess

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s --QQyy  --QQnn  --YYPP,,_p_a_t_h_s  --YYmm,,_d_i_r

           _T_I_L_E_-_G_x _O_p_t_i_o_n_s --mmccppuu==CCPPUU  --mm3322  --mm6644  --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann --mmccmmooddeell==_c_o_d_e_-
           _m_o_d_e_l

           _T_I_L_E_P_r_o _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mm3322

           _V_8_5_0 _O_p_t_i_o_n_s --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss  --mmeepp  --mmnnoo--eepp --mmpprroolloogg--ffuunnccttiioonn
           --mmnnoo--pprroolloogg--ffuunnccttiioonn  --mmssppaaccee --mmttddaa==_n  --mmssddaa==_n  --mmzzddaa==_n --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss
           --mmddiissaabbllee--ccaalllltt  --mmnnoo--ddiissaabbllee--ccaalllltt --mmvv885500ee22vv33  --mmvv885500ee22  --mmvv885500ee11  --mmvv885500eess
           --mmvv885500ee  --mmvv885500  --mmvv885500ee33vv55 --mmlloooopp --mmrreellaaxx --mmlloonngg--jjuummppss --mmssoofftt--ffllooaatt --mmhhaarrdd--ffllooaatt
           --mmggcccc--aabbii --mmrrhh885500--aabbii --mmbbiigg--sswwiittcchh

           _V_A_X _O_p_t_i_o_n_s --mmgg  --mmggnnuu  --mmuunniixx

           _V_i_s_i_u_m _O_p_t_i_o_n_s --mmddeebbuugg  --mmssiimm  --mmffppuu  --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt
           --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e  --mmssvv--mmooddee  --mmuusseerr--mmooddee

           _V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess  --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x  --mmmmaalllloocc6644 --mmppooiinntteerr--ssiizzee==_s_i_z_e

           _V_x_W_o_r_k_s _O_p_t_i_o_n_s --mmrrttpp  --nnoonn--ssttaattiicc  --BBssttaattiicc  --BBddyynnaammiicc --XXbbiinndd--llaazzyy  --XXbbiinndd--nnooww

           _x_8_6 _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-_l_i_s_t
           --mmdduummpp--ttuunnee--ffeeaattuurreess  --mmnnoo--ddeeffaauulltt --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t  --mmnnoo--ffaannccyy--mmaatthh--338877
           --mmnnoo--ffpp--rreett--iinn--338877  --mm8800338877  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmnnoo--wwiiddee--mmuullttiippllyy  --mmrrttdd
           --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m --mmcclldd
           --mmccxx1166  --mmssaahhff  --mmmmoovvbbee  --mmccrrcc3322 --mmrreecciipp  --mmrreecciipp==_o_p_t --mmvvzzeerroouuppppeerr  --mmpprreeffeerr--aavvxx112288
           --mmpprreeffeerr--vveeccttoorr--wwiiddtthh==_o_p_t --mmmmmmxx  --mmssssee  --mmssssee22  --mmssssee33  --mmssssssee33  --mmssssee44..11  --mmssssee44..22
           --mmssssee44  --mmaavvxx --mmaavvxx22  --mmaavvxx551122ff  --mmaavvxx551122ppff  --mmaavvxx551122eerr  --mmaavvxx551122ccdd  --mmaavvxx551122vvll
           --mmaavvxx551122bbww  --mmaavvxx551122ddqq  --mmaavvxx551122iiffmmaa  --mmaavvxx551122vvbbmmii  --mmsshhaa  --mmaaeess --mmppccllmmuull
           --mmffssggssbbaassee  --mmrrddrrnndd  --mmff1166cc  --mmffmmaa  --mmppccoonnffiigg  --mmwwbbnnooiinnvvdd --mmppttwwrriittee  --mmpprreeffeettcchhwwtt11
           --mmccllfflluusshhoopptt  --mmccllwwbb  --mmxxssaavveecc  --mmxxssaavveess --mmssssee44aa  --mm33ddnnooww  --mm33ddnnoowwaa  --mmppooppccnntt
           --mmaabbmm  --mmbbmmii  --mmttbbmm  --mmffmmaa44  --mmxxoopp --mmaaddxx  --mmllzzccnntt  --mmbbmmii22  --mmffxxssrr  --mmxxssaavvee
           --mmxxssaavveeoopptt  --mmrrttmm  --mmhhllee  --mmllwwpp --mmmmwwaaiittxx  --mmccllzzeerroo  --mmppkkuu  --mmtthhrreeaaddss  --mmggffnnii
           --mmvvaaeess  --mmwwaaiittppkkgg --mmsshhssttkk --mmmmaannuuaall--eennddbbrr --mmffoorrccee--iinnddiirreecctt--ccaallll  --mmaavvxx551122vvbbmmii22
           --mmvvppccllmmuullqqddqq  --mmaavvxx551122bbiittaallgg  --mmmmoovvddiirrii  --mmmmoovvddiirr6644bb  --mmaavvxx551122vvppooppccnnttddqq
           --mmaavvxx55112244ffmmaappss  --mmaavvxx551122vvnnnnii  --mmaavvxx55112244vvnnnniiww  --mmpprrffcchhww  --mmrrddppiidd --mmrrddsseeeedd  --mmssggxx
           --mmccllddeemmoottee  --mmmmss--bbiittffiieellddss  --mmnnoo--aalliiggnn--ssttrriinnggooppss  --mmiinnlliinnee--aallll--ssttrriinnggooppss
           --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy  --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g --mmmmeemmccppyy--ssttrraatteeggyy==_s_t_r_a_t_e_g_y
           --mmmmeemmsseett--ssttrraatteeggyy==_s_t_r_a_t_e_g_y --mmppuusshh--aarrggss  --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           --mm112288bbiitt--lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee  --mmlloonngg--ddoouubbllee--6644  --mmlloonngg--ddoouubbllee--8800
           --mmlloonngg--ddoouubbllee--112288 --mmrreeggppaarrmm==_n_u_m  --mmsssseerreeggppaarrmm --mmvveecclliibbaabbii==_t_y_p_e  --mmvveecctt88--rreett--iinn--mmeemm
           --mmppcc3322  --mmppcc6644  --mmppcc8800  --mmssttaacckkrreeaalliiggnn --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr  --mmnnoo--rreedd--zzoonnee
           --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l  --mmaabbii==_n_a_m_e  --mmaaddddrreessss--mmooddee==_m_o_d_e --mm3322
           --mm6644  --mmxx3322  --mm1166  --mmiiaammccuu  --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m --mmssssee22aavvxx  --mmffeennttrryy
           --mmrreeccoorrdd--mmccoouunntt  --mmnnoopp--mmccoouunntt  --mm88bbiitt--iiddiivv --mmiinnssttrruummeenntt--rreettuurrnn==_t_y_p_e
           --mmffeennttrryy--nnaammee==_n_a_m_e --mmffeennttrryy--sseeccttiioonn==_n_a_m_e --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--llooaadd
           --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--ssttoorree --mmaalliiggnn--ddaattaa==_t_y_p_e  --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l --mmggeenneerraall--rreeggss--oonnllyy  --mmccaallll--mmss22ssyyssvv--xxlloogguueess
           --mmiinnddiirreecctt--bbrraanncchh==_c_h_o_i_c_e  --mmffuunnccttiioonn--rreettuurrnn==_c_h_o_i_c_e --mmiinnddiirreecctt--bbrraanncchh--rreeggiisstteerr

           _x_8_6 _W_i_n_d_o_w_s _O_p_t_i_o_n_s --mmccoonnssoollee  --mmccyyggwwiinn  --mmnnoo--ccyyggwwiinn  --mmddllll --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           --mmtthhrreeaadd --mmuunniiccooddee  --mmwwiinn3322  --mmwwiinnddoowwss  --ffnnoo--sseett--ssttaacckk--eexxeeccuuttaabbllee

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s --mmssiimm

           _X_t_e_n_s_a _O_p_t_i_o_n_s --mmccoonnsstt1166  --mmnnoo--ccoonnsstt1166 --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd --mmffoorrccee--nnoo--ppiicc
           --mmsseerriiaalliizzee--vvoollaattiillee  --mmnnoo--sseerriiaalliizzee--vvoollaattiillee --mmtteexxtt--sseeccttiioonn--lliitteerraallss
           --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss --mmaauuttoo--lliittppoooollss  --mmnnoo--aauuttoo--lliittppoooollss --mmttaarrggeett--aalliiggnn
           --mmnnoo--ttaarrggeett--aalliiggnn --mmlloonnggccaallllss  --mmnnoo--lloonnggccaallllss

           _z_S_e_r_i_e_s _O_p_t_i_o_n_s See S/390 and zSeries Options.

   OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt
       Compilation can involve up to four stages: preprocessing, compilation proper, assembly
       and linking, always in that order.  GCC is capable of preprocessing and compiling
       several files either into several assembler input files, or into one assembler input
       file; then each assembler input file produces an object file, and linking combines all
       the object files (those newly compiled, and those specified as input) into an
       executable file.

       For any given input file, the file name suffix determines what kind of compilation is
       done:

       _f_i_l_e..cc
           C source code that must be preprocessed.

       _f_i_l_e..ii
           C source code that should not be preprocessed.

       _f_i_l_e..iiii
           C++ source code that should not be preprocessed.

       _f_i_l_e..mm
           Objective-C source code.  Note that you must link with the _l_i_b_o_b_j_c library to make
           an Objective-C program work.

       _f_i_l_e..mmii
           Objective-C source code that should not be preprocessed.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code.  Note that you must link with the _l_i_b_o_b_j_c library to
           make an Objective-C++ program work.  Note that ..MM refers to a literal capital M.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be preprocessed.

       _f_i_l_e..hh
           C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled
           header (default), or C, C++ header file to be turned into an Ada spec (via the
           --ffdduummpp--aaddaa--ssppeecc switch).

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..CCPPPP
       _f_i_l_e..cc++++
       _f_i_l_e..CC
           C++ source code that must be preprocessed.  Note that in ..ccxxxx, the last two letters
           must both be literally xx.  Likewise, ..CC refers to a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code that must be preprocessed.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be preprocessed.

       _f_i_l_e..hhhh
       _f_i_l_e..HH
       _f_i_l_e..hhpp
       _f_i_l_e..hhxxxx
       _f_i_l_e..hhpppp
       _f_i_l_e..HHPPPP
       _f_i_l_e..hh++++
       _f_i_l_e..ttcccc
           C++ header file to be turned into a precompiled header or Ada spec.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..ffttnn
           Fixed form Fortran source code that should not be preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..FFOORR
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
       _f_i_l_e..FFTTNN
           Fixed form Fortran source code that must be preprocessed (with the traditional
           preprocessor).

       _f_i_l_e..ff9900
       _f_i_l_e..ff9955
       _f_i_l_e..ff0033
       _f_i_l_e..ff0088
           Free form Fortran source code that should not be preprocessed.

       _f_i_l_e..FF9900
       _f_i_l_e..FF9955
       _f_i_l_e..FF0033
       _f_i_l_e..FF0088
           Free form Fortran source code that must be preprocessed (with the traditional
           preprocessor).

       _f_i_l_e..ggoo
           Go source code.

       _f_i_l_e..bbrriigg
           BRIG files (binary representation of HSAIL).

       _f_i_l_e..dd
           D source code.

       _f_i_l_e..ddii
           D interface file.

       _f_i_l_e..dddd
           D documentation code (Ddoc).

       _f_i_l_e..aaddss
           Ada source code file that contains a library unit declaration (a declaration of a
           package, subprogram, or generic, or a generic instantiation), or a library unit
           renaming declaration (a package, generic, or subprogram renaming declaration).
           Such files are also called _s_p_e_c_s.

       _f_i_l_e..aaddbb
           Ada source code file containing a library unit body (a subprogram or package body).
           Such files are also called _b_o_d_i_e_s.

       _f_i_l_e..ss
           Assembler code.

       _f_i_l_e..SS
       _f_i_l_e..ssxx
           Assembler code that must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any file name with no recognized
           suffix is treated this way.

       You can specify the input language explicitly with the --xx option:

       --xx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following input files (rather than letting
           the compiler choose a default based on the file name suffix).  This option applies
           to all following input files until the next --xx option.  Possible values for
           _l_a_n_g_u_a_g_e are:

                   c  c-header  cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   d
                   f77  f77-cpp-input f95  f95-cpp-input
                   go
                   brig

       --xx nnoonnee
           Turn off any specification of a language, so that subsequent files are handled
           according to their file name suffixes (as they are if --xx has not been used at all).

       If you only want some of the stages of compilation, you can use --xx (or filename
       suffixes) to tell ggcccc where to start, and one of the options --cc, --SS, or --EE to say where
       ggcccc is to stop.  Note that some combinations (for example, --xx ccpppp--oouuttppuutt --EE) instruct
       ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.  The linking stage simply is
           not done.  The ultimate output is in the form of an object file for each source
           file.

           By default, the object file name for a source file is made by replacing the suffix
           ..cc, ..ii, ..ss, etc., with ..oo.

           Unrecognized input files, not requiring compilation or assembly, are ignored.

       --SS  Stop after the stage of compilation proper; do not assemble.  The output is in the
           form of an assembler code file for each non-assembler input file specified.

           By default, the assembler file name for a source file is made by replacing the
           suffix ..cc, ..ii, etc., with ..ss.

           Input files that don't require compilation are ignored.

       --EE  Stop after the preprocessing stage; do not run the compiler proper.  The output is
           in the form of preprocessed source code, which is sent to the standard output.

           Input files that don't require preprocessing are ignored.

       --oo _f_i_l_e
           Place output in file _f_i_l_e.  This applies to whatever sort of output is being
           produced, whether it be an executable file, an object file, an assembler file or
           preprocessed C code.

           If --oo is not specified, the default is to put an executable file in _a_._o_u_t, the
           object file for _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler file in _s_o_u_r_c_e_._s, a
           precompiled header file in _s_o_u_r_c_e_._s_u_f_f_i_x_._g_c_h, and all preprocessed C source on
           standard output.

       --vv  Print (on standard error output) the commands executed to run the stages of
           compilation.  Also print the version number of the compiler driver program and of
           the preprocessor and the compiler proper.

       --######
           Like --vv except the commands are not executed and arguments are quoted unless they
           contain only alphanumeric characters or "./-_".  This is useful for shell scripts
           to capture the driver-generated command lines.

       ----hheellpp
           Print (on the standard output) a description of the command-line options understood
           by ggcccc.  If the --vv option is also specified then ----hheellpp is also passed on to the
           various processes invoked by ggcccc, so that they can display the command-line options
           they accept.  If the --WWeexxttrraa option has also been specified (prior to the ----hheellpp
           option), then command-line options that have no documentation associated with them
           are also displayed.

       ----ttaarrggeett--hheellpp
           Print (on the standard output) a description of target-specific command-line
           options for each tool.  For some targets extra target-specific information may also
           be printed.

       ----hheellpp=={{_c_l_a_s_s|[^^]_q_u_a_l_i_f_i_e_r}}[,,......]
           Print (on the standard output) a description of the command-line options understood
           by the compiler that fit into all specified classes and qualifiers.  These are the
           supported classes:

           ooppttiimmiizzeerrss
               Display all of the optimization options supported by the compiler.

           wwaarrnniinnggss
               Display all of the options controlling warning messages produced by the
               compiler.

           ttaarrggeett
               Display target-specific options.  Unlike the ----ttaarrggeett--hheellpp option however,
               target-specific options of the linker and assembler are not displayed.  This is
               because those tools do not currently support the extended ----hheellpp== syntax.

           ppaarraammss
               Display the values recognized by the ----ppaarraamm option.

           _l_a_n_g_u_a_g_e
               Display the options supported for _l_a_n_g_u_a_g_e, where _l_a_n_g_u_a_g_e is the name of one
               of the languages supported in this version of GCC.

           ccoommmmoonn
               Display the options that are common to all languages.

           These are the supported qualifiers:

           uunnddooccuummeenntteedd
               Display only those options that are undocumented.

           jjooiinneedd
               Display options taking an argument that appears after an equal sign in the same
               continuous piece of text, such as: ----hheellpp==ttaarrggeett.

           sseeppaarraattee
               Display options taking an argument that appears as a separate word following
               the original option, such as: --oo oouuttppuutt--ffiillee.

           Thus for example to display all the undocumented target-specific switches supported
           by the compiler, use:

                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing it with the ^^ character, so
           for example to display all binary warning options (i.e., ones that are either on or
           off and that do not take an argument) that have a description, use:

                   --help=warnings,^joined,^undocumented

           The argument to ----hheellpp== should not consist solely of inverted qualifiers.

           Combining several classes is possible, although this usually restricts the output
           so much that there is nothing to display.  One case where it does work, however, is
           when one of the classes is _t_a_r_g_e_t.  For example, to display all the target-specific
           optimization options, use:

                   --help=target,optimizers

           The ----hheellpp== option can be repeated on the command line.  Each successive use
           displays its requested class of options, skipping those that have already been
           displayed.  If ----hheellpp is also specified anywhere on the command line then this
           takes precedence over any ----hheellpp== option.

           If the --QQ option appears on the command line before the ----hheellpp== option, then the
           descriptive text displayed by ----hheellpp== is changed.  Instead of describing the
           displayed options, an indication is given as to whether the option is enabled,
           disabled or set to a specific value (assuming that the compiler knows this at the
           point where the ----hheellpp== option is used).

           Here is a truncated example from the ARM port of ggcccc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous command-line options, so for
           example it is possible to find out which optimizations are enabled at --OO22 by using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary optimizations are enabled by --OO33 by
           using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       ----vveerrssiioonn
           Display the version number and copyrights of the invoked GCC.

       --ppaassss--eexxiitt--ccooddeess
           Normally the ggcccc program exits with the code of 1 if any phase of the compiler
           returns a non-success return code.  If you specify --ppaassss--eexxiitt--ccooddeess, the ggcccc
           program instead returns with the numerically highest error produced by any phase
           returning an error indication.  The C, C++, and Fortran front ends return 4 if an
           internal compiler error is encountered.

       --ppiippee
           Use pipes rather than temporary files for communication between the various stages
           of compilation.  This fails to work on some systems where the assembler is unable
           to read from a pipe; but the GNU assembler has no trouble.

       --ssppeeccss==_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard _s_p_e_c_s file, in order to
           override the defaults which the ggcccc driver program uses when determining what
           switches to pass to cccc11, cccc11pplluuss, aass, lldd, etc.  More than one --ssppeeccss==_f_i_l_e can be
           specified on the command line, and they are processed in order, from left to right.

       --wwrraappppeerr
           Invoke all subcommands under a wrapper program.  The name of the wrapper program
           and its parameters are passed as a comma separated list.

                   gcc -c t.c -wrapper gdb,--args

           This invokes all subprograms of ggcccc under ggddbb ----aarrggss, thus the invocation of cccc11 is
           ggddbb ----aarrggss cccc11 .......

       --ffffiillee--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files residing in directory _o_l_d, record any references to them in
           the result of the compilation as if the files resided in directory _n_e_w instead.
           Specifying this option is equivalent to specifying all the individual
           --ff**--pprreeffiixx--mmaapp options.  This can be used to make reproducible builds that are
           location independent.  See also --ffmmaaccrroo--pprreeffiixx--mmaapp and --ffddeebbuugg--pprreeffiixx--mmaapp.

       --ffpplluuggiinn==_n_a_m_e..ssoo
           Load the plugin code in file _n_a_m_e.so, assumed to be a shared object to be dlopen'd
           by the compiler.  The base name of the shared object file is used to identify the
           plugin for the purposes of argument parsing (See --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e
           below).  Each plugin should define the callback functions specified in the Plugins
           API.

       --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e
           Define an argument called _k_e_y with a value of _v_a_l_u_e for the plugin called _n_a_m_e.

       --ffdduummpp--aaddaa--ssppeecc[--sslliimm]
           For C and C++ source and include files, generate corresponding Ada specs.

       --ffaaddaa--ssppeecc--ppaarreenntt==_u_n_i_t
           In conjunction with --ffdduummpp--aaddaa--ssppeecc[--sslliimm] above, generate Ada specs as child units
           of parent _u_n_i_t.

       --ffdduummpp--ggoo--ssppeecc==_f_i_l_e
           For input files in any language, generate corresponding Go declarations in _f_i_l_e.
           This generates Go "const", "type", "var", and "func" declarations which may be a
           useful way to start writing a Go interface to code written in some other language.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted in place of the
           original @_f_i_l_e option.  If _f_i_l_e does not exist, or cannot be read, then the option
           will be treated literally, and not removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace character may be
           included in an option by surrounding the entire option in either single or double
           quotes.  Any character (including a backslash) may be included by prefixing the
           character to be included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

   CCoommppiilliinngg CC++++ PPrrooggrraammss
       C++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp, ..CCPPPP, ..cc++++, ..ccpp,
       or ..ccxxxx; C++ header files often use ..hhhh, ..hhpppp, ..HH, or (for shared template code) ..ttcccc;
       and preprocessed C++ files use the suffix ..iiii.  GCC recognizes files with these names
       and compiles them as C++ programs even if you call the compiler the same way as for
       compiling C programs (usually with the name ggcccc).

       However, the use of ggcccc does not add the C++ library.  gg++++ is a program that calls GCC
       and automatically specifies linking against the C++ library.  It treats ..cc, ..hh and ..ii
       files as C++ source files instead of C source files unless --xx is used.  This program is
       also useful when precompiling a C header file with a ..hh extension for use in C++
       compilations.  On many systems, gg++++ is also installed with the name cc++++.

       When you compile C++ programs, you may specify many of the same command-line options
       that you use for compiling programs in any language; or command-line options meaningful
       for C and related languages; or options that are meaningful only for C++ programs.

   OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt
       The following options control the dialect of C (or languages derived from C, such as
       C++, Objective-C and Objective-C++) that the compiler accepts:

       --aannssii
           In C mode, this is equivalent to --ssttdd==cc9900. In C++ mode, it is equivalent to
           --ssttdd==cc++++9988.

           This turns off certain features of GCC that are incompatible with ISO C90 (when
           compiling C code), or of standard C++ (when compiling C++ code), such as the "asm"
           and "typeof" keywords, and predefined macros such as "unix" and "vax" that identify
           the type of system you are using.  It also enables the undesirable and rarely used
           ISO trigraph feature.  For the C compiler, it disables recognition of C++ style ////
           comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__", "__inline__" and "__typeof__"
           continue to work despite --aannssii.  You would not want to use them in an ISO C
           program, of course, but it is useful to put them in header files that might be
           included in compilations done with --aannssii.  Alternate predefined macros such as
           "__unix__" and "__vax__" are also available, with or without --aannssii.

           The --aannssii option does not cause non-ISO programs to be rejected gratuitously.  For
           that, --WWppeeddaannttiicc is required in addition to --aannssii.

           The macro "__STRICT_ANSI__" is predefined when the --aannssii option is used.  Some
           header files may notice this macro and refrain from declaring certain functions or
           defining certain macros that the ISO standard doesn't call for; this is to avoid
           interfering with any programs that might use these names for other things.

           Functions that are normally built in but do not have semantics defined by ISO C
           (such as "alloca" and "ffs") are not built-in functions when --aannssii is used.

       --ssttdd==
           Determine the language standard.   This option is currently only supported when
           compiling C or C++.

           The compiler can accept several base standards, such as cc9900 or cc++++9988, and GNU
           dialects of those standards, such as ggnnuu9900 or ggnnuu++++9988.  When a base standard is
           specified, the compiler accepts all programs following that standard plus those
           using GNU extensions that do not contradict it.  For example, --ssttdd==cc9900 turns off
           certain features of GCC that are incompatible with ISO C90, such as the "asm" and
           "typeof" keywords, but not other GNU extensions that do not have a meaning in ISO
           C90, such as omitting the middle term of a "?:" expression. On the other hand, when
           a GNU dialect of a standard is specified, all features supported by the compiler
           are enabled, even when those features change the meaning of the base standard.  As
           a result, some strict-conforming programs may be rejected.  The particular standard
           is used by --WWppeeddaannttiicc to identify which features are GNU extensions given that
           version of the standard. For example --ssttdd==ggnnuu9900 --WWppeeddaannttiicc warns about C++ style ////
           comments, while --ssttdd==ggnnuu9999 --WWppeeddaannttiicc does not.

           A value for this option must be provided; possible values are

           cc9900
           cc8899
           iissoo99889999::11999900
               Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90
               are disabled). Same as --aannssii for C code.

           iissoo99889999::119999440099
               ISO C90 as modified in amendment 1.

           cc9999
           cc99xx
           iissoo99889999::11999999
           iissoo99889999::119999xx
               ISO C99.  This standard is substantially completely supported, modulo bugs and
               floating-point issues (mainly but not entirely relating to optional C99
               features from Annexes F and G).  See <hhttttpp::////ggcccc..ggnnuu..oorrgg//cc9999ssttaattuuss..hhttmmll> for
               more information.  The names cc99xx and iissoo99889999::119999xx are deprecated.

           cc1111
           cc11xx
           iissoo99889999::22001111
               ISO C11, the 2011 revision of the ISO C standard.  This standard is
               substantially completely supported, modulo bugs, floating-point issues (mainly
               but not entirely relating to optional C11 features from Annexes F and G) and
               the optional Annexes K (Bounds-checking interfaces) and L (Analyzability).  The
               name cc11xx is deprecated.

           cc1177
           cc1188
           iissoo99889999::22001177
           iissoo99889999::22001188
               ISO C17, the 2017 revision of the ISO C standard (published in 2018).  This
               standard is same as C11 except for corrections of defects (all of which are
               also applied with --ssttdd==cc1111) and a new value of "__STDC_VERSION__", and so is
               supported to the same extent as C11.

           cc22xx The next version of the ISO C standard, still under development.  The support
               for this version is experimental and incomplete.

           ggnnuu9900
           ggnnuu8899
               GNU dialect of ISO C90 (including some C99 features).

           ggnnuu9999
           ggnnuu99xx
               GNU dialect of ISO C99.  The name ggnnuu99xx is deprecated.

           ggnnuu1111
           ggnnuu11xx
               GNU dialect of ISO C11.  The name ggnnuu11xx is deprecated.

           ggnnuu1177
           ggnnuu1188
               GNU dialect of ISO C17.  This is the default for C code.

           ggnnuu22xx
               The next version of the ISO C standard, still under development, plus GNU
               extensions.  The support for this version is experimental and incomplete.

           cc++++9988
           cc++++0033
               The 1998 ISO C++ standard plus the 2003 technical corrigendum and some
               additional defect reports. Same as --aannssii for C++ code.

           ggnnuu++++9988
           ggnnuu++++0033
               GNU dialect of --ssttdd==cc++++9988.

           cc++++1111
           cc++++00xx
               The 2011 ISO C++ standard plus amendments.  The name cc++++00xx is deprecated.

           ggnnuu++++1111
           ggnnuu++++00xx
               GNU dialect of --ssttdd==cc++++1111.  The name ggnnuu++++00xx is deprecated.

           cc++++1144
           cc++++11yy
               The 2014 ISO C++ standard plus amendments.  The name cc++++11yy is deprecated.

           ggnnuu++++1144
           ggnnuu++++11yy
               GNU dialect of --ssttdd==cc++++1144.  This is the default for C++ code.  The name ggnnuu++++11yy
               is deprecated.

           cc++++1177
           cc++++11zz
               The 2017 ISO C++ standard plus amendments.  The name cc++++11zz is deprecated.

           ggnnuu++++1177
           ggnnuu++++11zz
               GNU dialect of --ssttdd==cc++++1177.  The name ggnnuu++++11zz is deprecated.

           cc++++22aa
               The next revision of the ISO C++ standard, tentatively planned for 2020.
               Support is highly experimental, and will almost certainly change in
               incompatible ways in future releases.

           ggnnuu++++22aa
               GNU dialect of --ssttdd==cc++++22aa.  Support is highly experimental, and will almost
               certainly change in incompatible ways in future releases.

       --ffggnnuu8899--iinnlliinnee
           The option --ffggnnuu8899--iinnlliinnee tells GCC to use the traditional GNU semantics for
           "inline" functions when in C99 mode.

           Using this option is roughly equivalent to adding the "gnu_inline" function
           attribute to all inline functions.

           The option --ffnnoo--ggnnuu8899--iinnlliinnee explicitly tells GCC to use the C99 semantics for
           "inline" when in C99 or gnu99 mode (i.e., it specifies the default behavior).  This
           option is not supported in --ssttdd==cc9900 or --ssttdd==ggnnuu9900 mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and "__GNUC_STDC_INLINE__" may be
           used to check which semantics are in effect for "inline" functions.

       --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==_s_t_y_l_e
           ISO/IEC TS 18661-3 defines new permissible values for "FLT_EVAL_METHOD" that
           indicate that operations and constants with a semantic type that is an interchange
           or extended format should be evaluated to the precision and range of that type.
           These new values are a superset of those permitted under C99/C11, which does not
           specify the meaning of other positive values of "FLT_EVAL_METHOD".  As such, code
           conforming to C11 may not have been written expecting the possibility of the new
           values.

           --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss specifies whether the compiler should allow only the
           values of "FLT_EVAL_METHOD" specified in C99/C11, or the extended set of values
           specified in ISO/IEC TS 18661-3.

           _s_t_y_l_e is either "c11" or "ts-18661-3" as appropriate.

           The default when in a standards compliant mode (--ssttdd==cc1111 or similar) is
           --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==cc1111.  The default when in a GNU dialect (--ssttdd==ggnnuu1111 or
           similar) is --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==ttss--1188666611--33.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations for all functions declared
           and/or defined in a translation unit, including those in header files.  This option
           is silently ignored in any language other than C.

           Besides declarations, the file indicates, in comments, the origin of each
           declaration (source file and line), whether the declaration was implicit,
           prototyped or unprototyped (II, NN for new or OO for old, respectively, in the first
           character after the line number and the colon), and whether it came from a
           declaration or a definition (CC or FF, respectively, in the following character).  In
           the case of function definitions, a K&R-style list of arguments followed by their
           declarations is also provided, inside comments, after the declaration.

       --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss
           Accept variadic functions without named parameters.

           Although it is possible to define such a function, this is not very useful as it is
           not possible to read the arguments.  This is only supported for C as this construct
           is allowed by C++.

       --ffnnoo--aassmm
           Do not recognize "asm", "inline" or "typeof" as a keyword, so that code can use
           these words as identifiers.  You can use the keywords "__asm__", "__inline__" and
           "__typeof__" instead.  --aannssii implies --ffnnoo--aassmm.

           In C++, this switch only affects the "typeof" keyword, since "asm" and "inline" are
           standard keywords.  You may want to use the --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead, which
           has the same effect.  In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this switch only
           affects the "asm" and "typeof" keywords, since "inline" is a standard keyword in
           ISO C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           Don't recognize built-in functions that do not begin with ____bbuuiillttiinn__ as prefix.

           GCC normally generates special code to handle certain built-in functions more
           efficiently; for instance, calls to "alloca" may become single instructions which
           adjust the stack directly, and calls to "memcpy" may become inline copy loops.  The
           resulting code is often both smaller and faster, but since the function calls no
           longer appear as such, you cannot set a breakpoint on those calls, nor can you
           change the behavior of the functions by linking with a different library.  In
           addition, when a function is recognized as a built-in function, GCC may use
           information about that function to warn about problems with calls to that function,
           or to generate more efficient code, even if the resulting code still contains calls
           to that function.  For example, warnings are given with --WWffoorrmmaatt for bad calls to
           "printf" when "printf" is built in and "strlen" is known not to modify global
           memory.

           With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-in function _f_u_n_c_t_i_o_n is
           disabled.  _f_u_n_c_t_i_o_n must not begin with ____bbuuiillttiinn__.  If a function is named that is
           not built-in in this version of GCC, this option is ignored.  There is no
           corresponding --ffbbuuiillttiinn--_f_u_n_c_t_i_o_n option; if you wish to enable built-in functions
           selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg, you may define macros such
           as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       --ffggiimmppllee
           Enable parsing of function definitions marked with "__GIMPLE".  This is an
           experimental feature that allows unit testing of GIMPLE passes.

       --ffhhoosstteedd
           Assert that compilation targets a hosted environment.  This implies --ffbbuuiillttiinn.  A
           hosted environment is one in which the entire standard library is available, and in
           which "main" has a return type of "int".  Examples are nearly everything except a
           kernel.  This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
           Assert that compilation targets a freestanding environment.  This implies
           --ffnnoo--bbuuiillttiinn.  A freestanding environment is one in which the standard library may
           not exist, and program startup may not necessarily be at "main".  The most obvious
           example is an OS kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffooppeennaacccc
           Enable handling of OpenACC directives "#pragma acc" in C/C++ and "!$acc" in
           Fortran.  When --ffooppeennaacccc is specified, the compiler generates accelerated code
           according to the OpenACC Application Programming Interface v2.0
           <hhttttppss::////wwwwww..ooppeennaacccc..oorrgg>.  This option implies --pptthhrreeaadd, and thus is only
           supported on targets that have support for --pptthhrreeaadd.

       --ffooppeennaacccc--ddiimm==_g_e_o_m
           Specify default compute dimensions for parallel offload regions that do not
           explicitly specify.  The _g_e_o_m value is a triple of ':'-separated sizes, in order
           'gang', 'worker' and, 'vector'.  A size can be omitted, to use a target-specific
           default value.

       --ffooppeennmmpp
           Enable handling of OpenMP directives "#pragma omp" in C/C++ and "!$omp" in Fortran.
           When --ffooppeennmmpp is specified, the compiler generates parallel code according to the
           OpenMP Application Program Interface v4.5 <hhttttppss::////wwwwww..ooppeennmmpp..oorrgg>.  This option
           implies --pptthhrreeaadd, and thus is only supported on targets that have support for
           --pptthhrreeaadd. --ffooppeennmmpp implies --ffooppeennmmpp--ssiimmdd.

       --ffooppeennmmpp--ssiimmdd
           Enable handling of OpenMP's SIMD directives with "#pragma omp" in C/C++ and "!$omp"
           in Fortran. Other OpenMP directives are ignored.

       --ffggnnuu--ttmm
           When the option --ffggnnuu--ttmm is specified, the compiler generates code for the Linux
           variant of Intel's current Transactional Memory ABI specification document
           (Revision 1.1, May 6 2009).  This is an experimental feature whose interface may
           change in future versions of GCC, as the official specification changes.  Please
           note that not all architectures are supported for this feature.

           For more information on GCC's support for transactional memory,

           Note that the transactional memory feature is not supported with non-call
           exceptions (--ffnnoonn--ccaallll--eexxcceeppttiioonnss).

       --ffmmss--eexxtteennssiioonnss
           Accept some non-standard constructs used in Microsoft header files.

           In C++ code, this allows member names in structures to be similar to previous types
           declarations.

                   typedef int UOW;
                   struct ABC {
                     UOW UOW;
                   };

           Some cases of unnamed fields in structures and unions are only accepted with this
           option.

           Note that this option is off for all targets but x86 targets using ms-abi.

       --ffppllaann99--eexxtteennssiioonnss
           Accept some non-standard constructs used in Plan 9 code.

           This enables --ffmmss--eexxtteennssiioonnss, permits passing pointers to structures with anonymous
           fields to functions that expect pointers to elements of the type of the field, and
           permits referring to anonymous fields declared using a typedef.    This is only
           supported for C, not C++.

       --ffccoonndd--mmiissmmaattcchh
           Allow conditional expressions with mismatched types in the second and third
           arguments.  The value of such an expression is void.  This option is not supported
           for C++.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow implicit conversions between vectors with differing numbers of elements
           and/or incompatible element types.  This option should not be used for new code.

       --ffuunnssiiggnneedd--cchhaarr
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char" should be.  It is either like
           "unsigned char" by default or like "signed char" by default.

           Ideally, a portable program should always use "signed char" or "unsigned char" when
           it depends on the signedness of an object.  But many programs have been written to
           use plain "char" and expect it to be signed, or expect it to be unsigned, depending
           on the machines they were written for.  This option, and its inverse, let you make
           such a program work with the opposite default.

           The type "char" is always a distinct type from each of "signed char" or "unsigned
           char", even though its behavior is always just like one of those two.

       --ffssiiggnneedd--cchhaarr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the negative form of
           --ffuunnssiiggnneedd--cchhaarr.  Likewise, the option --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to
           --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
           These options control whether a bit-field is signed or unsigned, when the
           declaration does not use either "signed" or "unsigned".  By default, such a bit-
           field is signed, because this is consistent: the basic integer types such as "int"
           are signed types.

       --ffssssoo--ssttrruucctt==_e_n_d_i_a_n_n_e_s_s
           Set the default scalar storage order of structures and unions to the specified
           endianness.  The accepted values are bbiigg--eennddiiaann, lliittttllee--eennddiiaann and nnaattiivvee for the
           native endianness of the target (the default).  This option is not supported for
           C++.

           WWaarrnniinngg:: the --ffssssoo--ssttrruucctt switch causes GCC to generate code that is not binary
           compatible with code generated without it if the specified endianness is not the
           native endianness of the target.

   OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt
       This section describes the command-line options that are only meaningful for C++
       programs.  You can also use most of the GNU compiler options regardless of what
       language your program is in.  For example, you might compile a file _f_i_r_s_t_C_l_a_s_s_._C like
       this:

               g++ -g -fstrict-enums -O -c firstClass.C

       In this example, only --ffssttrriicctt--eennuummss is an option meant only for C++ programs; you can
       use the other options with any language supported by GCC.

       Some options for compiling C programs, such as --ssttdd, are also relevant for C++
       programs.

       Here is a list of options that are _o_n_l_y for compiling C++ programs:

       --ffaabbii--vveerrssiioonn==_n
           Use version _n of the C++ ABI.  The default is version 0.

           Version 0 refers to the version conforming most closely to the C++ ABI
           specification.  Therefore, the ABI obtained using version 0 will change in
           different versions of G++ as ABI bugs are fixed.

           Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.

           Version 2 is the version of the C++ ABI that first appeared in G++ 3.4, and was the
           default through G++ 4.9.

           Version 3 corrects an error in mangling a constant address as a template argument.

           Version 4, which first appeared in G++ 4.5, implements a standard mangling for
           vector types.

           Version 5, which first appeared in G++ 4.6, corrects the mangling of attribute
           const/volatile on function pointer types, decltype of a plain decl, and use of a
           function parameter in the declaration of another parameter.

           Version 6, which first appeared in G++ 4.7, corrects the promotion behavior of
           C++11 scoped enums and the mangling of template argument packs, const/static_cast,
           prefix ++ and --, and a class scope function used as a template argument.

           Version 7, which first appeared in G++ 4.8, that treats nullptr_t as a builtin type
           and corrects the mangling of lambdas in default argument scope.

           Version 8, which first appeared in G++ 4.9, corrects the substitution behavior of
           function types with function-cv-qualifiers.

           Version 9, which first appeared in G++ 5.2, corrects the alignment of "nullptr_t".

           Version 10, which first appeared in G++ 6.1, adds mangling of attributes that
           affect type identity, such as ia32 calling convention attributes (e.g. ssttddccaallll).

           Version 11, which first appeared in G++ 7, corrects the mangling of sizeof...
           expressions and operator names.  For multiple entities with the same name within a
           function, that are declared in different scopes, the mangling now changes starting
           with the twelfth occurrence.  It also implies --ffnneeww--iinnhheerriittiinngg--ccttoorrss.

           Version 12, which first appeared in G++ 8, corrects the calling conventions for
           empty classes on the x86_64 target and for classes with only deleted copy/move
           constructors.  It accidentally changes the calling convention for classes with a
           deleted copy constructor and a trivial move constructor.

           Version 13, which first appeared in G++ 8.2, fixes the accidental change in version
           12.

           See also --WWaabbii.

       --ffaabbii--ccoommppaatt--vveerrssiioonn==_n
           On targets that support strong aliases, G++ works around mangling changes by
           creating an alias with the correct mangled name when defining a symbol with an
           incorrect mangled name.  This switch specifies which ABI version to use for the
           alias.

           With --ffaabbii--vveerrssiioonn==00 (the default), this defaults to 11 (GCC 7 compatibility).  If
           another ABI version is explicitly selected, this defaults to 0.  For compatibility
           with GCC versions 3.2 through 4.9, use --ffaabbii--ccoommppaatt--vveerrssiioonn==22.

           If this option is not provided but --WWaabbii==_n is, that version is used for
           compatibility aliases.  If this option is provided along with --WWaabbii (without the
           version), the version from this option is used for the warning.

       --ffnnoo--aacccceessss--ccoonnttrrooll
           Turn off all access checking.  This switch is mainly useful for working around bugs
           in the access control code.

       --ffaalliiggnneedd--nneeww
           Enable support for C++17 "new" of types that require more alignment than "void*
           ::operator new(std::size_t)" provides.  A numeric argument such as
           "-faligned-new=32" can be used to specify how much alignment (in bytes) is provided
           by that function, but few users will need to override the default of
           "alignof(std::max_align_t)".

           This flag is enabled by default for --ssttdd==cc++++1177.

       --ffcchhaarr88__tt
       --ffnnoo--cchhaarr88__tt
           Enable support for "char8_t" as adopted for C++2a.  This includes the addition of a
           new "char8_t" fundamental type, changes to the types of UTF-8 string and character
           literals, new signatures for user-defined literals, associated standard library
           updates, and new "__cpp_char8_t" and "__cpp_lib_char8_t" feature test macros.

           This option enables functions to be overloaded for ordinary and UTF-8 strings:

                   int f(const char *);    // #1
                   int f(const char8_t *); // #2
                   int v1 = f("text");     // Calls #1
                   int v2 = f(u8"text");   // Calls #2

           and introduces new signatures for user-defined literals:

                   int operator""_udl1(char8_t);
                   int v3 = u8'x'_udl1;
                   int operator""_udl2(const char8_t*, std::size_t);
                   int v4 = u8"text"_udl2;
                   template<typename T, T...> int operator""_udl3();
                   int v5 = u8"text"_udl3;

           The change to the types of UTF-8 string and character literals introduces
           incompatibilities with ISO C++11 and later standards.  For example, the following
           code is well-formed under ISO C++11, but is ill-formed when --ffcchhaarr88__tt is specified.

                   char ca[] = u8"xx";     // error: char-array initialized from wide
                                           //        string
                   const char *cp = u8"xx";// error: invalid conversion from
                                           //        `const char8_t*' to `const char*'
                   int f(const char*);
                   auto v = f(u8"xx");     // error: invalid conversion from
                                           //        `const char8_t*' to `const char*'
                   std::string s{u8"xx"};  // error: no matching function for call to
                                           //        `std::basic_string<char>::basic_string()'
                   using namespace std::literals;
                   s = u8"xx"s;            // error: conversion from
                                           //        `basic_string<char8_t>' to non-scalar
                                           //        type `basic_string<char>' requested

       --ffcchheecckk--nneeww
           Check that the pointer returned by "operator new" is non-null before attempting to
           modify the storage allocated.  This check is normally unnecessary because the C++
           standard specifies that "operator new" only returns 0 if it is declared "throw()",
           in which case the compiler always checks the return value even without this option.
           In all other cases, when "operator new" has a non-empty exception specification,
           memory exhaustion is signalled by throwing "std::bad_alloc".  See also nneeww
           ((nnootthhrrooww)).

       --ffccoonncceeppttss
           Enable support for the C++ Extensions for Concepts Technical Specification, ISO
           19217 (2015), which allows code like

                   template <class T> concept bool Addable = requires (T t) { t + t; };
                   template <Addable T> T add (T a, T b) { return a + b; }

       --ffccoonnsstteexxpprr--ddeepptthh==_n
           Set the maximum nested evaluation depth for C++11 constexpr functions to _n.  A
           limit is needed to detect endless recursion during constant expression evaluation.
           The minimum specified by the standard is 512.

       --ffccoonnsstteexxpprr--lloooopp--lliimmiitt==_n
           Set the maximum number of iterations for a loop in C++14 constexpr functions to _n.
           A limit is needed to detect infinite loops during constant expression evaluation.
           The default is 262144 (1<<18).

       --ffccoonnsstteexxpprr--ooppss--lliimmiitt==_n
           Set the maximum number of operations during a single constexpr evaluation.  Even
           when number of iterations of a single loop is limited with the above limit, if
           there are several nested loops and each of them has many iterations but still
           smaller than the above limit, or if in a body of some loop or even outside of a
           loop too many expressions need to be evaluated, the resulting constexpr evaluation
           might take too long.  The default is 33554432 (1<<25).

       --ffddeedduuccee--iinniitt--lliisstt
           Enable deduction of a template type parameter as "std::initializer_list" from a
           brace-enclosed initializer list, i.e.

                   template <class T> auto forward(T t) -> decltype (realfn (t))
                   {
                     return realfn (t);
                   }

                   void f()
                   {
                     forward({1,2}); // call forward<std::initializer_list<int>>
                   }

           This deduction was implemented as a possible extension to the originally proposed
           semantics for the C++11 standard, but was not part of the final standard, so it is
           disabled by default.  This option is deprecated, and may be removed in a future
           version of G++.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           The C++ standard allows an implementation to omit creating a temporary that is only
           used to initialize another object of the same type.  Specifying this option
           disables that optimization, and forces G++ to call the copy constructor in all
           cases.  This option also causes G++ to call trivial member functions which
           otherwise would be expanded inline.

           In C++17, the compiler is required to omit these temporaries, but this option still
           affects trivial member functions.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           Don't generate code to check for violation of exception specifications at run time.
           This option violates the C++ standard, but may be useful for reducing code size in
           production builds, much like defining "NDEBUG".  This does not give user code
           permission to throw exceptions in violation of the exception specifications; the
           compiler still optimizes based on the specifications, so throwing an unexpected
           exception results in undefined behavior at run time.

       --ffeexxtteerrnn--ttllss--iinniitt
       --ffnnoo--eexxtteerrnn--ttllss--iinniitt
           The C++11 and OpenMP standards allow "thread_local" and "threadprivate" variables
           to have dynamic (runtime) initialization.  To support this, any use of such a
           variable goes through a wrapper function that performs any necessary
           initialization.  When the use and definition of the variable are in the same
           translation unit, this overhead can be optimized away, but when the use is in a
           different translation unit there is significant overhead even if the variable
           doesn't actually need dynamic initialization.  If the programmer can be sure that
           no use of the variable in a non-defining TU needs to trigger dynamic initialization
           (either because the variable is statically initialized, or a use of the variable in
           the defining TU will be executed before any uses in another TU), they can avoid
           this overhead with the --ffnnoo--eexxtteerrnn--ttllss--iinniitt option.

           On targets that support symbol aliases, the default is --ffeexxtteerrnn--ttllss--iinniitt.  On
           targets that do not support symbol aliases, the default is --ffnnoo--eexxtteerrnn--ttllss--iinniitt.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
           Do not recognize "typeof" as a keyword, so that code can use this word as an
           identifier.  You can use the keyword "__typeof__" instead.  This option is implied
           by the strict ISO C++ dialects: --aannssii, --ssttdd==cc++++9988, --ssttdd==cc++++1111, etc.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           Never emit code for non-inline templates that are instantiated implicitly (i.e. by
           use); only emit code for explicit instantiations.  If you use this option, you must
           take care to structure your code to include all the necessary explicit
           instantiations to avoid getting undefined symbols at link time.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           Don't emit code for implicit instantiations of inline templates, either.  The
           default is to handle inlines differently so that compiles with and without
           optimization need the same set of explicit instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           To save space, do not emit out-of-line copies of inline functions controlled by
           "#pragma implementation".  This causes linker errors if these functions are not
           inlined everywhere they are called.

       --ffmmss--eexxtteennssiioonnss
           Disable Wpedantic warnings about constructs used in MFC, such as implicit int and
           getting a pointer to member function via non-standard syntax.

       --ffnneeww--iinnhheerriittiinngg--ccttoorrss
           Enable the P0136 adjustment to the semantics of C++11 constructor inheritance.
           This is part of C++17 but also considered to be a Defect Report against C++11 and
           C++14.  This flag is enabled by default unless --ffaabbii--vveerrssiioonn==1100 or lower is
           specified.

       --ffnneeww--ttttpp--mmaattcchhiinngg
           Enable the P0522 resolution to Core issue 150, template template parameters and
           default arguments: this allows a template with default template arguments as an
           argument for a template template parameter with fewer template parameters.  This
           flag is enabled by default for --ssttdd==cc++++1177.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           Disable built-in declarations of functions that are not mandated by ANSI/ISO C.
           These include "ffs", "alloca", "_exit", "index", "bzero", "conjf", and other
           related functions.

       --ffnnootthhrrooww--oopptt
           Treat a "throw()" exception specification as if it were a "noexcept" specification
           to reduce or eliminate the text size overhead relative to a function with no
           exception specification.  If the function has local variables of types with non-
           trivial destructors, the exception specification actually makes the function
           smaller because the EH cleanups for those variables can be optimized away.  The
           semantic effect is that an exception thrown out of a function with such an
           exception specification results in a call to "terminate" rather than "unexpected".

       --ffnnoo--ooppeerraattoorr--nnaammeess
           Do not treat the operator name keywords "and", "bitand", "bitor", "compl", "not",
           "or" and "xor" as synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
           Disable diagnostics that the standard says a compiler does not need to issue.
           Currently, the only such diagnostic issued by G++ is the one for a name having
           multiple meanings within a class.

       --ffppeerrmmiissssiivvee
           Downgrade some diagnostics about nonconformant code from errors to warnings.  Thus,
           using --ffppeerrmmiissssiivvee allows some nonconforming code to compile.

       --ffnnoo--pprreettttyy--tteemmppllaatteess
           When an error message refers to a specialization of a function template, the
           compiler normally prints the signature of the template followed by the template
           arguments and any typedefs or typenames in the signature (e.g. "void f(T) [with T =
           int]" rather than "void f(int)") so that it's clear which template is involved.
           When an error message refers to a specialization of a class template, the compiler
           omits any template arguments that match the default template arguments for that
           template.  If either of these behaviors make it harder to understand the error
           message rather than easier, you can use --ffnnoo--pprreettttyy--tteemmppllaatteess to disable them.

       --ffrreeppoo
           Enable automatic template instantiation at link time.  This option also implies
           --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
           Disable generation of information about every class with virtual functions for use
           by the C++ run-time type identification features ("dynamic_cast" and "typeid").  If
           you don't use those parts of the language, you can save some space by using this
           flag.  Note that exception handling uses the same information, but G++ generates it
           as needed. The "dynamic_cast" operator can still be used for casts that do not
           require run-time type information, i.e. casts to "void *" or to unambiguous base
           classes.

           Mixing code compiled with --ffrrttttii with that compiled with --ffnnoo--rrttttii may not work.
           For example, programs may fail to link if a class compiled with --ffnnoo--rrttttii is used
           as a base for a class compiled with --ffrrttttii.

       --ffssiizzeedd--ddeeaallllooccaattiioonn
           Enable the built-in global declarations

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           as introduced in C++14.  This is useful for user-defined replacement deallocation
           functions that, for example, use the size of the object to make deallocation
           faster.  Enabled by default under --ssttdd==cc++++1144 and above.  The flag
           --WWssiizzeedd--ddeeaallllooccaattiioonn warns about places that might want to add a definition.

       --ffssttrriicctt--eennuummss
           Allow the compiler to optimize using the assumption that a value of enumerated type
           can only be one of the values of the enumeration (as defined in the C++ standard;
           basically, a value that can be represented in the minimum number of bits needed to
           represent all the enumerators).  This assumption may not be valid if the program
           uses a cast to convert an arbitrary integer value to the enumerated type.

       --ffssttrroonngg--eevvaall--oorrddeerr
           Evaluate member access, array subscripting, and shift expressions in left-to-right
           order, and evaluate assignment in right-to-left order, as adopted for C++17.
           Enabled by default with --ssttdd==cc++++1177.  --ffssttrroonngg--eevvaall--oorrddeerr==ssoommee enables just the
           ordering of member access and shift expressions, and is the default without
           --ssttdd==cc++++1177.

       --fftteemmppllaattee--bbaacckkttrraaccee--lliimmiitt==_n
           Set the maximum number of template instantiation notes for a single warning or
           error to _n.  The default value is 10.

       --fftteemmppllaattee--ddeepptthh==_n
           Set the maximum instantiation depth for template classes to _n.  A limit on the
           template instantiation depth is needed to detect endless recursions during template
           class instantiation.  ANSI/ISO C++ conforming programs must not rely on a maximum
           depth greater than 17 (changed to 1024 in C++11).  The default value is 900, as the
           compiler can run out of stack space before hitting 1024 in some situations.

       --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           Do not emit the extra code to use the routines specified in the C++ ABI for thread-
           safe initialization of local statics.  You can use this option to reduce code size
           slightly in code that doesn't need to be thread-safe.

       --ffuussee--ccxxaa--aatteexxiitt
           Register destructors for objects with static storage duration with the
           "__cxa_atexit" function rather than the "atexit" function.  This option is required
           for fully standards-compliant handling of static destructors, but only works if
           your C library supports "__cxa_atexit".

       --ffnnoo--uussee--ccxxaa--ggeett--eexxcceeppttiioonn--ppttrr
           Don't use the "__cxa_get_exception_ptr" runtime routine.  This causes
           "std::uncaught_exception" to be incorrect, but is necessary if the runtime routine
           is not available.

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           This switch declares that the user does not attempt to compare pointers to inline
           functions or methods where the addresses of the two functions are taken in
           different shared objects.

           The effect of this is that GCC may, effectively, mark inline methods with
           "__attribute__ ((visibility ("hidden")))" so that they do not appear in the export
           table of a DSO and do not require a PLT indirection when used within the DSO.
           Enabling this option can have a dramatic effect on load and link times of a DSO as
           it massively reduces the size of the dynamic export table when the library makes
           heavy use of templates.

           The behavior of this switch is not quite the same as marking the methods as hidden
           directly, because it does not affect static variables local to the function or
           cause the compiler to deduce that the function is defined in only one shared
           object.

           You may mark a method as having a visibility explicitly to negate the effect of the
           switch for that method.  For example, if you do want to compare pointers to a
           particular inline method, you might mark it as having default visibility.  Marking
           the enclosing class with explicit visibility has no effect.

           Explicitly instantiated inline methods are unaffected by this option as their
           linkage might otherwise cross a shared library boundary.

       --ffvviissiibbiilliittyy--mmss--ccoommppaatt
           This flag attempts to use visibility settings to make GCC's C++ linkage model
           compatible with that of Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like --ffvviissiibbiilliittyy==hhiiddddeenn.

           2.  Types, but not their members, are not hidden by default.

           3.  The One Definition Rule is relaxed for types without explicit visibility
               specifications that are defined in more than one shared object: those
               declarations are permitted if they are permitted when this option is not used.

           In new code it is better to use --ffvviissiibbiilliittyy==hhiiddddeenn and export those classes that
           are intended to be externally visible.  Unfortunately it is possible for code to
           rely, perhaps accidentally, on the Visual Studio behavior.

           Among the consequences of these changes are that static data members of the same
           type with the same name but defined in different shared objects are different, so
           changing one does not change the other; and that pointers to function members
           defined in different shared objects may not compare equal.  When this flag is
           given, it is a violation of the ODR to define types with the same name differently.

       --ffnnoo--wweeaakk
           Do not use weak symbol support, even if it is provided by the linker.  By default,
           G++ uses weak symbols if they are available.  This option exists only for testing,
           and should not be used by end-users; it results in inferior code and has no
           benefits.  This option may be removed in a future release of G++.

       --nnoossttddiinncc++++
           Do not search for header files in the standard directories specific to C++, but do
           still search the other standard directories.  (This option is used when building
           the C++ library.)

       In addition, these optimization, warning, and code generation options have meanings
       only for C++ programs:

       --WWaabbii (C, Objective-C, C++ and Objective-C++ only)
           Warn when G++ it generates code that is probably not compatible with the vendor-
           neutral C++ ABI.  Since G++ now defaults to updating the ABI with each major
           release, normally --WWaabbii will warn only if there is a check added later in a release
           series for an ABI issue discovered since the initial release.  --WWaabbii will warn
           about more things if an older ABI version is selected (with --ffaabbii--vveerrssiioonn==_n).

           --WWaabbii can also be used with an explicit version number to warn about compatibility
           with a particular --ffaabbii--vveerrssiioonn level, e.g. --WWaabbii==22 to warn about changes relative
           to --ffaabbii--vveerrssiioonn==22.

           If an explicit version number is provided and --ffaabbii--ccoommppaatt--vveerrssiioonn is not
           specified, the version number from this option is used for compatibility aliases.
           If no explicit version number is provided with this option, but
           --ffaabbii--ccoommppaatt--vveerrssiioonn is specified, that version number is used for ABI warnings.

           Although an effort has been made to warn about all such cases, there are probably
           some cases that are not warned about, even though G++ is generating incompatible
           code.  There may also be cases where warnings are emitted even though the code that
           is generated is compatible.

           You should rewrite your code to avoid these warnings if you are concerned about the
           fact that code generated by G++ may not be binary compatible with code generated by
           other compilers.

           Known incompatibilities in --ffaabbii--vveerrssiioonn==22 (which was the default from GCC 3.4 to
           4.9) include:

           *   A template with a non-type template parameter of reference type was mangled
               incorrectly:

                       extern int N;
                       template <int &> struct S {};
                       void n (S<N>) {2}

               This was fixed in --ffaabbii--vveerrssiioonn==33.

           *   SIMD vector types declared using "__attribute ((vector_size))" were mangled in
               a non-standard way that does not allow for overloading of functions taking
               vectors of different sizes.

               The mangling was changed in --ffaabbii--vveerrssiioonn==44.

           *   "__attribute ((const))" and "noreturn" were mangled as type qualifiers, and
               "decltype" of a plain declaration was folded away.

               These mangling issues were fixed in --ffaabbii--vveerrssiioonn==55.

           *   Scoped enumerators passed as arguments to a variadic function are promoted like
               unscoped enumerators, causing "va_arg" to complain.  On most targets this does
               not actually affect the parameter passing ABI, as there is no way to pass an
               argument smaller than "int".

               Also, the ABI changed the mangling of template argument packs, "const_cast",
               "static_cast", prefix increment/decrement, and a class scope function used as a
               template argument.

               These issues were corrected in --ffaabbii--vveerrssiioonn==66.

           *   Lambdas in default argument scope were mangled incorrectly, and the ABI changed
               the mangling of "nullptr_t".

               These issues were corrected in --ffaabbii--vveerrssiioonn==77.

           *   When mangling a function type with function-cv-qualifiers, the un-qualified
               function type was incorrectly treated as a substitution candidate.

               This was fixed in --ffaabbii--vveerrssiioonn==88, the default for GCC 5.1.

           *   "decltype(nullptr)" incorrectly had an alignment of 1, leading to unaligned
               accesses.  Note that this did not affect the ABI of a function with a
               "nullptr_t" parameter, as parameters have a minimum alignment.

               This was fixed in --ffaabbii--vveerrssiioonn==99, the default for GCC 5.2.

           *   Target-specific attributes that affect the identity of a type, such as ia32
               calling conventions on a function type (stdcall, regparm, etc.), did not affect
               the mangled name, leading to name collisions when function pointers were used
               as template arguments.

               This was fixed in --ffaabbii--vveerrssiioonn==1100, the default for GCC 6.1.

           It also warns about psABI-related changes.  The known psABI changes at this point
           include:

           *   For SysV/x86-64, unions with "long double" members are passed in memory as
               specified in psABI.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" is always passed in memory.

       --WWaabbii--ttaagg (C++ and Objective-C++ only)
           Warn when a type with an ABI tag is used in a context that does not have that ABI
           tag.  See CC++++ AAttttrriibbuutteess for more information about ABI tags.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the constructors or destructors in
           that class are private, and it has neither friends nor public static member
           functions.  Also warn if there are no non-private methods, and there's at least one
           private member function that isn't a constructor or destructor.

       --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when "delete" is used to destroy an instance of a class that has virtual
           functions and non-virtual destructor. It is unsafe to delete an instance of a
           derived class through a pointer to a base class if the base class does not have a
           virtual destructor.  This warning is enabled by --WWaallll.

       --WWddeepprreeccaatteedd--ccooppyy (C++ and Objective-C++ only)
           Warn that the implicit declaration of a copy constructor or copy assignment
           operator is deprecated if the class has a user-provided copy constructor or copy
           assignment operator, in C++11 and up.  This warning is enabled by --WWeexxttrraa.  With
           --WWddeepprreeccaatteedd--ccooppyy--ddttoorr, also deprecate if the class has a user-provided destructor.

       --WWnnoo--iinniitt--lliisstt--lliiffeettiimmee (C++ and Objective-C++ only)
           Do not warn about uses of "std::initializer_list" that are likely to result in
           dangling pointers.  Since the underlying array for an "initializer_list" is handled
           like a normal C++ temporary object, it is easy to inadvertently keep a pointer to
           the array past the end of the array's lifetime.  For example:

           *   If a function returns a temporary "initializer_list", or a local
               "initializer_list" variable, the array's lifetime ends at the end of the return
               statement, so the value returned has a dangling pointer.

           *   If a new-expression creates an "initializer_list", the array only lives until
               the end of the enclosing full-expression, so the "initializer_list" in the heap
               has a dangling pointer.

           *   When an "initializer_list" variable is assigned from a brace-enclosed
               initializer list, the temporary array created for the right side of the
               assignment only lives until the end of the full-expression, so at the next
               statement the "initializer_list" variable has a dangling pointer.

                       // li's initial underlying array lives as long as li
                       std::initializer_list<int> li = { 1,2,3 };
                       // assignment changes li to point to a temporary array
                       li = { 4, 5 };
                       // now the temporary is gone and li has a dangling pointer
                       int i = li.begin()[0] // undefined behavior

           *   When a list constructor stores the "begin" pointer from the "initializer_list"
               argument, this doesn't extend the lifetime of the array, so if a class variable
               is constructed from a temporary "initializer_list", the pointer is left
               dangling by the end of the variable declaration statement.

       --WWlliitteerraall--ssuuffffiixx (C++ and Objective-C++ only)
           Warn when a string or character literal is followed by a ud-suffix which does not
           begin with an underscore.  As a conforming extension, GCC treats such suffixes as
           separate preprocessing tokens in order to maintain backwards compatibility with
           code that uses formatting macros from "<inttypes.h>".  For example:

                   #define __STDC_FORMAT_MACROS
                   #include <inttypes.h>
                   #include <stdio.h>

                   int main() {
                     int64_t i64 = 123;
                     printf("My int64: %" PRId64"\n", i64);
                   }

           In this case, "PRId64" is treated as a separate preprocessing token.

           Additionally, warn when a user-defined literal operator is declared with a literal
           suffix identifier that doesn't begin with an underscore. Literal suffix identifiers
           that don't begin with an underscore are reserved for future standardization.

           This warning is enabled by default.

       --WWllttoo--ttyyppee--mmiissmmaattcchh
           During the link-time optimization warn about type mismatches in global declarations
           from different compilation units.  Requires --ffllttoo to be enabled.  Enabled by
           default.

       --WWnnoo--nnaarrrroowwiinngg (C++ and Objective-C++ only)
           For C++11 and later standards, narrowing conversions are diagnosed by default, as
           required by the standard.  A narrowing conversion from a constant produces an
           error, and a narrowing conversion from a non-constant produces a warning, but
           --WWnnoo--nnaarrrroowwiinngg suppresses the diagnostic.  Note that this does not affect the
           meaning of well-formed code; narrowing conversions are still considered ill-formed
           in SFINAE contexts.

           With --WWnnaarrrroowwiinngg in C++98, warn when a narrowing conversion prohibited by C++11
           occurs within {{ }}, e.g.

                   int i = { 2.2 }; // error: narrowing from double to int

           This flag is included in --WWaallll and --WWcc++++1111--ccoommppaatt.

       --WWnnooeexxcceepptt (C++ and Objective-C++ only)
           Warn when a noexcept-expression evaluates to false because of a call to a function
           that does not have a non-throwing exception specification (i.e. "throw()" or
           "noexcept") but is known by the compiler to never throw an exception.

       --WWnnooeexxcceepptt--ttyyppee (C++ and Objective-C++ only)
           Warn if the C++17 feature making "noexcept" part of a function type changes the
           mangled name of a symbol relative to C++14.  Enabled by --WWaabbii and --WWcc++++1177--ccoommppaatt.

           As an example:

                   template <class T> void f(T t) { t(); };
                   void g() noexcept;
                   void h() { f(g); }

           In C++14, "f" calls "f<void(*)()>", but in C++17 it calls "f<void(*)()noexcept>".

       --WWccllaassss--mmeemmaacccceessss (C++ and Objective-C++ only)
           Warn when the destination of a call to a raw memory function such as "memset" or
           "memcpy" is an object of class type, and when writing into such an object might
           bypass the class non-trivial or deleted constructor or copy assignment, violate
           const-correctness or encapsulation, or corrupt virtual table pointers.  Modifying
           the representation of such objects may violate invariants maintained by member
           functions of the class.  For example, the call to "memset" below is undefined
           because it modifies a non-trivial class object and is, therefore, diagnosed.  The
           safe way to either initialize or clear the storage of objects of such types is by
           using the appropriate constructor or assignment operator, if one is available.

                   std::string str = "abc";
                   memset (&str, 0, sizeof str);

           The --WWccllaassss--mmeemmaacccceessss option is enabled by --WWaallll.  Explicitly casting the pointer
           to the class object to "void *" or to a type that can be safely accessed by the raw
           memory function suppresses the warning.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when a class has virtual functions and an accessible non-virtual destructor
           itself or in an accessible polymorphic base class, in which case it is possible but
           unsafe to delete an instance of a derived class through a pointer to the class
           itself or base class.  This warning is automatically enabled if --WWeeffffcc++++ is
           specified.

       --WWrreeggiisstteerr (C++ and Objective-C++ only)
           Warn on uses of the "register" storage class specifier, except when it is part of
           the GNU EExxpplliicciitt RReeggiisstteerr VVaarriiaabblleess extension.  The use of the "register" keyword
           as storage class specifier has been deprecated in C++11 and removed in C++17.
           Enabled by default with --ssttdd==cc++++1177.

       --WWrreeoorrddeerr (C++ and Objective-C++ only)
           Warn when the order of member initializers given in the code does not match the
           order in which they must be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler rearranges the member initializers for "i" and "j" to match the
           declaration order of the members, emitting a warning to that effect.  This warning
           is enabled by --WWaallll.

       --WWnnoo--ppeessssiimmiizziinngg--mmoovvee (C++ and Objective-C++ only)
           This warning warns when a call to "std::move" prevents copy elision.  A typical
           scenario when copy elision can occur is when returning in a function with a class
           return type, when the expression being returned is the name of a non-volatile
           automatic object, and is not a function parameter, and has the same type as the
           function return type.

                   struct T {
                   ...
                   };
                   T fn()
                   {
                     T t;
                     ...
                     return std::move (t);
                   }

           But in this example, the "std::move" call prevents copy elision.

           This warning is enabled by --WWaallll.

       --WWnnoo--rreedduunnddaanntt--mmoovvee (C++ and Objective-C++ only)
           This warning warns about redundant calls to "std::move"; that is, when a move
           operation would have been performed even without the "std::move" call.  This
           happens because the compiler is forced to treat the object as if it were an rvalue
           in certain situations such as returning a local variable, where copy elision isn't
           applicable.  Consider:

                   struct T {
                   ...
                   };
                   T fn(T t)
                   {
                     ...
                     return std::move (t);
                   }

           Here, the "std::move" call is redundant.  Because G++ implements Core Issue 1579,
           another example is:

                   struct T { // convertible to U
                   ...
                   };
                   struct U {
                   ...
                   };
                   U fn()
                   {
                     T t;
                     ...
                     return std::move (t);
                   }

           In this example, copy elision isn't applicable because the type of the expression
           being returned and the function return type differ, yet G++ treats the return value
           as if it were designated by an rvalue.

           This warning is enabled by --WWeexxttrraa.

       --ffeexxtt--nnuummeerriicc--lliitteerraallss (C++ and Objective-C++ only)
           Accept imaginary, fixed-point, or machine-defined literal number suffixes as GNU
           extensions.  When this option is turned off these suffixes are treated as C++11
           user-defined literal numeric suffixes.  This is on by default for all pre-C++11
           dialects and all GNU dialects: --ssttdd==cc++++9988, --ssttdd==ggnnuu++++9988, --ssttdd==ggnnuu++++1111,
           --ssttdd==ggnnuu++++1144.  This option is off by default for ISO C++11 onwards (--ssttdd==cc++++1111,
           ...).

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ and Objective-C++ only)
           Warn about violations of the following style guidelines from Scott Meyers'
           _E_f_f_e_c_t_i_v_e _C_+_+ series of books:

           *   Define a copy constructor and an assignment operator for classes with
               dynamically-allocated memory.

           *   Prefer initialization to assignment in constructors.

           *   Have "operator=" return a reference to *this.

           *   Don't try to return a reference when you must return an object.

           *   Distinguish between prefix and postfix forms of increment and decrement
               operators.

           *   Never overload "&&", "||", or ",".

           This option also enables --WWnnoonn--vviirrttuuaall--ddttoorr, which is also one of the effective C++
           recommendations.  However, the check is extended to warn about the lack of virtual
           destructor in accessible non-polymorphic bases classes too.

           When selecting this option, be aware that the standard library headers do not obey
           all of these guidelines; use ggrreepp --vv to filter out those warnings.

       --WWssttrriicctt--nnuullll--sseennttiinneell (C++ and Objective-C++ only)
           Warn about the use of an uncasted "NULL" as sentinel.  When compiling only with GCC
           this is a valid sentinel, as "NULL" is defined to "__null".  Although it is a null
           pointer constant rather than a null pointer, it is guaranteed to be of the same
           size as a pointer.  But this use is not portable across different compilers.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ and Objective-C++ only)
           Disable warnings when non-template friend functions are declared within a template.
           In very old versions of GCC that predate implementation of the ISO standard,
           declarations such as ffrriieenndd iinntt ffoooo((iinntt)), where the name of the friend is an
           unqualified-id, could be interpreted as a particular specialization of a template
           function; the warning exists to diagnose compatibility problems, and is enabled by
           default.

       --WWoolldd--ssttyyllee--ccaasstt (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type is used within a C++
           program.  The new-style casts ("dynamic_cast", "static_cast", "reinterpret_cast",
           and "const_cast") are less vulnerable to unintended effects and much easier to
           search for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual functions from a base class.  For
           example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and code like:

                   B* b;
                   b->f();

           fails to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer to member function to a plain
           pointer.

       --WWssiiggnn--pprroommoo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from unsigned or enumerated type
           to a signed type, over a conversion to an unsigned type of the same size.  Previous
           versions of G++ tried to preserve unsignedness, but the standard mandates the
           current behavior.

       --WWtteemmppllaatteess (C++ and Objective-C++ only)
           Warn when a primary template declaration is encountered.  Some coding rules
           disallow templates, and this may be used to enforce that rule.  The warning is
           inactive inside a system header file, such as the STL, so one can still use the
           STL.  One may also instantiate or specialize templates.

       --WWmmuullttiippllee--iinnhheerriittaannccee (C++ and Objective-C++ only)
           Warn when a class is defined with multiple direct base classes.  Some coding rules
           disallow multiple inheritance, and this may be used to enforce that rule.  The
           warning is inactive inside a system header file, such as the STL, so one can still
           use the STL.  One may also define classes that indirectly use multiple inheritance.

       --WWvviirrttuuaall--iinnhheerriittaannccee
           Warn when a class is defined with a virtual direct base class.  Some coding rules
           disallow multiple inheritance, and this may be used to enforce that rule.  The
           warning is inactive inside a system header file, such as the STL, so one can still
           use the STL.  One may also define classes that indirectly use virtual inheritance.

       --WWnnaammeessppaacceess
           Warn when a namespace definition is opened.  Some coding rules disallow namespaces,
           and this may be used to enforce that rule.  The warning is inactive inside a system
           header file, such as the STL, so one can still use the STL.  One may also use using
           directives and qualified names.

       --WWnnoo--tteerrmmiinnaattee (C++ and Objective-C++ only)
           Disable the warning about a throw-expression that will immediately result in a call
           to "terminate".

       --WWnnoo--ccllaassss--ccoonnvveerrssiioonn (C++ and Objective-C++ only)
           Disable the warning about the case when a conversion function converts an object to
           the same type, to a base class of that type, or to void; such a conversion function
           will never be called.

   OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleeccttss
       (NOTE: This manual does not describe the Objective-C and Objective-C++ languages
       themselves.

       This section describes the command-line options that are only meaningful for Objective-
       C and Objective-C++ programs.  You can also use most of the language-independent GNU
       compiler options.  For example, you might compile a file _s_o_m_e___c_l_a_s_s_._m like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, --ffggnnuu--rruunnttiimmee is an option meant only for Objective-C and
       Objective-C++ programs; you can use the other options with any language supported by
       GCC.

       Note that since Objective-C is an extension of the C language, Objective-C compilations
       may also use options specific to the C front-end (e.g., --WWttrraaddiittiioonnaall).  Similarly,
       Objective-C++ compilations may use C++-specific options (e.g., --WWaabbii).

       Here is a list of options that are _o_n_l_y for compiling Objective-C and Objective-C++
       programs:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate for each literal string
           specified with the syntax "@"..."".  The default class name is "NXConstantString"
           if the GNU runtime is being used, and "NSConstantString" if the NeXT runtime is
           being used (see below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if also present,
           overrides the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"..."" literals to be
           laid out as constant CoreFoundation strings.

       --ffggnnuu--rruunnttiimmee
           Generate object code compatible with the standard GNU Objective-C runtime.  This is
           the default for most types of systems.

       --ffnneexxtt--rruunnttiimmee
           Generate output compatible with the NeXT runtime.  This is the default for NeXT-
           based systems, including Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is
           predefined if (and only if) this option is used.

       --ffnnoo--nniill--rreecceeiivveerrss
           Assume that all Objective-C message dispatches ("[receiver message:arg]") in this
           translation unit ensure that the receiver is not "nil".  This allows for more
           efficient entry points in the runtime to be used.  This option is only available in
           conjunction with the NeXT runtime and ABI version 0 or 1.

       --ffoobbjjcc--aabbii--vveerrssiioonn==_n
           Use version _n of the Objective-C ABI for the selected runtime.  This option is
           currently supported only for the NeXT runtime.  In that case, Version 0 is the
           traditional (32-bit) ABI without support for properties and other Objective-C 2.0
           additions.  Version 1 is the traditional (32-bit) ABI with support for properties
           and other Objective-C 2.0 additions.  Version 2 is the modern (64-bit) ABI.  If
           nothing is specified, the default is Version 0 on 32-bit target machines, and
           Version 2 on 64-bit target machines.

       --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           For each Objective-C class, check if any of its instance variables is a C++ object
           with a non-trivial default constructor.  If so, synthesize a special "- (id)
           .cxx_construct" instance method which runs non-trivial default constructors on any
           such instance variables, in order, and then return "self".  Similarly, check if any
           instance variable is a C++ object with a non-trivial destructor, and if so,
           synthesize a special "- (void) .cxx_destruct" method which runs all such default
           destructors, in reverse order.

           The "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods thusly generated
           only operate on instance variables declared in the current Objective-C class, and
           not those inherited from superclasses.  It is the responsibility of the Objective-C
           runtime to invoke all such methods in an object's inheritance hierarchy.  The "-
           (id) .cxx_construct" methods are invoked by the runtime immediately after a new
           object instance is allocated; the "- (void) .cxx_destruct" methods are invoked
           immediately before the runtime deallocates an object instance.

           As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has support
           for invoking the "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods.

       --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           Allow fast jumps to the message dispatcher.  On Darwin this is accomplished via the
           comm page.

       --ffoobbjjcc--eexxcceeppttiioonnss
           Enable syntactic support for structured exception handling in Objective-C, similar
           to what is offered by C++.  This option is required to use the Objective-C keywords
           @try, @throw, @catch, @finally and @synchronized.  This option is available with
           both the GNU runtime and the NeXT runtime (but not available in conjunction with
           the NeXT runtime on Mac OS X 10.2 and earlier).

       --ffoobbjjcc--ggcc
           Enable garbage collection (GC) in Objective-C and Objective-C++ programs.  This
           option is only available with the NeXT runtime; the GNU runtime has a different
           garbage collection implementation that does not require special compiler flags.

       --ffoobbjjcc--nniillcchheecckk
           For the NeXT runtime with version 2 of the ABI, check for a nil receiver in method
           invocations before doing the actual method call.  This is the default and can be
           disabled using --ffnnoo--oobbjjcc--nniillcchheecckk.  Class methods and super calls are never checked
           for nil in this way no matter what this flag is set to.  Currently this flag does
           nothing when the GNU runtime, or an older version of the NeXT runtime ABI, is used.

       --ffoobbjjcc--ssttdd==oobbjjcc11
           Conform to the language syntax of Objective-C 1.0, the language recognized by GCC
           4.0.  This only affects the Objective-C additions to the C/C++ language; it does
           not affect conformance to C/C++ standards, which is controlled by the separate
           C/C++ dialect option flags.  When this option is used with the Objective-C or
           Objective-C++ compiler, any Objective-C syntax that is not recognized by GCC 4.0 is
           rejected.  This is useful if you need to make sure that your Objective-C code can
           be compiled with older versions of GCC.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           Emit a special marker instructing lldd((11)) not to statically link in the resulting
           object file, and allow ddyylldd((11)) to load it in at run time instead.  This is used in
           conjunction with the Fix-and-Continue debugging mode, where the object file in
           question may be recompiled and dynamically reloaded in the course of program
           execution, without the need to restart the program itself.  Currently, Fix-and-
           Continue functionality is only available in conjunction with the NeXT runtime on
           Mac OS X 10.3 and later.

       --ffzzeerroo--lliinnkk
           When compiling for the NeXT runtime, the compiler ordinarily replaces calls to
           "objc_getClass("...")" (when the name of the class is known at compile time) with
           static class references that get initialized at load time, which improves run-time
           performance.  Specifying the --ffzzeerroo--lliinnkk flag suppresses this behavior and causes
           calls to "objc_getClass("...")"  to be retained.  This is useful in Zero-Link
           debugging mode, since it allows for individual class implementations to be modified
           during program execution.  The GNU runtime currently always retains calls to
           "objc_get_class("...")"  regardless of command-line options.

       --ffnnoo--llooccaall--iivvaarrss
           By default instance variables in Objective-C can be accessed as if they were local
           variables from within the methods of the class they're declared in.  This can lead
           to shadowing between instance variables and other variables declared either locally
           inside a class method or globally with the same name.  Specifying the
           --ffnnoo--llooccaall--iivvaarrss flag disables this behavior thus avoiding variable shadowing
           issues.

       --ffiivvaarr--vviissiibbiilliittyy==[ppuubblliicc|pprrootteecctteedd|pprriivvaattee|ppaacckkaaggee]
           Set the default instance variable visibility to the specified option so that
           instance variables declared outside the scope of any access modifier directives
           default to the specified visibility.

       --ggeenn--ddeeccllss
           Dump interface declarations for all classes seen in the source file to a file named
           _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWaassssiiggnn--iinntteerrcceepptt (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being intercepted by the garbage
           collector.

       --WWnnoo--pprroottooccooll (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a warning is issued for every
           method in the protocol that is not implemented by the class.  The default behavior
           is to issue a warning for every method not explicitly implemented in the class,
           even if a method implementation is inherited from the superclass.  If you use the
           --WWnnoo--pprroottooccooll option, then methods inherited from the superclass are considered to
           be implemented, and no warning is issued for them.

       --WWsseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the same selector are found during
           compilation.  The check is performed on the list of methods in the final stage of
           compilation.  Additionally, a check is performed for each selector appearing in a
           "@selector(...)"  expression, and a corresponding method for that selector has been
           found during compilation.  Because these checks scan the method table only at the
           end of compilation, these warnings are not produced if the final stage of
           compilation is not reached, for example because an error is found during
           compilation, or because the --ffssyynnttaaxx--oonnllyy option is being used.

       --WWssttrriicctt--sseelleeccttoorr--mmaattcchh (Objective-C and Objective-C++ only)
           Warn if multiple methods with differing argument and/or return types are found for
           a given selector when attempting to send a message using this selector to a
           receiver of type "id" or "Class".  When this flag is off (which is the default
           behavior), the compiler omits such warnings if any differences found are confined
           to types that share the same size and alignment.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an undeclared selector is found.
           A selector is considered undeclared if no method with that name has been declared
           before the "@selector(...)" expression, either explicitly in an @interface or
           @protocol declaration, or implicitly in an @implementation section.  This option
           always performs its checks as soon as a "@selector(...)" expression is found, while
           --WWsseelleeccttoorr only performs its checks in the final stage of compilation.  This also
           enforces the coding style convention that methods and selectors must be declared
           before being used.

       --pprriinntt--oobbjjcc--rruunnttiimmee--iinnffoo
           Generate C header describing the largest structure that is passed by value, if any.

   OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg
       Traditionally, diagnostic messages have been formatted irrespective of the output
       device's aspect (e.g. its width, ...).  You can use the options described below to
       control the formatting algorithm for diagnostic messages, e.g. how many characters per
       line, how often source location information should be reported.  Note that some
       language front ends may not honor these options.

       --ffmmeessssaaggee--lleennggtthh==_n
           Try to format error messages so that they fit on lines of about _n characters.  If _n
           is zero, then no line-wrapping is done; each error message appears on a single
           line.  This is the default for all front ends.

           Note - this option also affects the display of the ##eerrrroorr and ##wwaarrnniinngg pre-
           processor directives, and the ddeepprreeccaatteedd function/type/variable attribute.  It does
           not however affect the pprraaggmmaa GGCCCC wwaarrnniinngg and pprraaggmmaa GGCCCC eerrrroorr pragmas.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter
           to emit source location information _o_n_c_e; that is, in case the message is too long
           to fit on a single physical line and has to be wrapped, the source location won't
           be emitted (as prefix) again, over and over, in subsequent continuation lines.
           This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter
           to emit the same source location information (as prefix) for physical lines that
           result from the process of breaking a message which is too long to fit on a single
           line.

       --ffddiiaaggnnoossttiiccss--ccoolloorr[[==_W_H_E_N]]
       --ffnnoo--ddiiaaggnnoossttiiccss--ccoolloorr
           Use color in diagnostics.  _W_H_E_N is nneevveerr, aallwwaayyss, or aauuttoo.  The default depends on
           how the compiler has been configured, it can be any of the above _W_H_E_N options or
           also nneevveerr if GGCCCC__CCOOLLOORRSS environment variable isn't present in the environment, and
           aauuttoo otherwise.  aauuttoo means to use color only when the standard error is a
           terminal.  The forms --ffddiiaaggnnoossttiiccss--ccoolloorr and --ffnnoo--ddiiaaggnnoossttiiccss--ccoolloorr are aliases for
           --ffddiiaaggnnoossttiiccss--ccoolloorr==aallwwaayyss and --ffddiiaaggnnoossttiiccss--ccoolloorr==nneevveerr, respectively.

           The colors are defined by the environment variable GGCCCC__CCOOLLOORRSS.  Its value is a
           colon-separated list of capabilities and Select Graphic Rendition (SGR) substrings.
           SGR commands are interpreted by the terminal or terminal emulator.  (See the
           section in the documentation of your text terminal for permitted values and their
           meanings as character attributes.)  These substring values are integers in decimal
           representation and can be concatenated with semicolons.  Common values to
           concatenate include 11 for bold, 44 for underline, 55 for blink, 77 for inverse, 3399 for
           default foreground color, 3300 to 3377 for foreground colors, 9900 to 9977 for 16-color
           mode foreground colors, 3388;;55;;00 to 3388;;55;;225555 for 88-color and 256-color modes
           foreground colors, 4499 for default background color, 4400 to 4477 for background colors,
           110000 to 110077 for 16-color mode background colors, and 4488;;55;;00 to 4488;;55;;225555 for 88-color
           and 256-color modes background colors.

           The default GGCCCC__CCOOLLOORRSS is

                   error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\
                   quote=01:fixit-insert=32:fixit-delete=31:\
                   diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\
                   type-diff=01;32

           where 0011;;3311 is bold red, 0011;;3355 is bold magenta, 0011;;3366 is bold cyan, 3322 is green, 3344
           is blue, 0011 is bold, and 3311 is red.  Setting GGCCCC__CCOOLLOORRSS to the empty string
           disables colors.  Supported capabilities are as follows.

           "error="
               SGR substring for error: markers.

           "warning="
               SGR substring for warning: markers.

           "note="
               SGR substring for note: markers.

           "range1="
               SGR substring for first additional range.

           "range2="
               SGR substring for second additional range.

           "locus="
               SGR substring for location information, ffiillee::lliinnee or ffiillee::lliinnee::ccoolluummnn etc.

           "quote="
               SGR substring for information printed within quotes.

           "fixit-insert="
               SGR substring for fix-it hints suggesting text to be inserted or replaced.

           "fixit-delete="
               SGR substring for fix-it hints suggesting text to be deleted.

           "diff-filename="
               SGR substring for filename headers within generated patches.

           "diff-hunk="
               SGR substring for the starts of hunks within generated patches.

           "diff-delete="
               SGR substring for deleted lines within generated patches.

           "diff-insert="
               SGR substring for inserted lines within generated patches.

           "type-diff="
               SGR substring for highlighting mismatching types within template arguments in
               the C++ frontend.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           By default, each diagnostic emitted includes text indicating the command-line
           option that directly controls the diagnostic (if such an option is known to the
           diagnostic machinery).  Specifying the --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag suppresses
           that behavior.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ccaarreett
           By default, each diagnostic emitted includes the original source line and a caret ^^
           indicating the column.  This option suppresses this information.  The source line
           is truncated to _n characters, if the --ffmmeessssaaggee--lleennggtthh==nn option is given.  When the
           output is done to the terminal, the width is limited to the width given by the
           CCOOLLUUMMNNSS environment variable or, if not set, to the terminal width.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--llaabbeellss
           By default, when printing source code (via --ffddiiaaggnnoossttiiccss--sshhooww--ccaarreett), diagnostics
           can label ranges of source code with pertinent information, such as the types of
           expressions:

                       printf ("foo %s bar", long_i + long_j);
                                    ~^       ~~~~~~~~~~~~~~~
                                     |              |
                                     char *         long int

           This option suppresses the printing of these labels (in the example above, the
           vertical bars and the "char *" and "long int" text).

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--lliinnee--nnuummbbeerrss
           By default, when printing source code (via --ffddiiaaggnnoossttiiccss--sshhooww--ccaarreett), a left margin
           is printed, showing line numbers.  This option suppresses this left margin.

       --ffddiiaaggnnoossttiiccss--mmiinniimmuumm--mmaarrggiinn--wwiiddtthh==_w_i_d_t_h
           This option controls the minimum width of the left margin printed by
           --ffddiiaaggnnoossttiiccss--sshhooww--lliinnee--nnuummbbeerrss.  It defaults to 6.

       --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss
           Emit fix-it hints in a machine-parseable format, suitable for consumption by IDEs.
           For each fix-it, a line will be printed after the relevant diagnostic, starting
           with the string "fix-it:".  For example:

                   fix-it:"test.c":{45:3-45:21}:"gtk_widget_show_all"

           The location is expressed as a half-open range, expressed as a count of bytes,
           starting at byte 1 for the initial column.  In the above example, bytes 3 through
           20 of line 45 of "test.c" are to be replaced with the given string:

                   00000000011111111112222222222
                   12345678901234567890123456789
                     gtk_widget_showall (dlg);
                     ^^^^^^^^^^^^^^^^^^
                     gtk_widget_show_all

           The filename and replacement string escape backslash as "\\", tab as "\t", newline
           as "\n", double quotes as "\"", non-printable characters as octal (e.g. vertical
           tab as "\013").

           An empty replacement string indicates that the given range is to be removed.  An
           empty range (e.g. "45:3-45:3") indicates that the string is to be inserted at the
           given position.

       --ffddiiaaggnnoossttiiccss--ggeenneerraattee--ppaattcchh
           Print fix-it hints to stderr in unified diff format, after any diagnostics are
           printed.  For example:

                   --- test.c
                   +++ test.c
                   @ -42,5 +42,5 @

                    void show_cb(GtkDialog *dlg)
                    {
                   -  gtk_widget_showall(dlg);
                   +  gtk_widget_show_all(dlg);
                    }

           The diff may or may not be colorized, following the same rules as for diagnostics
           (see --ffddiiaaggnnoossttiiccss--ccoolloorr).

       --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee
           In the C++ frontend, when printing diagnostics showing mismatching template types,
           such as:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           the --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee flag enables printing a tree-like structure
           showing the common and differing parts of the types, such as:

                     map<
                       [...],
                       vector<
                         [double != float]>>

           The parts that differ are highlighted with color ("double" and "float" in this
           case).

       --ffnnoo--eelliiddee--ttyyppee
           By default when the C++ frontend prints diagnostics showing mismatching template
           types, common parts of the types are printed as "[...]" to simplify the error
           message.  For example:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           Specifying the --ffnnoo--eelliiddee--ttyyppee flag suppresses that behavior.  This flag also
           affects the output of the --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee flag.

       --ffnnoo--sshhooww--ccoolluummnn
           Do not print column numbers in diagnostics.  This may be necessary if diagnostics
           are being scanned by a program that does not understand the column numbers, such as
           ddeejjaaggnnuu.

       --ffddiiaaggnnoossttiiccss--ffoorrmmaatt==_F_O_R_M_A_T
           Select a different format for printing diagnostics.  _F_O_R_M_A_T is tteexxtt or jjssoonn.  The
           default is tteexxtt.

           The jjssoonn format consists of a top-level JSON array containing JSON objects
           representing the diagnostics.

           The JSON is emitted as one line, without formatting; the examples below have been
           formatted for clarity.

           Diagnostics can have child diagnostics.  For example, this error and note:

                   misleading-indentation.c:15:3: warning: this 'if' clause does not
                     guard... [-Wmisleading-indentation]
                      15 |   if (flag)
                         |   ^~
                   misleading-indentation.c:17:5: note: ...this statement, but the latter
                     is misleadingly indented as if it were guarded by the 'if'
                      17 |     y = 2;
                         |     ^

           might be printed in JSON form (after formatting) like this:

                   [
                       {
                           "kind": "warning",
                           "locations": [
                               {
                                   "caret": {
                                       "column": 3,
                                       "file": "misleading-indentation.c",
                                       "line": 15
                                   },
                                   "finish": {
                                       "column": 4,
                                       "file": "misleading-indentation.c",
                                       "line": 15
                                   }
                               }
                           ],
                           "message": "this \u2018if\u2019 clause does not guard...",
                           "option": "-Wmisleading-indentation",
                           "children": [
                               {
                                   "kind": "note",
                                   "locations": [
                                       {
                                           "caret": {
                                               "column": 5,
                                               "file": "misleading-indentation.c",
                                               "line": 17
                                           }
                                       }
                                   ],
                                   "message": "...this statement, but the latter is ..."
                               }
                           ]
                       },
                       ...
                   ]

           where the "note" is a child of the "warning".

           A diagnostic has a "kind".  If this is "warning", then there is an "option" key
           describing the command-line option controlling the warning.

           A diagnostic can contain zero or more locations.  Each location has up to three
           positions within it: a "caret" position and optional "start" and "finish"
           positions.  A location can also have an optional "label" string.  For example, this
           error:

                   bad-binary-ops.c:64:23: error: invalid operands to binary + (have 'S' {aka
                      'struct s'} and 'T' {aka 'struct t'})
                      64 |   return callee_4a () + callee_4b ();
                         |          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~
                         |          |              |
                         |          |              T {aka struct t}
                         |          S {aka struct s}

           has three locations.  Its primary location is at the "+" token at column 23.  It
           has two secondary locations, describing the left and right-hand sides of the
           expression, which have labels.  It might be printed in JSON form as:

                       {
                           "children": [],
                           "kind": "error",
                           "locations": [
                               {
                                   "caret": {
                                       "column": 23, "file": "bad-binary-ops.c", "line": 64
                                   }
                               },
                               {
                                   "caret": {
                                       "column": 10, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "finish": {
                                       "column": 21, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "label": "S {aka struct s}"
                               },
                               {
                                   "caret": {
                                       "column": 25, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "finish": {
                                       "column": 36, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "label": "T {aka struct t}"
                               }
                           ],
                           "message": "invalid operands to binary + ..."
                       }

           If a diagnostic contains fix-it hints, it has a "fixits" array, consisting of half-
           open intervals, similar to the output of --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss.  For
           example, this diagnostic with a replacement fix-it hint:

                   demo.c:8:15: error: 'struct s' has no member named 'colour'; did you
                     mean 'color'?
                       8 |   return ptr->colour;
                         |               ^~~~~~
                         |               color

           might be printed in JSON form as:

                       {
                           "children": [],
                           "fixits": [
                               {
                                   "next": {
                                       "column": 21,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "start": {
                                       "column": 15,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "string": "color"
                               }
                           ],
                           "kind": "error",
                           "locations": [
                               {
                                   "caret": {
                                       "column": 15,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "finish": {
                                       "column": 20,
                                       "file": "demo.c",
                                       "line": 8
                                   }
                               }
                           ],
                           "message": "\u2018struct s\u2019 has no member named ..."
                       }

           where the fix-it hint suggests replacing the text from "start" up to but not
           including "next" with "string"'s value.  Deletions are expressed via an empty value
           for "string", insertions by having "start" equal "next".

   OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss
       Warnings are diagnostic messages that report constructions that are not inherently
       erroneous but that are risky or suggest there may have been an error.

       The following language-independent options do not enable specific warnings but control
       the kinds of diagnostics produced by GCC.

       --ffssyynnttaaxx--oonnllyy
           Check the code for syntax errors, but don't do anything beyond that.

       --ffmmaaxx--eerrrroorrss==_n
           Limits the maximum number of error messages to _n, at which point GCC bails out
           rather than attempting to continue processing the source code.  If _n is 0 (the
           default), there is no limit on the number of error messages produced.  If
           --WWffaattaall--eerrrroorrss is also specified, then --WWffaattaall--eerrrroorrss takes precedence over this
           option.

       --ww  Inhibit all warning messages.

       --WWeerrrroorr
           Make all warnings into errors.

       --WWeerrrroorr==
           Make the specified warning into an error.  The specifier for a warning is appended;
           for example --WWeerrrroorr==sswwiittcchh turns the warnings controlled by --WWsswwiittcchh into errors.
           This switch takes a negative form, to be used to negate --WWeerrrroorr for specific
           warnings; for example --WWnnoo--eerrrroorr==sswwiittcchh makes --WWsswwiittcchh warnings not be errors, even
           when --WWeerrrroorr is in effect.

           The warning message for each controllable warning includes the option that controls
           the warning.  That option can then be used with --WWeerrrroorr== and --WWnnoo--eerrrroorr== as
           described above.  (Printing of the option in the warning message can be disabled
           using the --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag.)

           Note that specifying --WWeerrrroorr==_f_o_o automatically implies --WW_f_o_o.  However,
           --WWnnoo--eerrrroorr==_f_o_o does not imply anything.

       --WWffaattaall--eerrrroorrss
           This option causes the compiler to abort compilation on the first error occurred
           rather than trying to keep going and printing further error messages.

       You can request many specific warnings with options beginning with --WW, for example
       --WWiimmpplliicciitt to request warnings on implicit declarations.  Each of these specific
       warning options also has a negative form beginning --WWnnoo-- to turn off warnings; for
       example, --WWnnoo--iimmpplliicciitt.  This manual lists only one of the two forms, whichever is not
       the default.  For further language-specific options also refer to CC++++ DDiiaalleecctt OOppttiioonnss
       and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

       Some options, such as --WWaallll and --WWeexxttrraa, turn on other options, such as --WWuunnuusseedd, which
       may turn on further options, such as --WWuunnuusseedd--vvaalluuee. The combined effect of positive
       and negative forms is that more specific options have priority over less specific ones,
       independently of their position in the command-line. For options of the same
       specificity, the last one takes effect. Options enabled or disabled via pragmas take
       effect as if they appeared at the end of the command-line.

       When an unrecognized warning option is requested (e.g., --WWuunnkknnoowwnn--wwaarrnniinngg), GCC emits a
       diagnostic stating that the option is not recognized.  However, if the --WWnnoo-- form is
       used, the behavior is slightly different: no diagnostic is produced for
       --WWnnoo--uunnkknnoowwnn--wwaarrnniinngg unless other diagnostics are being produced.  This allows the use
       of new --WWnnoo-- options with old compilers, but if something goes wrong, the compiler
       warns that an unrecognized option is present.

       The effectiveness of some warnings depends on optimizations also being enabled. For
       example --WWssuuggggeesstt--ffiinnaall--ttyyppeess is more effective with link-time optimization and
       --WWmmaayybbee--uunniinniittiiaalliizzeedd will not warn at all unless optimization is enabled.

       --WWppeeddaannttiicc
       --ppeeddaannttiicc
           Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs
           that use forbidden extensions, and some other programs that do not follow ISO C and
           ISO C++.  For ISO C, follows the version of the ISO C standard specified by any
           --ssttdd option used.

           Valid ISO C and ISO C++ programs should compile properly with or without this
           option (though a rare few require --aannssii or a --ssttdd option specifying the required
           version of ISO C).  However, without this option, certain GNU extensions and
           traditional C and C++ features are supported as well.  With this option, they are
           rejected.

           --WWppeeddaannttiicc does not cause warning messages for use of the alternate keywords whose
           names begin and end with ____.  Pedantic warnings are also disabled in the expression
           that follows "__extension__".  However, only system header files should use these
           escape routes; application programs should avoid them.

           Some users try to use --WWppeeddaannttiicc to check programs for strict ISO C conformance.
           They soon find that it does not do quite what they want: it finds some non-ISO
           practices, but not all---only those for which ISO C _r_e_q_u_i_r_e_s a diagnostic, and some
           others for which diagnostics have been added.

           A feature to report any failure to conform to ISO C might be useful in some
           instances, but would require considerable additional work and would be quite
           different from --WWppeeddaannttiicc.  We don't have plans to support such a feature in the
           near future.

           Where the standard specified with --ssttdd represents a GNU extended dialect of C, such
           as ggnnuu9900 or ggnnuu9999, there is a corresponding _b_a_s_e _s_t_a_n_d_a_r_d, the version of ISO C on
           which the GNU extended dialect is based.  Warnings from --WWppeeddaannttiicc are given where
           they are required by the base standard.  (It does not make sense for such warnings
           to be given only for features not in the specified GNU C dialect, since by
           definition the GNU dialects of C include all features the compiler supports with
           the given option, and there would be nothing to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
           Give an error whenever the _b_a_s_e _s_t_a_n_d_a_r_d (see --WWppeeddaannttiicc) requires a diagnostic, in
           some cases where there is undefined behavior at compile-time and in some other
           cases that do not prevent compilation of programs that are valid according to the
           standard. This is not equivalent to --WWeerrrroorr==ppeeddaannttiicc, since there are errors
           enabled by this option and not enabled by the latter and vice versa.

       --WWaallll
           This enables all the warnings about constructions that some users consider
           questionable, and that are easy to avoid (or modify to prevent the warning), even
           in conjunction with macros.  This also enables some language-specific warnings
           described in CC++++ DDiiaalleecctt OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

           --WWaallll turns on the following warning flags:

           --WWaaddddrreessss --WWaarrrraayy--bboouunnddss==11 (only with --OO22) --WWbbooooll--ccoommppaarree --WWbbooooll--ooppeerraattiioonn
           --WWcc++++1111--ccoommppaatt  --WWcc++++1144--ccoommppaatt --WWccaattcchh--vvaalluuee (C++ and Objective-C++ only)
           --WWcchhaarr--ssuubbssccrriippttss --WWccoommmmeenntt --WWdduupplliiccaattee--ddeeccll--ssppeecciiffiieerr (C and Objective-C only)
           --WWeennuumm--ccoommppaarree (in C/ObjC; this is on by default in C++) --WWffoorrmmaatt
           --WWiinntt--iinn--bbooooll--ccoonntteexxtt --WWiimmpplliicciitt (C and Objective-C only) --WWiimmpplliicciitt--iinntt (C and
           Objective-C only) --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           --WWiinniitt--sseellff (only for C++) --WWllooggiiccaall--nnoott--ppaarreenntthheesseess --WWmmaaiinn (only for C/ObjC and
           unless --ffffrreeeessttaannddiinngg) --WWmmaayybbee--uunniinniittiiaalliizzeedd --WWmmeemmsseett--eelltt--ssiizzee
           --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn (only for C/C++)
           --WWmmiissssiinngg--aattttrriibbuutteess --WWmmiissssiinngg--bbrraacceess (only for C/ObjC) --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss
           --WWnnaarrrroowwiinngg (only for C++) --WWnnoonnnnuullll --WWnnoonnnnuullll--ccoommppaarree --WWooppeennmmpp--ssiimmdd --WWppaarreenntthheesseess
           --WWppeessssiimmiizziinngg--mmoovvee (only for C++) --WWppooiinntteerr--ssiiggnn --WWrreeoorrddeerr --WWrreessttrriicctt --WWrreettuurrnn--ttyyppee
           --WWsseeqquueennccee--ppooiinntt --WWssiiggnn--ccoommppaarree (only in C++) --WWssiizzeeooff--ppooiinntteerr--ddiivv
           --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--oovveerrffllooww==11 --WWsswwiittcchh
           --WWttaauuttoollooggiiccaall--ccoommppaarree --WWttrriiggrraapphhss --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell --WWuunnuusseedd--vvaalluuee --WWuunnuusseedd--vvaarriiaabbllee
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr

           Note that some warning flags are not implied by --WWaallll.  Some of them warn about
           constructions that users generally do not consider questionable, but which
           occasionally you might wish to check for; others warn about constructions that are
           necessary or hard to avoid in some cases, and there is no simple way to modify the
           code to suppress the warning. Some of them are enabled by --WWeexxttrraa but many of them
           must be enabled individually.

       --WWeexxttrraa
           This enables some extra warning flags that are not enabled by --WWaallll. (This option
           used to be called --WW.  The older name is still supported, but the newer name is
           more descriptive.)

           --WWcclloobbbbeerreedd --WWccaasstt--ffuunnccttiioonn--ttyyppee --WWddeepprreeccaatteedd--ccooppyy (C++ only) --WWeemmppttyy--bbooddyy
           --WWiiggnnoorreedd--qquuaalliiffiieerrss --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C only) --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C only) --WWoovveerrrriiddee--iinniitt
           --WWssiiggnn--ccoommppaarree (C only) --WWrreedduunnddaanntt--mmoovvee (only for C++) --WWttyyppee--lliimmiittss
           --WWuunniinniittiiaalliizzeedd --WWsshhiifftt--nneeggaattiivvee--vvaalluuee (in C++03 and in C99 and newer)
           --WWuunnuusseedd--ppaarraammeetteerr (only with --WWuunnuusseedd or --WWaallll) --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr (only
           with --WWuunnuusseedd or --WWaallll)

           The option --WWeexxttrraa also prints warning messages for the following cases:

           *   A pointer is compared against integer zero with "<", "<=", ">", or ">=".

           *   (C++ only) An enumerator and a non-enumerator both appear in a conditional
               expression.

           *   (C++ only) Ambiguous virtual bases.

           *   (C++ only) Subscripting an array that has been declared "register".

           *   (C++ only) Taking the address of a variable that has been declared "register".

           *   (C++ only) A base class is not initialized in the copy constructor of a derived
               class.

       --WWcchhaarr--ssuubbssccrriippttss
           Warn if an array subscript has type "char".  This is a common cause of error, as
           programmers often forget that this type is signed on some machines.  This warning
           is enabled by --WWaallll.

       --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh
           Warn if feedback profiles do not match when using the --ffpprrooffiillee--uussee option.  If a
           source file is changed between compiling with --ffpprrooffiillee--ggeenneerraattee and with
           --ffpprrooffiillee--uussee, the files with the profile feedback can fail to match the source
           file and GCC cannot use the profile feedback information.  By default, this warning
           is enabled and is treated as an error.  --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh can be used to
           disable the warning or --WWnnoo--eerrrroorr==ccoovveerraaggee--mmiissmmaattcchh can be used to disable the
           error.  Disabling the error for this warning can result in poorly optimized code
           and is useful only in the case of very minor changes such as bug fixes to an
           existing code-base.  Completely disabling the warning is not recommended.

       --WWnnoo--ccpppp
           (C, Objective-C, C++, Objective-C++ and Fortran only)

           Suppress warning messages emitted by "#warning" directives.

       --WWddoouubbllee--pprroommoottiioonn (C, C++, Objective-C and Objective-C++ only)
           Give a warning when a value of type "float" is implicitly promoted to "double".
           CPUs with a 32-bit "single-precision" floating-point unit implement "float" in
           hardware, but emulate "double" in software.  On such a machine, doing computations
           using "double" values is much more expensive because of the overhead required for
           software emulation.

           It is easy to accidentally do computations with "double" because floating-point
           literals are implicitly of type "double".  For example, in:

                   float area(float radius)
                   {
                      return 3.14159 * radius * radius;
                   }

           the compiler performs the entire computation with "double" because the floating-
           point literal is a "double".

       --WWdduupplliiccaattee--ddeeccll--ssppeecciiffiieerr (C and Objective-C only)
           Warn if a declaration has duplicate "const", "volatile", "restrict" or "_Atomic"
           specifier.  This warning is enabled by --WWaallll.

       --WWffoorrmmaatt
       --WWffoorrmmaatt==_n
           Check calls to "printf" and "scanf", etc., to make sure that the arguments supplied
           have types appropriate to the format string specified, and that the conversions
           specified in the format string make sense.  This includes standard functions, and
           others specified by format attributes, in the "printf", "scanf", "strftime" and
           "strfmon" (an X/Open extension, not in the C standard) families (or other target-
           specific families).  Which functions are checked without format attributes having
           been specified depends on the standard version selected, and such checks of
           functions without the attribute specified are disabled by --ffffrreeeessttaannddiinngg or
           --ffnnoo--bbuuiillttiinn.

           The formats are checked against the format features supported by GNU libc version
           2.2.  These include all ISO C90 and C99 features, as well as features from the
           Single Unix Specification and some BSD and GNU extensions.  Other library
           implementations may not support all these features; GCC does not support warning
           about features that go beyond a particular library's limitations.  However, if
           --WWppeeddaannttiicc is used with --WWffoorrmmaatt, warnings are given about format features not in
           the selected standard version (but not for "strfmon" formats, since those are not
           in any version of the C standard).

           --WWffoorrmmaatt==11
           --WWffoorrmmaatt
               Option --WWffoorrmmaatt is equivalent to --WWffoorrmmaatt==11, and --WWnnoo--ffoorrmmaatt is equivalent to
               --WWffoorrmmaatt==00.  Since --WWffoorrmmaatt also checks for null format arguments for several
               functions, --WWffoorrmmaatt also implies --WWnnoonnnnuullll.  Some aspects of this level of
               format checking can be disabled by the options: --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull,
               --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss, and --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh.  --WWffoorrmmaatt is enabled by
               --WWaallll.

           --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull
               If --WWffoorrmmaatt is specified, do not warn about format strings that contain NUL
               bytes.

           --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
               If --WWffoorrmmaatt is specified, do not warn about excess arguments to a "printf" or
               "scanf" format function.  The C standard specifies that such arguments are
               ignored.

               Where the unused arguments lie between used arguments that are specified with $$
               operand number specifications, normally warnings are still given, since the
               implementation could not know what type to pass to "va_arg" to skip the unused
               arguments.  However, in the case of "scanf" formats, this option suppresses the
               warning if the unused arguments are all pointers, since the Single Unix
               Specification says that such unused arguments are allowed.

           --WWffoorrmmaatt--oovveerrffllooww
           --WWffoorrmmaatt--oovveerrffllooww==_l_e_v_e_l
               Warn about calls to formatted input/output functions such as "sprintf" and
               "vsprintf" that might overflow the destination buffer.  When the exact number
               of bytes written by a format directive cannot be determined at compile-time it
               is estimated based on heuristics that depend on the _l_e_v_e_l argument and on
               optimization.  While enabling optimization will in most cases improve the
               accuracy of the warning, it may also result in false positives.

               --WWffoorrmmaatt--oovveerrffllooww
               --WWffoorrmmaatt--oovveerrffllooww==11
                   Level _1 of --WWffoorrmmaatt--oovveerrffllooww enabled by --WWffoorrmmaatt employs a conservative
                   approach that warns only about calls that most likely overflow the buffer.
                   At this level, numeric arguments to format directives with unknown values
                   are assumed to have the value of one, and strings of unknown length to be
                   empty.  Numeric arguments that are known to be bounded to a subrange of
                   their type, or string arguments whose output is bounded either by their
                   directive's precision or by a finite set of string literals, are assumed to
                   take on the value within the range that results in the most bytes on
                   output.  For example, the call to "sprintf" below is diagnosed because even
                   with both _a and _b equal to zero, the terminating NUL character ('\0')
                   appended by the function to the destination buffer will be written past its
                   end.  Increasing the size of the buffer by a single byte is sufficient to
                   avoid the warning, though it may not be sufficient to avoid the overflow.

                           void f (int a, int b)
                           {
                             char buf [13];
                             sprintf (buf, "a = %i, b = %i\n", a, b);
                           }

               --WWffoorrmmaatt--oovveerrffllooww==22
                   Level _2 warns also about calls that might overflow the destination buffer
                   given an argument of sufficient length or magnitude.  At level _2, unknown
                   numeric arguments are assumed to have the minimum representable value for
                   signed types with a precision greater than 1, and the maximum representable
                   value otherwise.  Unknown string arguments whose length cannot be assumed
                   to be bounded either by the directive's precision, or by a finite set of
                   string literals they may evaluate to, or the character array they may point
                   to, are assumed to be 1 character long.

                   At level _2, the call in the example above is again diagnosed, but this time
                   because with _a equal to a 32-bit "INT_MIN" the first %i directive will
                   write some of its digits beyond the end of the destination buffer.  To make
                   the call safe regardless of the values of the two variables, the size of
                   the destination buffer must be increased to at least 34 bytes.  GCC
                   includes the minimum size of the buffer in an informational note following
                   the warning.

                   An alternative to increasing the size of the destination buffer is to
                   constrain the range of formatted values.  The maximum length of string
                   arguments can be bounded by specifying the precision in the format
                   directive.  When numeric arguments of format directives can be assumed to
                   be bounded by less than the precision of their type, choosing an
                   appropriate length modifier to the format specifier will reduce the
                   required buffer size.  For example, if _a and _b in the example above can be
                   assumed to be within the precision of the "short int" type then using
                   either the %hi format directive or casting the argument to "short" reduces
                   the maximum required size of the buffer to 24 bytes.

                           void f (int a, int b)
                           {
                             char buf [23];
                             sprintf (buf, "a = %hi, b = %i\n", a, (short)b);
                           }

           --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh
               If --WWffoorrmmaatt is specified, do not warn about zero-length formats.  The C
               standard specifies that zero-length formats are allowed.

           --WWffoorrmmaatt==22
               Enable --WWffoorrmmaatt plus additional format checks.  Currently equivalent to
               --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy --WWffoorrmmaatt--yy22kk.

           --WWffoorrmmaatt--nnoonnlliitteerraall
               If --WWffoorrmmaatt is specified, also warn if the format string is not a string
               literal and so cannot be checked, unless the format function takes its format
               arguments as a "va_list".

           --WWffoorrmmaatt--sseeccuurriittyy
               If --WWffoorrmmaatt is specified, also warn about uses of format functions that
               represent possible security problems.  At present, this warns about calls to
               "printf" and "scanf" functions where the format string is not a string literal
               and there are no format arguments, as in "printf (foo);".  This may be a
               security hole if the format string came from untrusted input and contains %%nn.
               (This is currently a subset of what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in
               future warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are not included in
               --WWffoorrmmaatt--nnoonnlliitteerraall.)

           --WWffoorrmmaatt--ssiiggnneeddnneessss
               If --WWffoorrmmaatt is specified, also warn if the format string requires an unsigned
               argument and the argument is signed and vice versa.

           --WWffoorrmmaatt--ttrruunnccaattiioonn
           --WWffoorrmmaatt--ttrruunnccaattiioonn==_l_e_v_e_l
               Warn about calls to formatted input/output functions such as "snprintf" and
               "vsnprintf" that might result in output truncation.  When the exact number of
               bytes written by a format directive cannot be determined at compile-time it is
               estimated based on heuristics that depend on the _l_e_v_e_l argument and on
               optimization.  While enabling optimization will in most cases improve the
               accuracy of the warning, it may also result in false positives.  Except as
               noted otherwise, the option uses the same logic --WWffoorrmmaatt--oovveerrffllooww.

               --WWffoorrmmaatt--ttrruunnccaattiioonn
               --WWffoorrmmaatt--ttrruunnccaattiioonn==11
                   Level _1 of --WWffoorrmmaatt--ttrruunnccaattiioonn enabled by --WWffoorrmmaatt employs a conservative
                   approach that warns only about calls to bounded functions whose return
                   value is unused and that will most likely result in output truncation.

               --WWffoorrmmaatt--ttrruunnccaattiioonn==22
                   Level _2 warns also about calls to bounded functions whose return value is
                   used and that might result in truncation given an argument of sufficient
                   length or magnitude.

           --WWffoorrmmaatt--yy22kk
               If --WWffoorrmmaatt is specified, also warn about "strftime" formats that may yield
               only a two-digit year.

       --WWnnoonnnnuullll
           Warn about passing a null pointer for arguments marked as requiring a non-null
           value by the "nonnull" function attribute.

           --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.  It can be disabled with the
           --WWnnoo--nnoonnnnuullll option.

       --WWnnoonnnnuullll--ccoommppaarree
           Warn when comparing an argument marked with the "nonnull" function attribute
           against null inside the function.

           --WWnnoonnnnuullll--ccoommppaarree is included in --WWaallll.  It can be disabled with the
           --WWnnoo--nnoonnnnuullll--ccoommppaarree option.

       --WWnnuullll--ddeerreeffeerreennccee
           Warn if the compiler detects paths that trigger erroneous or undefined behavior due
           to dereferencing a null pointer.  This option is only active when
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is active, which is enabled by optimizations in most
           targets.  The precision of the warnings depends on the optimization options used.

       --WWiinniitt--sseellff (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables that are initialized with themselves.  Note this
           option can only be used with the --WWuunniinniittiiaalliizzeedd option.

           For example, GCC warns about "i" being uninitialized in the following snippet only
           when --WWiinniitt--sseellff has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

           This warning is enabled by --WWaallll in C++.

       --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           Warn when a declaration does not specify a type.  This warning is enabled by --WWaallll.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           Give a warning whenever a function is used before being declared. In C99 mode
           (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this warning is enabled by default and it is made into an
           error by --ppeeddaannttiicc--eerrrroorrss. This warning is also enabled by --WWaallll.

       --WWiimmpplliicciitt (C and Objective-C only)
           Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.  This warning is
           enabled by --WWaallll.

       --WWiimmpplliicciitt--ffaalllltthhrroouugghh
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh is the same as --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 and
           --WWnnoo--iimmpplliicciitt--ffaalllltthhrroouugghh is the same as --WWiimmpplliicciitt--ffaalllltthhrroouugghh==00.

       --WWiimmpplliicciitt--ffaalllltthhrroouugghh==_n
           Warn when a switch case falls through.  For example:

                   switch (cond)
                     {
                     case 1:
                       a = 1;
                       break;
                     case 2:
                       a = 2;
                     case 3:
                       a = 3;
                       break;
                     }

           This warning does not warn when the last statement of a case cannot fall through,
           e.g. when there is a return statement or a call to function declared with the
           noreturn attribute.  --WWiimmpplliicciitt--ffaalllltthhrroouugghh== also takes into account control flow
           statements, such as ifs, and only warns when appropriate.  E.g.

                   switch (cond)
                     {
                     case 1:
                       if (i > 3) {
                         bar (5);
                         break;
                       } else if (i < 1) {
                         bar (0);
                       } else
                         return;
                     default:
                       ...
                     }

           Since there are occasions where a switch case fall through is desirable, GCC
           provides an attribute, "__attribute__ ((fallthrough))", that is to be used along
           with a null statement to suppress this warning that would normally occur:

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       __attribute__ ((fallthrough));
                     default:
                       ...
                     }

           C++17 provides a standard way to suppress the --WWiimmpplliicciitt--ffaalllltthhrroouugghh warning using
           "[[fallthrough]];" instead of the GNU attribute.  In C++11 or C++14 users can use
           "[[gnu::fallthrough]];", which is a GNU extension.  Instead of these attributes, it
           is also possible to add a fallthrough comment to silence the warning.  The whole
           body of the C or C++ style comment should match the given regular expressions
           listed below.  The option argument _n specifies what kind of comments are accepted:

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==00 disables the warning altogether.>
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==11 matches ".*" regular>
               expression, any comment is used as fallthrough comment.

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==22 case insensitively matches>
               ".*falls?[ \t-]*thr(ough|u).*" regular expression.

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 case sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[
               \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*(Else,? |Intentional(ly)? )?Fall((s | |-)[Tt]|t)hr(ough|u)[
               \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?fall(s | |-)?thr(ough|u)[
               \t.!]*(-[^\n\r]*)?">
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==44 case sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t]*FALLTHR(OUGH|U)[ \t]*">
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==55 doesn't recognize any comments as>
               fallthrough comments, only attributes disable the warning.

           The comment needs to be followed after optional whitespace and other comments by
           "case" or "default" keywords or by a user label that precedes some "case" or
           "default" label.

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       /* FALLTHRU */
                     default:
                       ...
                     }

           The --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 warning is enabled by --WWeexxttrraa.

       --WWiiff--nnoott--aalliiggnneedd (C, C++, Objective-C and Objective-C++ only)
           Control if warning triggered by the "warn_if_not_aligned" attribute should be
           issued.  This is enabled by default.  Use --WWnnoo--iiff--nnoott--aalliiggnneedd to disable it.

       --WWiiggnnoorreedd--qquuaalliiffiieerrss (C and C++ only)
           Warn if the return type of a function has a type qualifier such as "const".  For
           ISO C such a type qualifier has no effect, since the value returned by a function
           is not an lvalue.  For C++, the warning is only emitted for scalar types or "void".
           ISO C prohibits qualified "void" return types on function definitions, so such
           return types always receive a warning even without this option.

           This warning is also enabled by --WWeexxttrraa.

       --WWiiggnnoorreedd--aattttrriibbuutteess (C and C++ only)
           Warn when an attribute is ignored.  This is different from the --WWaattttrriibbuutteess option
           in that it warns whenever the compiler decides to drop an attribute, not that the
           attribute is either unknown, used in a wrong place, etc.  This warning is enabled
           by default.

       --WWmmaaiinn
           Warn if the type of "main" is suspicious.  "main" should be a function with
           external linkage, returning int, taking either zero arguments, two, or three
           arguments of appropriate types.  This warning is enabled by default in C++ and is
           enabled by either --WWaallll or --WWppeeddaannttiicc.

       --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn (C and C++ only)
           Warn when the indentation of the code does not reflect the block structure.
           Specifically, a warning is issued for "if", "else", "while", and "for" clauses with
           a guarded statement that does not use braces, followed by an unguarded statement
           with the same indentation.

           In the following example, the call to "bar" is misleadingly indented as if it were
           guarded by the "if" conditional.

                     if (some_condition ())
                       foo ();
                       bar ();  /* Gotcha: this is not guarded by the "if".  */

           In the case of mixed tabs and spaces, the warning uses the --ffttaabbssttoopp== option to
           determine if the statements line up (defaulting to 8).

           The warning is not issued for code involving multiline preprocessor logic such as
           the following example.

                     if (flagA)
                       foo (0);
                   #if SOME_CONDITION_THAT_DOES_NOT_HOLD
                     if (flagB)
                   #endif
                       foo (1);

           The warning is not issued after a "#line" directive, since this typically indicates
           autogenerated code, and no assumptions can be made about the layout of the file
           that the directive references.

           This warning is enabled by --WWaallll in C and C++.

       --WWmmiissssiinngg--aattttrriibbuutteess
           Warn when a declaration of a function is missing one or more attributes that a
           related function is declared with and whose absence may adversely affect the
           correctness or efficiency of generated code.  For example, the warning is issued
           for declarations of aliases that use attributes to specify less restrictive
           requirements than those of their targets.  This typically represents a potential
           optimization opportunity.  By contrast, the --WWaattttrriibbuuttee--aalliiaass==22 option controls
           warnings issued when the alias is more restrictive than the target, which could
           lead to incorrect code generation.  Attributes considered include "alloc_align",
           "alloc_size", "cold", "const", "hot", "leaf", "malloc", "nonnull", "noreturn",
           "nothrow", "pure", "returns_nonnull", and "returns_twice".

           In C++, the warning is issued when an explicit specialization of a primary template
           declared with attribute "alloc_align", "alloc_size", "assume_aligned", "format",
           "format_arg", "malloc", or "nonnull" is declared without it.  Attributes
           "deprecated", "error", and "warning" suppress the warning..

           You can use the "copy" attribute to apply the same set of attributes to a
           declaration as that on another declaration without explicitly enumerating the
           attributes. This attribute can be applied to declarations of functions, variables,
           or types.

           --WWmmiissssiinngg--aattttrriibbuutteess is enabled by --WWaallll.

           For example, since the declaration of the primary function template below makes use
           of both attribute "malloc" and "alloc_size" the declaration of the explicit
           specialization of the template is diagnosed because it is missing one of the
           attributes.

                   template <class T>
                   T* __attribute__ ((malloc, alloc_size (1)))
                   allocate (size_t);

                   template <>
                   void* __attribute__ ((malloc))   // missing alloc_size
                   allocate<void> (size_t);

       --WWmmiissssiinngg--bbrraacceess
           Warn if an aggregate or union initializer is not fully bracketed.  In the following
           example, the initializer for "a" is not fully bracketed, but that for "b" is fully
           bracketed.  This warning is enabled by --WWaallll in C.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by --WWaallll.

       --WWmmiissssiinngg--iinncclluuddee--ddiirrss (C, C++, Objective-C and Objective-C++ only)
           Warn if a user-supplied include directory does not exist.

       --WWmmiissssiinngg--pprrooffiillee
           Warn if feedback profiles are missing when using the --ffpprrooffiillee--uussee option.  This
           option diagnoses those cases where a new function or a new file is added to the
           user code between compiling with --ffpprrooffiillee--ggeenneerraattee and with --ffpprrooffiillee--uussee, without
           regenerating the profiles.  In these cases, the profile feedback data files do not
           contain any profile feedback information for the newly added function or file
           respectively.  Also, in the case when profile count data (.gcda) files are removed,
           GCC cannot use any profile feedback information.  In all these cases, warnings are
           issued to inform the user that a profile generation step is due.
           --WWnnoo--mmiissssiinngg--pprrooffiillee can be used to disable the warning.  Ignoring the warning can
           result in poorly optimized code.  Completely disabling the warning is not
           recommended and should be done only when non-existent profile data is justified.

       --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss
           Warn about unsafe multiple statement macros that appear to be guarded by a clause
           such as "if", "else", "for", "switch", or "while", in which only the first
           statement is actually guarded after the macro is expanded.

           For example:

                   #define DOIT x++; y++
                   if (c)
                     DOIT;

           will increment "y" unconditionally, not just when "c" holds.  The can usually be
           fixed by wrapping the macro in a do-while loop:

                   #define DOIT do { x++; y++; } while (0)
                   if (c)
                     DOIT;

           This warning is enabled by --WWaallll in C and C++.

       --WWppaarreenntthheesseess
           Warn if parentheses are omitted in certain contexts, such as when there is an
           assignment in a context where a truth value is expected, or when operators are
           nested whose precedence people often get confused about.

           Also warn if a comparison like "x<=y<=z" appears; this is equivalent to "(x<=y ? 1
           : 0) <= z", which is a different interpretation from that of ordinary mathematical
           notation.

           Also warn for dangerous uses of the GNU extension to "?:" with omitted middle
           operand. When the condition in the "?": operator is a boolean expression, the
           omitted value is always 1.  Often programmers expect it to be a value computed
           inside the conditional expression instead.

           For C++ this also warns for some cases of unnecessary parentheses in declarations,
           which can indicate an attempt at a function call instead of a declaration:

                   {
                     // Declares a local variable called mymutex.
                     std::unique_lock<std::mutex> (mymutex);
                     // User meant std::unique_lock<std::mutex> lock (mymutex);
                   }

           This warning is enabled by --WWaallll.

       --WWsseeqquueennccee--ppooiinntt
           Warn about code that may have undefined semantics because of violations of sequence
           point rules in the C and C++ standards.

           The C and C++ standards define the order in which expressions in a C/C++ program
           are evaluated in terms of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which represent a partial ordering
           between the execution of parts of the program: those executed before the sequence
           point, and those executed after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger expression), after the evaluation of
           the first operand of a "&&", "||", "? :" or "," (comma) operator, before a function
           is called (but after the evaluation of its arguments and the expression denoting
           the called function), and in certain other places.  Other than as expressed by the
           sequence point rules, the order of evaluation of subexpressions of an expression is
           not specified.  All these rules describe only a partial order rather than a total
           order, since, for example, if two functions are called within one expression with
           no sequence point between them, the order in which the functions are called is not
           specified.  However, the standards committee have ruled that function calls do not
           overlap.

           It is not specified when between sequence points modifications to the values of
           objects take effect.  Programs whose behavior depends on this have undefined
           behavior; the C and C++ standards specify that "Between the previous and next
           sequence point an object shall have its stored value modified at most once by the
           evaluation of an expression.  Furthermore, the prior value shall be read only to
           determine the value to be stored.".  If a program breaks these rules, the results
           on any particular implementation are entirely unpredictable.

           Examples of code with undefined behavior are "a = a++;", "a[n] = b[n++]" and
           "a[i++] = i;".  Some more complicated cases are not diagnosed by this option, and
           it may give an occasional false positive result, but in general it has been found
           fairly effective at detecting this sort of problem in programs.

           The C++17 standard will define the order of evaluation of operands in more cases:
           in particular it requires that the right-hand side of an assignment be evaluated
           before the left-hand side, so the above examples are no longer undefined.  But this
           warning will still warn about them, to help people avoid writing code that is
           undefined in C and earlier revisions of C++.

           The standard is worded confusingly, therefore there is some debate over the precise
           meaning of the sequence point rules in subtle cases.  Links to discussions of the
           problem, including proposed formal definitions, may be found on the GCC readings
           page, at <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

           This warning is enabled by --WWaallll for C and C++.

       --WWnnoo--rreettuurrnn--llooccaall--aaddddrr
           Do not warn about returning a pointer (or in C++, a reference) to a variable that
           goes out of scope after the function returns.

       --WWrreettuurrnn--ttyyppee
           Warn whenever a function is defined with a return type that defaults to "int".
           Also warn about any "return" statement with no return value in a function whose
           return type is not "void" (falling off the end of the function body is considered
           returning without a value).

           For C only, warn about a "return" statement with an expression in a function whose
           return type is "void", unless the expression type is also "void".  As a GNU
           extension, the latter case is accepted without a warning unless --WWppeeddaannttiicc is used.
           Attempting to use the return value of a non-"void" function other than "main" that
           flows off the end by reaching the closing curly brace that terminates the function
           is undefined.

           Unlike in C, in C++, flowing off the end of a non-"void" function other than "main"
           results in undefined behavior even when the value of the function is not used.

           This warning is enabled by default in C++ and by --WWaallll otherwise.

       --WWsshhiifftt--ccoouunntt--nneeggaattiivvee
           Warn if shift count is negative. This warning is enabled by default.

       --WWsshhiifftt--ccoouunntt--oovveerrffllooww
           Warn if shift count >= width of type. This warning is enabled by default.

       --WWsshhiifftt--nneeggaattiivvee--vvaalluuee
           Warn if left shifting a negative value.  This warning is enabled by --WWeexxttrraa in C99
           and C++11 modes (and newer).

       --WWsshhiifftt--oovveerrffllooww
       --WWsshhiifftt--oovveerrffllooww==_n
           Warn about left shift overflows.  This warning is enabled by default in C99 and
           C++11 modes (and newer).

           --WWsshhiifftt--oovveerrffllooww==11
               This is the warning level of --WWsshhiifftt--oovveerrffllooww and is enabled by default in C99
               and C++11 modes (and newer).  This warning level does not warn about left-
               shifting 1 into the sign bit.  (However, in C, such an overflow is still
               rejected in contexts where an integer constant expression is required.)  No
               warning is emitted in C++2A mode (and newer), as signed left shifts always
               wrap.

           --WWsshhiifftt--oovveerrffllooww==22
               This warning level also warns about left-shifting 1 into the sign bit, unless
               C++14 mode (or newer) is active.

       --WWsswwiittcchh
           Warn whenever a "switch" statement has an index of enumerated type and lacks a
           "case" for one or more of the named codes of that enumeration.  (The presence of a
           "default" label prevents this warning.)  "case" labels outside the enumeration
           range also provoke warnings when this option is used (even if there is a "default"
           label).  This warning is enabled by --WWaallll.

       --WWsswwiittcchh--ddeeffaauulltt
           Warn whenever a "switch" statement does not have a "default" case.

       --WWsswwiittcchh--eennuumm
           Warn whenever a "switch" statement has an index of enumerated type and lacks a
           "case" for one or more of the named codes of that enumeration.  "case" labels
           outside the enumeration range also provoke warnings when this option is used.  The
           only difference between --WWsswwiittcchh and this option is that this option gives a
           warning about an omitted enumeration code even if there is a "default" label.

       --WWsswwiittcchh--bbooooll
           Warn whenever a "switch" statement has an index of boolean type and the case values
           are outside the range of a boolean type.  It is possible to suppress this warning
           by casting the controlling expression to a type other than "bool".  For example:

                   switch ((int) (a == 4))
                     {
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       --WWsswwiittcchh--uunnrreeaacchhaabbllee
           Warn whenever a "switch" statement contains statements between the controlling
           expression and the first case label, which will never be executed.  For example:

                   switch (cond)
                     {
                      i = 15;
                     ...
                      case 5:
                     ...
                     }

           --WWsswwiittcchh--uunnrreeaacchhaabbllee does not warn if the statement between the controlling
           expression and the first case label is just a declaration:

                   switch (cond)
                     {
                      int i;
                     ...
                      case 5:
                      i = 5;
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       --WWssyynncc--nnaanndd (C and C++ only)
           Warn when "__sync_fetch_and_nand" and "__sync_nand_and_fetch" built-in functions
           are used.  These functions changed semantics in GCC 4.4.

       --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           Warn whenever a function parameter is assigned to, but otherwise unused (aside from
           its declaration).

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by --WWuunnuusseedd together with --WWeexxttrraa.

       --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee
           Warn whenever a local variable is assigned to, but otherwise unused (aside from its
           declaration).  This warning is enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by --WWuunnuusseedd, which is enabled by --WWaallll.

       --WWuunnuusseedd--ffuunnccttiioonn
           Warn whenever a static function is declared but not defined or a non-inline static
           function is unused.  This warning is enabled by --WWaallll.

       --WWuunnuusseedd--llaabbeell
           Warn whenever a label is declared but not used.  This warning is enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

       --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss (C, Objective-C, C++ and Objective-C++ only)
           Warn when a typedef locally defined in a function is not used.  This warning is
           enabled by --WWaallll.

       --WWuunnuusseedd--ppaarraammeetteerr
           Warn whenever a function parameter is unused aside from its declaration.

           To suppress this warning use the "unused" attribute.

       --WWnnoo--uunnuusseedd--rreessuulltt
           Do not warn if a caller of a function marked with attribute "warn_unused_result"
           does not use its return value. The default is --WWuunnuusseedd--rreessuulltt.

       --WWuunnuusseedd--vvaarriiaabbllee
           Warn whenever a local or static variable is unused aside from its declaration. This
           option implies --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11 for C, but not for C++. This warning is
           enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

       --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee
       --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==_n
           Warn whenever a constant static variable is unused aside from its declaration.
           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11 is enabled by --WWuunnuusseedd--vvaarriiaabbllee for C, but not for C++.
           In C this declares variable storage, but in C++ this is not an error since const
           variables take the place of "#define"s.

           To suppress this warning use the "unused" attribute.

           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11
               This is the warning level that is enabled by --WWuunnuusseedd--vvaarriiaabbllee for C.  It warns
               only about unused static const variables defined in the main compilation unit,
               but not about static const variables declared in any header included.

           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==22
               This warning level also warns for unused constant static variables in headers
               (excluding system headers).  This is the warning level of
               --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee and must be explicitly requested since in C++ this
               isn't an error and in C it might be harder to clean up all headers included.

       --WWuunnuusseedd--vvaalluuee
           Warn whenever a statement computes a result that is explicitly not used. To
           suppress this warning cast the unused expression to "void". This includes an
           expression-statement or the left-hand side of a comma expression that contains no
           side effects. For example, an expression such as "x[i,j]" causes a warning, while
           "x[(void)i,j]" does not.

           This warning is enabled by --WWaallll.

       --WWuunnuusseedd
           All the above --WWuunnuusseedd options combined.

           In order to get a warning about an unused function parameter, you must either
           specify --WWeexxttrraa --WWuunnuusseedd (note that --WWaallll implies --WWuunnuusseedd), or separately specify
           --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
           Warn if an automatic variable is used without first being initialized or if a
           variable may be clobbered by a "setjmp" call. In C++, warn if a non-static
           reference or non-static "const" member appears in a class without constructors.

           If you want to warn about code that uses the uninitialized value of the variable in
           its own initializer, use the --WWiinniitt--sseellff option.

           These warnings occur for individual uninitialized or clobbered elements of
           structure, union or array variables as well as for variables that are uninitialized
           or clobbered as a whole.  They do not occur for variables or elements declared
           "volatile".  Because these warnings depend on optimization, the exact variables or
           elements for which there are warnings depends on the precise optimization options
           and version of GCC used.

           Note that there may be no warning about a variable that is used only to compute a
           value that itself is never used, because such computations may be deleted by data
           flow analysis before the warnings are printed.

       --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell
           Warn for invocations of ____aattoommiicc BBuuiillttiinnss, ____ssyynncc BBuuiillttiinnss, and the C11 atomic
           generic functions with a memory consistency argument that is either invalid for the
           operation or outside the range of values of the "memory_order" enumeration.  For
           example, since the "__atomic_store" and "__atomic_store_n" built-ins are only
           defined for the relaxed, release, and sequentially consistent memory orders the
           following code is diagnosed:

                   void store (int *i)
                   {
                     __atomic_store_n (i, 0, memory_order_consume);
                   }

           --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell is enabled by default.

       --WWmmaayybbee--uunniinniittiiaalliizzeedd
           For an automatic (i.e. local) variable, if there exists a path from the function
           entry to a use of the variable that is initialized, but there exist some other
           paths for which the variable is not initialized, the compiler emits a warning if it
           cannot prove the uninitialized paths are not executed at run time.

           These warnings are only possible in optimizing compilation, because otherwise GCC
           does not keep track of the state of variables.

           These warnings are made optional because GCC may not be able to determine when the
           code is correct in spite of appearing to have an error.  Here is one example of how
           this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is always initialized, but GCC
           doesn't know this. To suppress the warning, you need to provide a default case with
           aasssseerrtt(0) or similar code.

           This option also warns when a non-volatile automatic variable might be changed by a
           call to "longjmp".  The compiler sees only the calls to "setjmp".  It cannot know
           where "longjmp" will be called; in fact, a signal handler could call it at any
           point in the code.  As a result, you may get a warning even when there is in fact
           no problem because "longjmp" cannot in fact be called at the place that would cause
           a problem.

           Some spurious warnings can be avoided if you declare all the functions you use that
           never return as "noreturn".

           This warning is enabled by --WWaallll or --WWeexxttrraa.

       --WWuunnkknnoowwnn--pprraaggmmaass
           Warn when a "#pragma" directive is encountered that is not understood by GCC.  If
           this command-line option is used, warnings are even issued for unknown pragmas in
           system header files.  This is not the case if the warnings are only enabled by the
           --WWaallll command-line option.

       --WWnnoo--pprraaggmmaass
           Do not warn about misuses of pragmas, such as incorrect parameters, invalid syntax,
           or conflicts between pragmas.  See also --WWuunnkknnoowwnn--pprraaggmmaass.

       --WWnnoo--pprriioo--ccttoorr--ddttoorr
           Do not warn if a priority from 0 to 100 is used for constructor or destructor.  The
           use of constructor and destructor attributes allow you to assign a priority to the
           constructor/destructor to control its order of execution before "main" is called or
           after it returns.  The priority values must be greater than 100 as the compiler
           reserves priority values between 0--100 for the implementation.

       --WWssttrriicctt--aalliiaassiinngg
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It warns about code
           that might break the strict aliasing rules that the compiler is using for
           optimization.  The warning does not catch all cases, but does attempt to catch the
           more common pitfalls.  It is included in --WWaallll.  It is equivalent to
           --WWssttrriicctt--aalliiaassiinngg==33

       --WWssttrriicctt--aalliiaassiinngg==nn
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It warns about code
           that might break the strict aliasing rules that the compiler is using for
           optimization.  Higher levels correspond to higher accuracy (fewer false positives).
           Higher levels also correspond to more effort, similar to the way --OO works.
           --WWssttrriicctt--aalliiaassiinngg is equivalent to --WWssttrriicctt--aalliiaassiinngg==33.

           Level 1: Most aggressive, quick, least accurate.  Possibly useful when higher
           levels do not warn but --ffssttrriicctt--aalliiaassiinngg still breaks the code, as it has very few
           false negatives.  However, it has many false positives.  Warns for all pointer
           conversions between possibly incompatible types, even if never dereferenced.  Runs
           in the front end only.

           Level 2: Aggressive, quick, not too precise.  May still have many false positives
           (not as many as level 1 though), and few false negatives (but possibly more than
           level 1).  Unlike level 1, it only warns when an address is taken.  Warns about
           incomplete types.  Runs in the front end only.

           Level 3 (default for --WWssttrriicctt--aalliiaassiinngg): Should have very few false positives and
           few false negatives.  Slightly slower than levels 1 or 2 when optimization is
           enabled.  Takes care of the common pun+dereference pattern in the front end:
           "*(int*)&some_float".  If optimization is enabled, it also runs in the back end,
           where it deals with multiple statement cases using flow-sensitive points-to
           information.  Only warns when the converted pointer is dereferenced.  Does not warn
           about incomplete types.

       --WWssttrriicctt--oovveerrffllooww
       --WWssttrriicctt--oovveerrffllooww==_n
           This option is only active when signed overflow is undefined.  It warns about cases
           where the compiler optimizes based on the assumption that signed overflow does not
           occur.  Note that it does not warn about all cases where the code might overflow:
           it only warns about cases where the compiler implements some optimization.  Thus
           this warning depends on the optimization level.

           An optimization that assumes that signed overflow does not occur is perfectly safe
           if the values of the variables involved are such that overflow never does, in fact,
           occur.  Therefore this warning can easily give a false positive: a warning about
           code that is not actually a problem.  To help focus on important issues, several
           warning levels are defined.  No warnings are issued for the use of undefined signed
           overflow when estimating how many iterations a loop requires, in particular when
           determining whether a loop will be executed at all.

           --WWssttrriicctt--oovveerrffllooww==11
               Warn about cases that are both questionable and easy to avoid.  For example the
               compiler simplifies "x + 1 > x" to 1.  This level of --WWssttrriicctt--oovveerrffllooww is
               enabled by --WWaallll; higher levels are not, and must be explicitly requested.

           --WWssttrriicctt--oovveerrffllooww==22
               Also warn about other cases where a comparison is simplified to a constant.
               For example: "abs (x) >= 0".  This can only be simplified when signed integer
               overflow is undefined, because "abs (INT_MIN)" overflows to "INT_MIN", which is
               less than zero.  --WWssttrriicctt--oovveerrffllooww (with no level) is the same as
               --WWssttrriicctt--oovveerrffllooww==22.

           --WWssttrriicctt--oovveerrffllooww==33
               Also warn about other cases where a comparison is simplified.  For example: "x
               + 1 > 1" is simplified to "x > 0".

           --WWssttrriicctt--oovveerrffllooww==44
               Also warn about other simplifications not covered by the above cases.  For
               example: "(x * 10) / 5" is simplified to "x * 2".

           --WWssttrriicctt--oovveerrffllooww==55
               Also warn about cases where the compiler reduces the magnitude of a constant
               involved in a comparison.  For example: "x + 2 > y" is simplified to "x + 1 >=
               y".  This is reported only at the highest warning level because this
               simplification applies to many comparisons, so this warning level gives a very
               large number of false positives.

       --WWssttrriinnggoopp--oovveerrffllooww
       --WWssttrriinnggoopp--oovveerrffllooww==_t_y_p_e
           Warn for calls to string manipulation functions such as "memcpy" and "strcpy" that
           are determined to overflow the destination buffer.  The optional argument is one
           greater than the type of Object Size Checking to perform to determine the size of
           the destination.  The argument is meaningful only for functions that operate on
           character arrays but not for raw memory functions like "memcpy" which always make
           use of Object Size type-0.  The option also warns for calls that specify a size in
           excess of the largest possible object or at most "SIZE_MAX / 2" bytes.  The option
           produces the best results with optimization enabled but can detect a small subset
           of simple buffer overflows even without optimization in calls to the GCC built-in
           functions like "__builtin_memcpy" that correspond to the standard functions.  In
           any case, the option warns about just a subset of buffer overflows detected by the
           corresponding overflow checking built-ins.  For example, the option will issue a
           warning for the "strcpy" call below because it copies at least 5 characters (the
           string "blue" including the terminating NUL) into the buffer of size 4.

                   enum Color { blue, purple, yellow };
                   const char* f (enum Color clr)
                   {
                     static char buf [4];
                     const char *str;
                     switch (clr)
                       {
                         case blue: str = "blue"; break;
                         case purple: str = "purple"; break;
                         case yellow: str = "yellow"; break;
                       }

                     return strcpy (buf, str);   // warning here
                   }

           Option --WWssttrriinnggoopp--oovveerrffllooww==22 is enabled by default.

           --WWssttrriinnggoopp--oovveerrffllooww
           --WWssttrriinnggoopp--oovveerrffllooww==11
               The --WWssttrriinnggoopp--oovveerrffllooww==11 option uses type-zero Object Size Checking to
               determine the sizes of destination objects.  This is the default setting of the
               option.  At this setting the option will not warn for writes past the end of
               subobjects of larger objects accessed by pointers unless the size of the
               largest surrounding object is known.  When the destination may be one of
               several objects it is assumed to be the largest one of them.  On Linux systems,
               when optimization is enabled at this setting the option warns for the same code
               as when the "_FORTIFY_SOURCE" macro is defined to a non-zero value.

           --WWssttrriinnggoopp--oovveerrffllooww==22
               The --WWssttrriinnggoopp--oovveerrffllooww==22 option uses type-one Object Size Checking to
               determine the sizes of destination objects.  At this setting the option will
               warn about overflows when writing to members of the largest complete objects
               whose exact size is known.  It will, however, not warn for excessive writes to
               the same members of unknown objects referenced by pointers since they may point
               to arrays containing unknown numbers of elements.

           --WWssttrriinnggoopp--oovveerrffllooww==33
               The --WWssttrriinnggoopp--oovveerrffllooww==33 option uses type-two Object Size Checking to
               determine the sizes of destination objects.  At this setting the option warns
               about overflowing the smallest object or data member.  This is the most
               restrictive setting of the option that may result in warnings for safe code.

           --WWssttrriinnggoopp--oovveerrffllooww==44
               The --WWssttrriinnggoopp--oovveerrffllooww==44 option uses type-three Object Size Checking to
               determine the sizes of destination objects.  At this setting the option will
               warn about overflowing any data members, and when the destination is one of
               several objects it uses the size of the largest of them to decide whether to
               issue a warning.  Similarly to --WWssttrriinnggoopp--oovveerrffllooww==33 this setting of the option
               may result in warnings for benign code.

       --WWssttrriinnggoopp--ttrruunnccaattiioonn
           Warn for calls to bounded string manipulation functions such as "strncat",
           "strncpy", and "stpncpy" that may either truncate the copied string or leave the
           destination unchanged.

           In the following example, the call to "strncat" specifies a bound that is less than
           the length of the source string.  As a result, the copy of the source will be
           truncated and so the call is diagnosed.  To avoid the warning use "bufsize - strlen
           (buf) - 1)" as the bound.

                   void append (char *buf, size_t bufsize)
                   {
                     strncat (buf, ".txt", 3);
                   }

           As another example, the following call to "strncpy" results in copying to "d" just
           the characters preceding the terminating NUL, without appending the NUL to the end.
           Assuming the result of "strncpy" is necessarily a NUL-terminated string is a common
           mistake, and so the call is diagnosed.  To avoid the warning when the result is not
           expected to be NUL-terminated, call "memcpy" instead.

                   void copy (char *d, const char *s)
                   {
                     strncpy (d, s, strlen (s));
                   }

           In the following example, the call to "strncpy" specifies the size of the
           destination buffer as the bound.  If the length of the source string is equal to or
           greater than this size the result of the copy will not be NUL-terminated.
           Therefore, the call is also diagnosed.  To avoid the warning, specify "sizeof buf -
           1" as the bound and set the last element of the buffer to "NUL".

                   void copy (const char *s)
                   {
                     char buf[80];
                     strncpy (buf, s, sizeof buf);
                     ...
                   }

           In situations where a character array is intended to store a sequence of bytes with
           no terminating "NUL" such an array may be annotated with attribute "nonstring" to
           avoid this warning.  Such arrays, however, are not suitable arguments to functions
           that expect "NUL"-terminated strings.  To help detect accidental misuses of such
           arrays GCC issues warnings unless it can prove that the use is safe.

       --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn|ffoorrmmaatt|ccoolldd|mmaalllloocc]
           Warn for cases where adding an attribute may be beneficial. The attributes
           currently supported are listed below.

           --WWssuuggggeesstt--aattttrriibbuuttee==ppuurree
           --WWssuuggggeesstt--aattttrriibbuuttee==ccoonnsstt
           --WWssuuggggeesstt--aattttrriibbuuttee==nnoorreettuurrnn
           --WWmmiissssiinngg--nnoorreettuurrnn
           --WWssuuggggeesstt--aattttrriibbuuttee==mmaalllloocc
               Warn about functions that might be candidates for attributes "pure", "const" or
               "noreturn" or "malloc". The compiler only warns for functions visible in other
               compilation units or (in the case of "pure" and "const") if it cannot prove
               that the function returns normally. A function returns normally if it doesn't
               contain an infinite loop or return abnormally by throwing, calling "abort" or
               trapping.  This analysis requires option --ffiippaa--ppuurree--ccoonnsstt, which is enabled by
               default at --OO and higher.  Higher optimization levels improve the accuracy of
               the analysis.

           --WWssuuggggeesstt--aattttrriibbuuttee==ffoorrmmaatt
           --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
               Warn about function pointers that might be candidates for "format" attributes.
               Note these are only possible candidates, not absolute ones.  GCC guesses that
               function pointers with "format" attributes that are used in assignment,
               initialization, parameter passing or return statements should have a
               corresponding "format" attribute in the resulting type.  I.e. the left-hand
               side of the assignment or initialization, the type of the parameter variable,
               or the return type of the containing function respectively should also have a
               "format" attribute to avoid the warning.

               GCC also warns about function definitions that might be candidates for "format"
               attributes.  Again, these are only possible candidates.  GCC guesses that
               "format" attributes might be appropriate for any function that calls a function
               like "vprintf" or "vscanf", but this might not always be the case, and some
               functions for which "format" attributes are appropriate may not be detected.

           --WWssuuggggeesstt--aattttrriibbuuttee==ccoolldd
               Warn about functions that might be candidates for "cold" attribute.  This is
               based on static detection and generally will only warn about functions which
               always leads to a call to another "cold" function such as wrappers of C++
               "throw" or fatal error reporting functions leading to "abort".

       --WWssuuggggeesstt--ffiinnaall--ttyyppeess
           Warn about types with virtual methods where code quality would be improved if the
           type were declared with the C++11 "final" specifier, or, if possible, declared in
           an anonymous namespace. This allows GCC to more aggressively devirtualize the
           polymorphic calls. This warning is more effective with link time optimization,
           where the information about the class hierarchy graph is more complete.

       --WWssuuggggeesstt--ffiinnaall--mmeetthhooddss
           Warn about virtual methods where code quality would be improved if the method were
           declared with the C++11 "final" specifier, or, if possible, its type were declared
           in an anonymous namespace or with the "final" specifier.  This warning is more
           effective with link-time optimization, where the information about the class
           hierarchy graph is more complete. It is recommended to first consider suggestions
           of --WWssuuggggeesstt--ffiinnaall--ttyyppeess and then rebuild with new annotations.

       --WWssuuggggeesstt--oovveerrrriiddee
           Warn about overriding virtual functions that are not marked with the override
           keyword.

       --WWaalllloocc--zzeerroo
           Warn about calls to allocation functions decorated with attribute "alloc_size" that
           specify zero bytes, including those to the built-in forms of the functions
           "aligned_alloc", "alloca", "calloc", "malloc", and "realloc".  Because the behavior
           of these functions when called with a zero size differs among implementations (and
           in the case of "realloc" has been deprecated) relying on it may result in subtle
           portability bugs and should be avoided.

       --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           Warn about calls to functions decorated with attribute "alloc_size" that attempt to
           allocate objects larger than the specified number of bytes, or where the result of
           the size computation in an integer type with infinite precision would exceed the
           value of PPTTRRDDIIFFFF__MMAAXX on the target.  --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==PPTTRRDDIIFFFF__MMAAXX is
           enabled by default.  Warnings controlled by the option can be disabled either by
           specifying _b_y_t_e_-_s_i_z_e of SSIIZZEE__MMAAXX or more or by --WWnnoo--aalllloocc--ssiizzee--llaarrggeerr--tthhaann.

       --WWnnoo--aalllloocc--ssiizzee--llaarrggeerr--tthhaann
           Disable --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann== warnings.  The option is equivalent to
           --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==SSIIZZEE__MMAAXX or larger.

       --WWaallllooccaa
           This option warns on all uses of "alloca" in the source.

       --WWaallllooccaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           This option warns on calls to "alloca" with an integer argument whose value is
           either zero, or that is not bounded by a controlling predicate that limits its
           value to at most _b_y_t_e_-_s_i_z_e.  It also warns for calls to "alloca" where the bound
           value is unknown.  Arguments of non-integer types are considered unbounded even if
           they appear to be constrained to the expected range.

           For example, a bounded case of "alloca" could be:

                   void func (size_t n)
                   {
                     void *p;
                     if (n <= 1000)
                       p = alloca (n);
                     else
                       p = malloc (n);
                     f (p);
                   }

           In the above example, passing "-Walloca-larger-than=1000" would not issue a warning
           because the call to "alloca" is known to be at most 1000 bytes.  However, if
           "-Walloca-larger-than=500" were passed, the compiler would emit a warning.

           Unbounded uses, on the other hand, are uses of "alloca" with no controlling
           predicate constraining its integer argument.  For example:

                   void func ()
                   {
                     void *p = alloca (n);
                     f (p);
                   }

           If "-Walloca-larger-than=500" were passed, the above would trigger a warning, but
           this time because of the lack of bounds checking.

           Note, that even seemingly correct code involving signed integers could cause a
           warning:

                   void func (signed int n)
                   {
                     if (n < 500)
                       {
                         p = alloca (n);
                         f (p);
                       }
                   }

           In the above example, _n could be negative, causing a larger than expected argument
           to be implicitly cast into the "alloca" call.

           This option also warns when "alloca" is used in a loop.

           --WWaallllooccaa--llaarrggeerr--tthhaann==PPTTRRDDIIFFFF__MMAAXX is enabled by default but is usually only
           effective  when --ffttrreeee--vvrrpp is active (default for --OO22 and above).

           See also --WWvvllaa--llaarrggeerr--tthhaann==bbyyttee--ssiizzee.

       --WWnnoo--aallllooccaa--llaarrggeerr--tthhaann
           Disable --WWaallllooccaa--llaarrggeerr--tthhaann== warnings.  The option is equivalent to
           --WWaallllooccaa--llaarrggeerr--tthhaann==SSIIZZEE__MMAAXX or larger.

       --WWaarrrraayy--bboouunnddss
       --WWaarrrraayy--bboouunnddss==_n
           This option is only active when --ffttrreeee--vvrrpp is active (default for --OO22 and above).
           It warns about subscripts to arrays that are always out of bounds. This warning is
           enabled by --WWaallll.

           --WWaarrrraayy--bboouunnddss==11
               This is the warning level of --WWaarrrraayy--bboouunnddss and is enabled by --WWaallll; higher
               levels are not, and must be explicitly requested.

           --WWaarrrraayy--bboouunnddss==22
               This warning level also warns about out of bounds access for arrays at the end
               of a struct and for arrays accessed through pointers. This warning level may
               give a larger number of false positives and is deactivated by default.

       --WWaattttrriibbuuttee--aalliiaass==_n
       --WWnnoo--aattttrriibbuuttee--aalliiaass
           Warn about declarations using the "alias" and similar attributes whose target is
           incompatible with the type of the alias.

           --WWaattttrriibbuuttee--aalliiaass==11
               The default warning level of the --WWaattttrriibbuuttee--aalliiaass option diagnoses
               incompatibilities between the type of the alias declaration and that of its
               target.  Such incompatibilities are typically indicative of bugs.

           --WWaattttrriibbuuttee--aalliiaass==22
               At this level --WWaattttrriibbuuttee--aalliiaass also diagnoses cases where the attributes of
               the alias declaration are more restrictive than the attributes applied to its
               target.  These mismatches can potentially result in incorrect code generation.
               In other cases they may be benign and could be resolved simply by adding the
               missing attribute to the target.  For comparison, see the --WWmmiissssiinngg--aattttrriibbuutteess
               option, which controls diagnostics when the alias declaration is less
               restrictive than the target, rather than more restrictive.

               Attributes considered include "alloc_align", "alloc_size", "cold", "const",
               "hot", "leaf", "malloc", "nonnull", "noreturn", "nothrow", "pure",
               "returns_nonnull", and "returns_twice".

           --WWaattttrriibbuuttee--aalliiaass is equivalent to --WWaattttrriibbuuttee--aalliiaass==11.  This is the default.  You
           can disable these warnings with either --WWnnoo--aattttrriibbuuttee--aalliiaass or --WWaattttrriibbuuttee--aalliiaass==00.

       --WWbbooooll--ccoommppaarree
           Warn about boolean expression compared with an integer value different from
           "true"/"false".  For instance, the following comparison is always false:

                   int n = 5;
                   ...
                   if ((n > 1) == 2) { ... }

           This warning is enabled by --WWaallll.

       --WWbbooooll--ooppeerraattiioonn
           Warn about suspicious operations on expressions of a boolean type.  For instance,
           bitwise negation of a boolean is very likely a bug in the program.  For C, this
           warning also warns about incrementing or decrementing a boolean, which rarely makes
           sense.  (In C++, decrementing a boolean is always invalid.  Incrementing a boolean
           is invalid in C++17, and deprecated otherwise.)

           This warning is enabled by --WWaallll.

       --WWdduupplliiccaatteedd--bbrraanncchheess
           Warn when an if-else has identical branches.  This warning detects cases like

                   if (p != NULL)
                     return 0;
                   else
                     return 0;

           It doesn't warn when both branches contain just a null statement.  This warning
           also warn for conditional operators:

                     int i = x ? *p : *p;

       --WWdduupplliiccaatteedd--ccoonndd
           Warn about duplicated conditions in an if-else-if chain.  For instance, warn for
           the following code:

                   if (p->q != NULL) { ... }
                   else if (p->q != NULL) { ... }

       --WWffrraammee--aaddddrreessss
           Warn when the ____bbuuiillttiinn__ffrraammee__aaddddrreessss or ____bbuuiillttiinn__rreettuurrnn__aaddddrreessss is called with an
           argument greater than 0.  Such calls may return indeterminate values or crash the
           program.  The warning is included in --WWaallll.

       --WWnnoo--ddiissccaarrddeedd--qquuaalliiffiieerrss (C and Objective-C only)
           Do not warn if type qualifiers on pointers are being discarded.  Typically, the
           compiler warns if a "const char *" variable is passed to a function that takes a
           "char *" parameter.  This option can be used to suppress such a warning.

       --WWnnoo--ddiissccaarrddeedd--aarrrraayy--qquuaalliiffiieerrss (C and Objective-C only)
           Do not warn if type qualifiers on arrays which are pointer targets are being
           discarded. Typically, the compiler warns if a "const int (*)[]" variable is passed
           to a function that takes a "int (*)[]" parameter.  This option can be used to
           suppress such a warning.

       --WWnnoo--iinnccoommppaattiibbllee--ppooiinntteerr--ttyyppeess (C and Objective-C only)
           Do not warn when there is a conversion between pointers that have incompatible
           types.  This warning is for cases not covered by --WWnnoo--ppooiinntteerr--ssiiggnn, which warns for
           pointer argument passing or assignment with different signedness.

       --WWnnoo--iinntt--ccoonnvveerrssiioonn (C and Objective-C only)
           Do not warn about incompatible integer to pointer and pointer to integer
           conversions.  This warning is about implicit conversions; for explicit conversions
           the warnings --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt and --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt may be used.

       --WWnnoo--ddiivv--bbyy--zzeerroo
           Do not warn about compile-time integer division by zero.  Floating-point division
           by zero is not warned about, as it can be a legitimate way of obtaining infinities
           and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
           Print warning messages for constructs found in system header files.  Warnings from
           system headers are normally suppressed, on the assumption that they usually do not
           indicate real problems and would only make the compiler output harder to read.
           Using this command-line option tells GCC to emit warnings from system headers as if
           they occurred in user code.  However, note that using --WWaallll in conjunction with
           this option does _n_o_t warn about unknown pragmas in system headers---for that,
           --WWuunnkknnoowwnn--pprraaggmmaass must also be used.

       --WWttaauuttoollooggiiccaall--ccoommppaarree
           Warn if a self-comparison always evaluates to true or false.  This warning detects
           various mistakes such as:

                   int i = 1;
                   ...
                   if (i > i) { ... }

           This warning also warns about bitwise comparisons that always evaluate to true or
           false, for instance:

                   if ((a & 16) == 10) { ... }

           will always be false.

           This warning is enabled by --WWaallll.

       --WWttrraammppoolliinneess
           Warn about trampolines generated for pointers to nested functions.  A trampoline is
           a small piece of data or code that is created at run time on the stack when the
           address of a nested function is taken, and is used to call the nested function
           indirectly.  For some targets, it is made up of data only and thus requires no
           special treatment.  But, for most targets, it is made up of code and thus requires
           the stack to be made executable in order for the program to work properly.

       --WWffllooaatt--eeqquuaall
           Warn if floating-point values are used in equality comparisons.

           The idea behind this is that sometimes it is convenient (for the programmer) to
           consider floating-point values as approximations to infinitely precise real
           numbers.  If you are doing this, then you need to compute (by analyzing the code,
           or in some other way) the maximum or likely maximum error that the computation
           introduces, and allow for it when performing comparisons (and when producing
           output, but that's a different problem).  In particular, instead of testing for
           equality, you should check to see whether the two values have ranges that overlap;
           and this is done with the relational operators, so equality comparisons are
           probably mistaken.

       --WWttrraaddiittiioonnaall (C and Objective-C only)
           Warn about certain constructs that behave differently in traditional and ISO C.
           Also warn about ISO C constructs that have no traditional C equivalent, and/or
           problematic constructs that should be avoided.

           *   Macro parameters that appear within string literals in the macro body.  In
               traditional C macro replacement takes place within string literals, but in ISO
               C it does not.

           *   In traditional C, some preprocessor directives did not exist.  Traditional
               preprocessors only considered a line to be a directive if the ## appeared in
               column 1 on the line.  Therefore --WWttrraaddiittiioonnaall warns about directives that
               traditional C understands but ignores because the ## does not appear as the
               first character on the line.  It also suggests you hide directives like
               "#pragma" not understood by traditional C by indenting them.  Some traditional
               implementations do not recognize "#elif", so this option suggests avoiding it
               altogether.

           *   A function-like macro that appears without arguments.

           *   The unary plus operator.

           *   The UU integer constant suffix, or the FF or LL floating-point constant suffixes.
               (Traditional C does support the LL suffix on integer constants.)  Note, these
               suffixes appear in macros defined in the system headers of most modern systems,
               e.g. the __MMIINN/__MMAAXX macros in "<limits.h>".  Use of these macros in user code
               might normally lead to spurious warnings, however GCC's integrated preprocessor
               has enough context to avoid warning in these cases.

           *   A function declared external in one block and then used after the end of the
               block.

           *   A "switch" statement has an operand of type "long".

           *   A non-"static" function declaration follows a "static" one.  This construct is
               not accepted by some traditional C compilers.

           *   The ISO type of an integer constant has a different width or signedness from
               its traditional type.  This warning is only issued if the base of the constant
               is ten.  I.e. hexadecimal or octal values, which typically represent bit
               patterns, are not warned about.

           *   Usage of ISO string concatenation is detected.

           *   Initialization of automatic aggregates.

           *   Identifier conflicts with labels.  Traditional C lacks a separate namespace for
               labels.

           *   Initialization of unions.  If the initializer is zero, the warning is omitted.
               This is done under the assumption that the zero initializer in user code
               appears conditioned on e.g. "__STDC__" to avoid missing initializer warnings
               and relies on default initialization to zero in the traditional C case.

           *   Conversions by prototypes between fixed/floating-point values and vice versa.
               The absence of these prototypes when compiling with traditional C causes
               serious problems.  This is a subset of the possible conversion warnings; for
               the full set use --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn.

           *   Use of ISO C style function definitions.  This warning intentionally is _n_o_t
               issued for prototype declarations or variadic functions because these ISO C
               features appear in your code when using libiberty's traditional C compatibility
               macros, "PARAMS" and "VPARAMS".  This warning is also bypassed for nested
               functions because that feature is already a GCC extension and thus not relevant
               to traditional C compatibility.

       --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn (C and Objective-C only)
           Warn if a prototype causes a type conversion that is different from what would
           happen to the same argument in the absence of a prototype.  This includes
           conversions of fixed point to floating and vice versa, and conversions changing the
           width or signedness of a fixed-point argument except when the same as the default
           promotion.

       --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt (C and Objective-C only)
           Warn when a declaration is found after a statement in a block.  This construct,
           known from C++, was introduced with ISO C99 and is by default allowed in GCC.  It
           is not supported by ISO C90.

       --WWsshhaaddooww
           Warn whenever a local variable or type declaration shadows another variable,
           parameter, type, class member (in C++), or instance variable (in Objective-C) or
           whenever a built-in function is shadowed. Note that in C++, the compiler warns if a
           local variable shadows an explicit typedef, but not if it shadows a
           struct/class/enum.  Same as --WWsshhaaddooww==gglloobbaall.

       --WWnnoo--sshhaaddooww--iivvaarr (Objective-C only)
           Do not warn whenever a local variable shadows an instance variable in an Objective-
           C method.

       --WWsshhaaddooww==gglloobbaall
           The default for --WWsshhaaddooww. Warns for any (global) shadowing.

       --WWsshhaaddooww==llooccaall
           Warn when a local variable shadows another local variable or parameter.  This
           warning is enabled by --WWsshhaaddooww==gglloobbaall.

       --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall
           Warn when a local variable shadows another local variable or parameter whose type
           is compatible with that of the shadowing variable. In C++, type compatibility here
           means the type of the shadowing variable can be converted to that of the shadowed
           variable. The creation of this flag (in addition to --WWsshhaaddooww==llooccaall) is based on the
           idea that when a local variable shadows another one of incompatible type, it is
           most likely intentional, not a bug or typo, as shown in the following example:

                   for (SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)
                   {
                     for (int i = 0; i < N; ++i)
                     {
                       ...
                     }
                     ...
                   }

           Since the two variable "i" in the example above have incompatible types, enabling
           only --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall will not emit a warning.  Because their types are
           incompatible, if a programmer accidentally uses one in place of the other, type
           checking will catch that and emit an error or warning. So not warning (about
           shadowing) in this case will not lead to undetected bugs. Use of this flag instead
           of --WWsshhaaddooww==llooccaall can possibly reduce the number of warnings triggered by
           intentional shadowing.

           This warning is enabled by --WWsshhaaddooww==llooccaall.

       --WWllaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           Warn whenever an object is defined whose size exceeds _b_y_t_e_-_s_i_z_e.
           --WWllaarrggeerr--tthhaann==PPTTRRDDIIFFFF__MMAAXX is enabled by default.  Warnings controlled by the option
           can be disabled either by specifying _b_y_t_e_-_s_i_z_e of SSIIZZEE__MMAAXX or more or by
           --WWnnoo--llaarrggeerr--tthhaann.

       --WWnnoo--llaarrggeerr--tthhaann
           Disable --WWllaarrggeerr--tthhaann== warnings.  The option is equivalent to
           --WWllaarrggeerr--tthhaann==SSIIZZEE__MMAAXX or larger.

       --WWffrraammee--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           Warn if the size of a function frame exceeds _b_y_t_e_-_s_i_z_e.  The computation done to
           determine the stack frame size is approximate and not conservative.  The actual
           requirements may be somewhat greater than _b_y_t_e_-_s_i_z_e even if you do not get a
           warning.  In addition, any space allocated via "alloca", variable-length arrays, or
           related constructs is not included by the compiler when determining whether or not
           to issue a warning.  --WWffrraammee--llaarrggeerr--tthhaann==PPTTRRDDIIFFFF__MMAAXX is enabled by default.
           Warnings controlled by the option can be disabled either by specifying _b_y_t_e_-_s_i_z_e of
           SSIIZZEE__MMAAXX or more or by --WWnnoo--ffrraammee--llaarrggeerr--tthhaann.

       --WWnnoo--ffrraammee--llaarrggeerr--tthhaann
           Disable --WWffrraammee--llaarrggeerr--tthhaann== warnings.  The option is equivalent to
           --WWffrraammee--llaarrggeerr--tthhaann==SSIIZZEE__MMAAXX or larger.

       --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt
           Do not warn when attempting to free an object that was not allocated on the heap.

       --WWssttaacckk--uussaaggee==_b_y_t_e_-_s_i_z_e
           Warn if the stack usage of a function might exceed _b_y_t_e_-_s_i_z_e.  The computation done
           to determine the stack usage is conservative.  Any space allocated via "alloca",
           variable-length arrays, or related constructs is included by the compiler when
           determining whether or not to issue a warning.

           The message is in keeping with the output of --ffssttaacckk--uussaaggee.

           *   If the stack usage is fully static but exceeds the specified amount, it's:

                         warning: stack usage is 1120 bytes

           *   If the stack usage is (partly) dynamic but bounded, it's:

                         warning: stack usage might be 1648 bytes

           *   If the stack usage is (partly) dynamic and not bounded, it's:

                         warning: stack usage might be unbounded

           --WWssttaacckk--uussaaggee==PPTTRRDDIIFFFF__MMAAXX is enabled by default.  Warnings controlled by the option
           can be disabled either by specifying _b_y_t_e_-_s_i_z_e of SSIIZZEE__MMAAXX or more or by
           --WWnnoo--ssttaacckk--uussaaggee.

       --WWnnoo--ssttaacckk--uussaaggee
           Disable --WWssttaacckk--uussaaggee== warnings.  The option is equivalent to
           --WWssttaacckk--uussaaggee==SSIIZZEE__MMAAXX or larger.

       --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if the loop cannot be optimized because the compiler cannot assume anything on
           the bounds of the loop indices.  With --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss warn if the
           compiler makes such assumptions.

       --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt (MinGW targets only)
           When used in combination with --WWffoorrmmaatt and --ppeeddaannttiicc without GNU extensions, this
           option disables the warnings about non-ISO "printf" / "scanf" format width
           specifiers "I32", "I64", and "I" used on Windows targets, which depend on the MS
           runtime.

       --WWaalliiggnneedd--nneeww
           Warn about a new-expression of a type that requires greater alignment than the
           "alignof(std::max_align_t)" but uses an allocation function without an explicit
           alignment parameter. This option is enabled by --WWaallll.

           Normally this only warns about global allocation functions, but --WWaalliiggnneedd--nneeww==aallll
           also warns about class member allocation functions.

       --WWppllaacceemmeenntt--nneeww
       --WWppllaacceemmeenntt--nneeww==_n
           Warn about placement new expressions with undefined behavior, such as constructing
           an object in a buffer that is smaller than the type of the object.  For example,
           the placement new expression below is diagnosed because it attempts to construct an
           array of 64 integers in a buffer only 64 bytes large.

                   char buf [64];
                   new (buf) int[64];

           This warning is enabled by default.

           --WWppllaacceemmeenntt--nneeww==11
               This is the default warning level of --WWppllaacceemmeenntt--nneeww.  At this level the
               warning is not issued for some strictly undefined constructs that GCC allows as
               extensions for compatibility with legacy code.  For example, the following
               "new" expression is not diagnosed at this level even though it has undefined
               behavior according to the C++ standard because it writes past the end of the
               one-element array.

                       struct S { int n, a[1]; };
                       S *s = (S *)malloc (sizeof *s + 31 * sizeof s->a[0]);
                       new (s->a)int [32]();

           --WWppllaacceemmeenntt--nneeww==22
               At this level, in addition to diagnosing all the same constructs as at level 1,
               a diagnostic is also issued for placement new expressions that construct an
               object in the last member of structure whose type is an array of a single
               element and whose size is less than the size of the object being constructed.
               While the previous example would be diagnosed, the following construct makes
               use of the flexible member array extension to avoid the warning at level 2.

                       struct S { int n, a[]; };
                       S *s = (S *)malloc (sizeof *s + 32 * sizeof s->a[0]);
                       new (s->a)int [32]();

       --WWppooiinntteerr--aarriitthh
           Warn about anything that depends on the "size of" a function type or of "void".
           GNU C assigns these types a size of 1, for convenience in calculations with "void
           *" pointers and pointers to functions.  In C++, warn also when an arithmetic
           operation involves "NULL".  This warning is also enabled by --WWppeeddaannttiicc.

       --WWppooiinntteerr--ccoommppaarree
           Warn if a pointer is compared with a zero character constant.  This usually means
           that the pointer was meant to be dereferenced.  For example:

                   const char *p = foo ();
                   if (p == '\0')
                     return 42;

           Note that the code above is invalid in C++11.

           This warning is enabled by default.

       --WWttyyppee--lliimmiittss
           Warn if a comparison is always true or always false due to the limited range of the
           data type, but do not warn for constant expressions.  For example, warn if an
           unsigned variable is compared against zero with "<" or ">=".  This warning is also
           enabled by --WWeexxttrraa.

       --WWaabbssoolluuttee--vvaalluuee (C and Objective-C only)
           Warn for calls to standard functions that compute the absolute value of an argument
           when a more appropriate standard function is available.  For example, calling
           "abs(3.14)" triggers the warning because the appropriate function to call to
           compute the absolute value of a double argument is "fabs".  The option also
           triggers warnings when the argument in a call to such a function has an unsigned
           type.  This warning can be suppressed with an explicit type cast and it is also
           enabled by --WWeexxttrraa.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a //** comment, or whenever a
           backslash-newline appears in a //// comment.  This warning is enabled by --WWaallll.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might change the meaning of the program.
           Trigraphs within comments are not warned about, except those that would form
           escaped newlines.

           This option is implied by --WWaallll.  If --WWaallll is not given, this option is still
           enabled unless trigraphs are enabled.  To get trigraph conversion without warnings,
           but get the other --WWaallll warnings, use --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an "#if" directive.  Such
           identifiers are replaced with zero.

       --WWeexxppaannssiioonn--ttoo--ddeeffiinneedd
           Warn whenever ddeeffiinneedd is encountered in the expansion of a macro (including the
           case where the macro is expanded by an ##iiff directive).  Such usage is not portable.
           This warning is also enabled by --WWppeeddaannttiicc and --WWeexxttrraa.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are unused.  A macro is _u_s_e_d if it
           is expanded or tested for existence at least once.  The preprocessor also warns if
           the macro has not been used at the time it is redefined or undefined.

           Built-in macros, macros defined on the command line, and macros defined in include
           files are not warned about.

           _N_o_t_e_: If a macro is actually used, but only used in skipped conditional blocks,
           then the preprocessor reports it as unused.  To avoid the warning in such a case,
           you might improve the scope of the macro's definition by, for example, moving it
           into the first skipped block.  Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an "#else" or an "#endif" are followed by text.  This
           sometimes happens in older programs with code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments.  This warning is on by default.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C and Objective-C only)
           Warn when a function call is cast to a non-matching type.  For example, warn if a
           call to a function returning an integer type is cast to a pointer type.

       --WWcc9900--cc9999--ccoommppaatt (C and Objective-C only)
           Warn about features not present in ISO C90, but present in ISO C99.  For instance,
           warn about use of variable length arrays, "long long" type, "bool" type, compound
           literals, designated initializers, and so on.  This option is independent of the
           standards mode.  Warnings are disabled in the expression that follows
           "__extension__".

       --WWcc9999--cc1111--ccoommppaatt (C and Objective-C only)
           Warn about features not present in ISO C99, but present in ISO C11.  For instance,
           warn about use of anonymous structures and unions, "_Atomic" type qualifier,
           "_Thread_local" storage-class specifier, "_Alignas" specifier, "Alignof" operator,
           "_Generic" keyword, and so on.  This option is independent of the standards mode.
           Warnings are disabled in the expression that follows "__extension__".

       --WWcc1111--cc22xx--ccoommppaatt (C and Objective-C only)
           Warn about features not present in ISO C11, but present in ISO C2X.  For instance,
           warn about omitting the string in "_Static_assert".  This option is independent of
           the standards mode.  Warnings are disabled in the expression that follows
           "__extension__".

       --WWcc++++--ccoommppaatt (C and Objective-C only)
           Warn about ISO C constructs that are outside of the common subset of ISO C and ISO
           C++, e.g. request for implicit conversion from "void *" to a pointer to non-"void"
           type.

       --WWcc++++1111--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++
           2011, e.g., identifiers in ISO C++ 1998 that are keywords in ISO C++ 2011.  This
           warning turns on --WWnnaarrrroowwiinngg and is enabled by --WWaallll.

       --WWcc++++1144--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++
           2014.  This warning is enabled by --WWaallll.

       --WWcc++++1177--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++
           2017.  This warning is enabled by --WWaallll.

       --WWccaasstt--qquuaall
           Warn whenever a pointer is cast so as to remove a type qualifier from the target
           type.  For example, warn if a "const char *" is cast to an ordinary "char *".

           Also warn when making a cast that introduces a type qualifier in an unsafe way.
           For example, casting "char **" to "const char **" is unsafe, as in this example:

                     /* p is char ** value.  */
                     const char **q = (const char **) p;
                     /* Assignment of readonly string to const char * is OK.  */
                     *q = "string";
                     /* Now char** pointer points to read-only memory.  */
                     **p = 'b';

       --WWccaasstt--aalliiggnn
           Warn whenever a pointer is cast such that the required alignment of the target is
           increased.  For example, warn if a "char *" is cast to an "int *" on machines where
           integers can only be accessed at two- or four-byte boundaries.

       --WWccaasstt--aalliiggnn==ssttrriicctt
           Warn whenever a pointer is cast such that the required alignment of the target is
           increased.  For example, warn if a "char *" is cast to an "int *" regardless of the
           target machine.

       --WWccaasstt--ffuunnccttiioonn--ttyyppee
           Warn when a function pointer is cast to an incompatible function pointer.  In a
           cast involving function types with a variable argument list only the types of
           initial arguments that are provided are considered.  Any parameter of pointer-type
           matches any other pointer-type.  Any benign differences in integral types are
           ignored, like "int" vs. "long" on ILP32 targets.  Likewise type qualifiers are
           ignored.  The function type "void (*) (void)" is special and matches everything,
           which can be used to suppress this warning.  In a cast involving pointer to member
           types this warning warns whenever the type cast is changing the pointer to member
           type.  This warning is enabled by --WWeexxttrraa.

       --WWwwrriittee--ssttrriinnggss
           When compiling C, give string constants the type "const char[_l_e_n_g_t_h_]_" so that
           copying the address of one into a non-"const" "char *" pointer produces a warning.
           These warnings help you find at compile time code that can try to write into a
           string constant, but only if you have been very careful about using "const" in
           declarations and prototypes.  Otherwise, it is just a nuisance. This is why we did
           not make --WWaallll request these warnings.

           When compiling C++, warn about the deprecated conversion from string literals to
           "char *".  This warning is enabled by default for C++ programs.

       --WWccaattcchh--vvaalluuee
       --WWccaattcchh--vvaalluuee==_n (C++ and Objective-C++ only)
           Warn about catch handlers that do not catch via reference.  With --WWccaattcchh--vvaalluuee==11
           (or --WWccaattcchh--vvaalluuee for short) warn about polymorphic class types that are caught by
           value.  With --WWccaattcchh--vvaalluuee==22 warn about all class types that are caught by value.
           With --WWccaattcchh--vvaalluuee==33 warn about all types that are not caught by reference.
           --WWccaattcchh--vvaalluuee is enabled by --WWaallll.

       --WWcclloobbbbeerreedd
           Warn for variables that might be changed by "longjmp" or "vfork".  This warning is
           also enabled by --WWeexxttrraa.

       --WWccoonnddiittiioonnaallllyy--ssuuppppoorrtteedd (C++ and Objective-C++ only)
           Warn for conditionally-supported (C++11 [intro.defs]) constructs.

       --WWccoonnvveerrssiioonn
           Warn for implicit conversions that may alter a value. This includes conversions
           between real and integer, like "abs (x)" when "x" is "double"; conversions between
           signed and unsigned, like "unsigned ui = -1"; and conversions to smaller types,
           like "sqrtf (M_PI)". Do not warn for explicit casts like "abs ((int) x)" and "ui =
           (unsigned) -1", or if the value is not changed by the conversion like in "abs
           (2.0)".  Warnings about conversions between signed and unsigned integers can be
           disabled by using --WWnnoo--ssiiggnn--ccoonnvveerrssiioonn.

           For C++, also warn for confusing overload resolution for user-defined conversions;
           and conversions that never use a type conversion operator: conversions to "void",
           the same type, a base class or a reference to them. Warnings about conversions
           between signed and unsigned integers are disabled by default in C++ unless
           --WWssiiggnn--ccoonnvveerrssiioonn is explicitly enabled.

       --WWnnoo--ccoonnvveerrssiioonn--nnuullll (C++ and Objective-C++ only)
           Do not warn for conversions between "NULL" and non-pointer types. --WWccoonnvveerrssiioonn--nnuullll
           is enabled by default.

       --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt (C++ and Objective-C++ only)
           Warn when a literal 00 is used as null pointer constant.  This can be useful to
           facilitate the conversion to "nullptr" in C++11.

       --WWssuubboobbjjeecctt--lliinnkkaaggee (C++ and Objective-C++ only)
           Warn if a class type has a base or a field whose type uses the anonymous namespace
           or depends on a type with no linkage.  If a type A depends on a type B with no or
           internal linkage, defining it in multiple translation units would be an ODR
           violation because the meaning of B is different in each translation unit.  If A
           only appears in a single translation unit, the best way to silence the warning is
           to give it internal linkage by putting it in an anonymous namespace as well.  The
           compiler doesn't give this warning for types defined in the main .C file, as those
           are unlikely to have multiple definitions.  --WWssuubboobbjjeecctt--lliinnkkaaggee is enabled by
           default.

       --WWddaanngglliinngg--eellssee
           Warn about constructions where there may be confusion to which "if" statement an
           "else" branch belongs.  Here is an example of such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost possible "if" statement,
           which in this example is "if (b)".  This is often not what the programmer expected,
           as illustrated in the above example by indentation the programmer chose.  When
           there is the potential for this confusion, GCC issues a warning when this flag is
           specified.  To eliminate the warning, add explicit braces around the innermost "if"
           statement so there is no way the "else" can belong to the enclosing "if".  The
           resulting code looks like this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           This warning is enabled by --WWppaarreenntthheesseess.

       --WWddaattee--ttiimmee
           Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they
           might prevent bit-wise-identical reproducible compilations.

       --WWddeelleettee--iinnccoommpplleettee (C++ and Objective-C++ only)
           Warn when deleting a pointer to incomplete type, which may cause undefined behavior
           at runtime.  This warning is enabled by default.

       --WWuusseelleessss--ccaasstt (C++ and Objective-C++ only)
           Warn when an expression is casted to its own type.

       --WWeemmppttyy--bbooddyy
           Warn if an empty body occurs in an "if", "else" or "do while" statement.  This
           warning is also enabled by --WWeexxttrraa.

       --WWeennuumm--ccoommppaarree
           Warn about a comparison between values of different enumerated types.  In C++
           enumerated type mismatches in conditional expressions are also diagnosed and the
           warning is enabled by default.  In C this warning is enabled by --WWaallll.

       --WWeexxttrraa--sseemmii (C++, Objective-C++ only)
           Warn about redundant semicolon after in-class function definition.

       --WWjjuummpp--mmiisssseess--iinniitt (C, Objective-C only)
           Warn if a "goto" statement or a "switch" statement jumps forward across the
           initialization of a variable, or jumps backward to a label after the variable has
           been initialized.  This only warns about variables that are initialized when they
           are declared.  This warning is only supported for C and Objective-C; in C++ this
           sort of branch is an error in any case.

           --WWjjuummpp--mmiisssseess--iinniitt is included in --WWcc++++--ccoommppaatt.  It can be disabled with the
           --WWnnoo--jjuummpp--mmiisssseess--iinniitt option.

       --WWssiiggnn--ccoommppaarree
           Warn when a comparison between signed and unsigned values could produce an
           incorrect result when the signed value is converted to unsigned.  In C++, this
           warning is also enabled by --WWaallll.  In C, it is also enabled by --WWeexxttrraa.

       --WWssiiggnn--ccoonnvveerrssiioonn
           Warn for implicit conversions that may change the sign of an integer value, like
           assigning a signed integer expression to an unsigned integer variable. An explicit
           cast silences the warning. In C, this option is enabled also by --WWccoonnvveerrssiioonn.

       --WWffllooaatt--ccoonnvveerrssiioonn
           Warn for implicit conversions that reduce the precision of a real value.  This
           includes conversions from real to integer, and from higher precision real to lower
           precision real values.  This option is also enabled by --WWccoonnvveerrssiioonn.

       --WWnnoo--ssccaallaarr--ssttoorraaggee--oorrddeerr
           Do not warn on suspicious constructs involving reverse scalar storage order.

       --WWssiizzeedd--ddeeaallllooccaattiioonn (C++ and Objective-C++ only)
           Warn about a definition of an unsized deallocation function

                   void operator delete (void *) noexcept;
                   void operator delete[] (void *) noexcept;

           without a definition of the corresponding sized deallocation function

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           or vice versa.  Enabled by --WWeexxttrraa along with --ffssiizzeedd--ddeeaallllooccaattiioonn.

       --WWssiizzeeooff--ppooiinntteerr--ddiivv
           Warn for suspicious divisions of two sizeof expressions that divide the pointer
           size by the element size, which is the usual way to compute the array size but
           won't work out correctly with pointers.  This warning warns e.g. about "sizeof
           (ptr) / sizeof (ptr[0])" if "ptr" is not an array, but a pointer.  This warning is
           enabled by --WWaallll.

       --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss
           Warn for suspicious length parameters to certain string and memory built-in
           functions if the argument uses "sizeof".  This warning triggers for example for
           "memset (ptr, 0, sizeof (ptr));" if "ptr" is not an array, but a pointer, and
           suggests a possible fix, or about "memcpy (&foo, ptr, sizeof (&foo));".
           --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss also warns about calls to bounded string copy functions
           like "strncat" or "strncpy" that specify as the bound a "sizeof" expression of the
           source array.  For example, in the following function the call to "strncat"
           specifies the size of the source string as the bound.  That is almost certainly a
           mistake and so the call is diagnosed.

                   void make_file (const char *name)
                   {
                     char path[PATH_MAX];
                     strncpy (path, name, sizeof path - 1);
                     strncat (path, ".text", sizeof ".text");
                     ...
                   }

           The --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss option is enabled by --WWaallll.

       --WWssiizzeeooff--aarrrraayy--aarrgguummeenntt
           Warn when the "sizeof" operator is applied to a parameter that is declared as an
           array in a function definition.  This warning is enabled by default for C and C++
           programs.

       --WWmmeemmsseett--eelltt--ssiizzee
           Warn for suspicious calls to the "memset" built-in function, if the first argument
           references an array, and the third argument is a number equal to the number of
           elements, but not equal to the size of the array in memory.  This indicates that
           the user has omitted a multiplication by the element size.  This warning is enabled
           by --WWaallll.

       --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss
           Warn for suspicious calls to the "memset" built-in function where the second
           argument is not zero and the third argument is zero.  For example, the call "memset
           (buf, sizeof buf, 0)" is diagnosed because "memset (buf, 0, sizeof buf)" was meant
           instead.  The diagnostic is only emitted if the third argument is a literal zero.
           Otherwise, if it is an expression that is folded to zero, or a cast of zero to some
           type, it is far less likely that the arguments have been mistakenly transposed and
           no warning is emitted.  This warning is enabled by --WWaallll.

       --WWaaddddrreessss
           Warn about suspicious uses of memory addresses. These include using the address of
           a function in a conditional expression, such as "void func(void); if (func)", and
           comparisons against the memory address of a string literal, such as "if (x ==
           "abc")".  Such uses typically indicate a programmer error: the address of a
           function always evaluates to true, so their use in a conditional usually indicate
           that the programmer forgot the parentheses in a function call; and comparisons
           against string literals result in unspecified behavior and are not portable in C,
           so they usually indicate that the programmer intended to use "strcmp".  This
           warning is enabled by --WWaallll.

       --WWaaddddrreessss--ooff--ppaacckkeedd--mmeemmbbeerr
           Warn when the address of packed member of struct or union is taken, which usually
           results in an unaligned pointer value.  This is enabled by default.

       --WWllooggiiccaall--oopp
           Warn about suspicious uses of logical operators in expressions.  This includes
           using logical operators in contexts where a bit-wise operator is likely to be
           expected.  Also warns when the operands of a logical operator are the same:

                   extern int a;
                   if (a < 0 && a < 0) { ... }

       --WWllooggiiccaall--nnoott--ppaarreenntthheesseess
           Warn about logical not used on the left hand side operand of a comparison.  This
           option does not warn if the right operand is considered to be a boolean expression.
           Its purpose is to detect suspicious code like the following:

                   int a;
                   ...
                   if (!a > 1) { ... }

           It is possible to suppress the warning by wrapping the LHS into parentheses:

                   if ((!a) > 1) { ... }

           This warning is enabled by --WWaallll.

       --WWaaggggrreeggaattee--rreettuurrnn
           Warn if any functions that return structures or unions are defined or called.  (In
           languages where you can return an array, this also elicits a warning.)

       --WWnnoo--aaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if in a loop with constant number of iterations the compiler detects undefined
           behavior in some statement during one or more of the iterations.

       --WWnnoo--aattttrriibbuutteess
           Do not warn if an unexpected "__attribute__" is used, such as unrecognized
           attributes, function attributes applied to variables, etc.  This does not stop
           errors for incorrect use of supported attributes.

       --WWnnoo--bbuuiillttiinn--ddeeccllaarraattiioonn--mmiissmmaattcchh
           Warn if a built-in function is declared with an incompatible signature or as a non-
           function, or when a built-in function declared with a type that does not include a
           prototype is called with arguments whose promoted types do not match those expected
           by the function.  When --WWeexxttrraa is specified, also warn when a built-in function
           that takes arguments is declared without a prototype.  The
           --WWnnoo--bbuuiillttiinn--ddeeccllaarraattiioonn--mmiissmmaattcchh warning is enabled by default.  To avoid the
           warning include the appropriate header to bring the prototypes of built-in
           functions into scope.

           For example, the call to "memset" below is diagnosed by the warning because the
           function expects a value of type "size_t" as its argument but the type of 32 is
           "int".  With --WWeexxttrraa, the declaration of the function is diagnosed as well.

                   extern void* memset ();
                   void f (void *d)
                   {
                     memset (d, '\0', 32);
                   }

       --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd
           Do not warn if certain built-in macros are redefined.  This suppresses warnings for
           redefinition of "__TIMESTAMP__", "__TIME__", "__DATE__", "__FILE__", and
           "__BASE_FILE__".

       --WWssttrriicctt--pprroottoottyyppeess (C and Objective-C only)
           Warn if a function is declared or defined without specifying the argument types.
           (An old-style function definition is permitted without a warning if preceded by a
           declaration that specifies the argument types.)

       --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C and Objective-C only)
           Warn for obsolescent usages, according to the C Standard, in a declaration. For
           example, warn if storage-class specifiers like "static" are not the first things in
           a declaration.  This warning is also enabled by --WWeexxttrraa.

       --WWoolldd--ssttyyllee--ddeeffiinniittiioonn (C and Objective-C only)
           Warn if an old-style function definition is used.  A warning is given even if there
           is a previous prototype.

       --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C and Objective-C only)
           A function parameter is declared without a type specifier in K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by --WWeexxttrraa.

       --WWmmiissssiinngg--pprroottoottyyppeess (C and Objective-C only)
           Warn if a global function is defined without a previous prototype declaration.
           This warning is issued even if the definition itself provides a prototype.  Use
           this option to detect global functions that do not have a matching prototype
           declaration in a header file.  This option is not valid for C++ because all
           function declarations provide prototypes and a non-matching declaration declares an
           overload rather than conflict with an earlier declaration.  Use
           --WWmmiissssiinngg--ddeeccllaarraattiioonnss to detect missing declarations in C++.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           Warn if a global function is defined without a previous declaration.  Do so even if
           the definition itself provides a prototype.  Use this option to detect global
           functions that are not declared in header files.  In C, no warnings are issued for
           functions with previous non-prototype declarations; use --WWmmiissssiinngg--pprroottoottyyppeess to
           detect missing prototypes.  In C++, no warnings are issued for function templates,
           or for inline functions, or for functions in anonymous namespaces.

       --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           Warn if a structure's initializer has some fields missing.  For example, the
           following code causes such a warning, because "x.h" is implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated initializers, so the following
           modification does not trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           In C this option does not warn about the universal zero initializer {{ 00 }}:

                   struct s { int f, g, h; };
                   struct s x = { 0 };

           Likewise, in C++ this option does not warn about the empty { } initializer, for
           example:

                   struct s { int f, g, h; };
                   s x = { };

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings without this
           one, use --WWeexxttrraa --WWnnoo--mmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss.

       --WWnnoo--mmuullttiicchhaarr
           Do not warn if a multicharacter constant (''FFOOOOFF'') is used.  Usually they indicate a
           typo in the user's code, as they have implementation-defined values, and should not
           be used in portable code.

       --WWnnoorrmmaalliizzeedd==[nnoonnee|iidd|nnffcc|nnffkkcc]
           In ISO C and ISO C++, two identifiers are different if they are different sequences
           of characters.  However, sometimes when characters outside the basic ASCII
           character set are used, you can have two different character sequences that look
           the same.  To avoid confusion, the ISO 10646 standard sets out some _n_o_r_m_a_l_i_z_a_t_i_o_n
           _r_u_l_e_s which when applied ensure that two sequences that look the same are turned
           into the same sequence.  GCC can warn you if you are using identifiers that have
           not been normalized; this option controls that warning.

           There are four levels of warning supported by GCC.  The default is
           --WWnnoorrmmaalliizzeedd==nnffcc, which warns about any identifier that is not in the ISO 10646 "C"
           normalized form, _N_F_C.  NFC is the recommended form for most uses.  It is equivalent
           to --WWnnoorrmmaalliizzeedd.

           Unfortunately, there are some characters allowed in identifiers by ISO C and ISO
           C++ that, when turned into NFC, are not allowed in identifiers.  That is, there's
           no way to use these symbols in portable ISO C or C++ and have all your identifiers
           in NFC.  --WWnnoorrmmaalliizzeedd==iidd suppresses the warning for these characters.  It is hoped
           that future versions of the standards involved will correct this, which is why this
           option is not the default.

           You can switch the warning off for all characters by writing --WWnnoorrmmaalliizzeedd==nnoonnee or
           --WWnnoo--nnoorrmmaalliizzeedd.  You should only do this if you are using some other normalization
           scheme (like "D"), because otherwise you can easily create bugs that are literally
           impossible to see.

           Some characters in ISO 10646 have distinct meanings but look identical in some
           fonts or display methodologies, especially once formatting has been applied.  For
           instance "\u207F", "SUPERSCRIPT LATIN SMALL LETTER N", displays just like a regular
           "n" that has been placed in a superscript.  ISO 10646 defines the _N_F_K_C
           normalization scheme to convert all these into a standard form as well, and GCC
           warns if your code is not in NFKC if you use --WWnnoorrmmaalliizzeedd==nnffkkcc.  This warning is
           comparable to warning about every identifier that contains the letter O because it
           might be confused with the digit 0, and so is not the default, but may be useful as
           a local coding convention if the programming environment cannot be fixed to display
           these characters distinctly.

       --WWnnoo--aattttrriibbuuttee--wwaarrnniinngg
           Do not warn about usage of functions declared with "warning" attribute.  By
           default, this warning is enabled.  --WWnnoo--aattttrriibbuuttee--wwaarrnniinngg can be used to disable
           the warning or --WWnnoo--eerrrroorr==aattttrriibbuuttee--wwaarrnniinngg can be used to disable the error when
           compiled with --WWeerrrroorr flag.

       --WWnnoo--ddeepprreeccaatteedd
           Do not warn about usage of deprecated features.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           Do not warn about uses of functions, variables, and types marked as deprecated by
           using the "deprecated" attribute.

       --WWnnoo--oovveerrffllooww
           Do not warn about compile-time overflow in constant expressions.

       --WWnnoo--ooddrr
           Warn about One Definition Rule violations during link-time optimization.  Requires
           --ffllttoo--ooddrr--ttyyppee--mmeerrggiinngg to be enabled.  Enabled by default.

       --WWooppeennmmpp--ssiimmdd
           Warn if the vectorizer cost model overrides the OpenMP simd directive set by user.
           The --ffssiimmdd--ccoosstt--mmooddeell==uunnlliimmiitteedd option can be used to relax the cost model.

       --WWoovveerrrriiddee--iinniitt (C and Objective-C only)
           Warn if an initialized field without side effects is overridden when using
           designated initializers.

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings without this
           one, use --WWeexxttrraa --WWnnoo--oovveerrrriiddee--iinniitt.

       --WWoovveerrrriiddee--iinniitt--ssiiddee--eeffffeeccttss (C and Objective-C only)
           Warn if an initialized field with side effects is overridden when using designated
           initializers.  This warning is enabled by default.

       --WWppaacckkeedd
           Warn if a structure is given the packed attribute, but the packed attribute has no
           effect on the layout or size of the structure.  Such structures may be mis-aligned
           for little benefit.  For instance, in this code, the variable "f.x" in "struct bar"
           is misaligned even though "struct bar" does not itself have the packed attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt
           The 4.1, 4.2 and 4.3 series of GCC ignore the "packed" attribute on bit-fields of
           type "char".  This has been fixed in GCC 4.4 but the change can lead to differences
           in the structure layout.  GCC informs you when the offset of such a field has
           changed in GCC 4.4.  For example there is no longer a 4-bit padding between field
           "a" and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use --WWnnoo--ppaacckkeedd--bbiittffiieelldd--ccoommppaatt to disable
           this warning.

       --WWppaacckkeedd--nnoott--aalliiggnneedd (C, C++, Objective-C and Objective-C++ only)
           Warn if a structure field with explicitly specified alignment in a packed struct or
           union is misaligned.  For example, a warning will be issued on "struct S", like,
           "warning: alignment 1 of 'struct S' is less than 8", in this code:

                   struct __attribute__ ((aligned (8))) S8 { char a[8]; };
                   struct __attribute__ ((packed)) S {
                     struct S8 s8;
                   };

           This warning is enabled by --WWaallll.

       --WWppaaddddeedd
           Warn if padding is included in a structure, either to align an element of the
           structure or to align the whole structure.  Sometimes when this happens it is
           possible to rearrange the fields of the structure to reduce the padding and so make
           the structure smaller.

       --WWrreedduunnddaanntt--ddeeccllss
           Warn if anything is declared more than once in the same scope, even in cases where
           multiple declaration is valid and changes nothing.

       --WWnnoo--rreessttrriicctt
           Warn when an object referenced by a "restrict"-qualified parameter (or, in C++, a
           "__restrict"-qualified parameter) is aliased by another argument, or when copies
           between such objects overlap.  For example, the call to the "strcpy" function below
           attempts to truncate the string by replacing its initial characters with the last
           four.  However, because the call writes the terminating NUL into "a[4]", the copies
           overlap and the call is diagnosed.

                   void foo (void)
                   {
                     char a[] = "abcd1234";
                     strcpy (a, a + 4);
                     ...
                   }

           The --WWrreessttrriicctt option detects some instances of simple overlap even without
           optimization but works best at --OO22 and above.  It is included in --WWaallll.

       --WWnneesstteedd--eexxtteerrnnss (C and Objective-C only)
           Warn if an "extern" declaration is encountered within a function.

       --WWnnoo--iinnhheerriitteedd--vvaarriiaaddiicc--ccttoorr
           Suppress warnings about use of C++11 inheriting constructors when the base class
           inherited from has a C variadic constructor; the warning is on by default because
           the ellipsis is not inherited.

       --WWiinnlliinnee
           Warn if a function that is declared as inline cannot be inlined.  Even with this
           option, the compiler does not warn about failures to inline functions declared in
           system headers.

           The compiler uses a variety of heuristics to determine whether or not to inline a
           function.  For example, the compiler takes into account the size of the function
           being inlined and the amount of inlining that has already been done in the current
           function.  Therefore, seemingly insignificant changes in the source program can
           cause the warnings produced by --WWiinnlliinnee to appear or disappear.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ and Objective-C++ only)
           Suppress warnings from applying the "offsetof" macro to a non-POD type.  According
           to the 2014 ISO C++ standard, applying "offsetof" to a non-standard-layout type is
           undefined.  In existing C++ implementations, however, "offsetof" typically gives
           meaningful results.  This flag is for users who are aware that they are writing
           nonportable code and who have deliberately chosen to ignore the warning about it.

           The restrictions on "offsetof" may be relaxed in a future version of the C++
           standard.

       --WWiinntt--iinn--bbooooll--ccoonntteexxtt
           Warn for suspicious use of integer values where boolean values are expected, such
           as conditional expressions (?:) using non-boolean integer constants in boolean
           context, like "if (a <= b ? 2 : 3)".  Or left shifting of signed integers in
           boolean context, like "for (a = 0; 1 << a; a++);".  Likewise for all kinds of
           multiplications regardless of the data type.  This warning is enabled by --WWaallll.

       --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt
           Suppress warnings from casts to pointer type of an integer of a different size. In
           C++, casting to a pointer type of smaller size is an error. WWiinntt--ttoo--ppooiinntteerr--ccaasstt is
           enabled by default.

       --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt (C and Objective-C only)
           Suppress warnings from casts from a pointer to an integer type of a different size.

       --WWiinnvvaalliidd--ppcchh
           Warn if a precompiled header is found in the search path but cannot be used.

       --WWlloonngg--lloonngg
           Warn if "long long" type is used.  This is enabled by either --WWppeeddaannttiicc or
           --WWttrraaddiittiioonnaall in ISO C90 and C++98 modes.  To inhibit the warning messages, use
           --WWnnoo--lloonngg--lloonngg.

       --WWvvaarriiaaddiicc--mmaaccrrooss
           Warn if variadic macros are used in ISO C90 mode, or if the GNU alternate syntax is
           used in ISO C99 mode.  This is enabled by either --WWppeeddaannttiicc or --WWttrraaddiittiioonnaall.  To
           inhibit the warning messages, use --WWnnoo--vvaarriiaaddiicc--mmaaccrrooss.

       --WWvvaarraarrggss
           Warn upon questionable usage of the macros used to handle variable arguments like
           "va_start".  This is default.  To inhibit the warning messages, use --WWnnoo--vvaarraarrggss.

       --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee
           Warn if vector operation is not implemented via SIMD capabilities of the
           architecture.  Mainly useful for the performance tuning.  Vector operation can be
           implemented "piecewise", which means that the scalar operation is performed on
           every vector element; "in parallel", which means that the vector operation is
           implemented using scalars of wider type, which normally is more performance
           efficient; and "as a single scalar", which means that vector fits into a scalar
           type.

       --WWnnoo--vviirrttuuaall--mmoovvee--aassssiiggnn
           Suppress warnings about inheriting from a virtual base with a non-trivial C++11
           move assignment operator.  This is dangerous because if the virtual base is
           reachable along more than one path, it is moved multiple times, which can mean both
           objects end up in the moved-from state.  If the move assignment operator is written
           to avoid moving from a moved-from object, this warning can be disabled.

       --WWvvllaa
           Warn if a variable-length array is used in the code.  --WWnnoo--vvllaa prevents the
           --WWppeeddaannttiicc warning of the variable-length array.

       --WWvvllaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e
           If this option is used, the compiler will warn for declarations of variable-length
           arrays whose size is either unbounded, or bounded by an argument that allows the
           array size to exceed _b_y_t_e_-_s_i_z_e bytes.  This is similar to how
           --WWaallllooccaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e works, but with variable-length arrays.

           Note that GCC may optimize small variable-length arrays of a known value into plain
           arrays, so this warning may not get triggered for such arrays.

           --WWvvllaa--llaarrggeerr--tthhaann==PPTTRRDDIIFFFF__MMAAXX is enabled by default but is typically only effective
           when --ffttrreeee--vvrrpp is active (default for --OO22 and above).

           See also --WWaallllooccaa--llaarrggeerr--tthhaann==_b_y_t_e_-_s_i_z_e.

       --WWnnoo--vvllaa--llaarrggeerr--tthhaann
           Disable --WWvvllaa--llaarrggeerr--tthhaann== warnings.  The option is equivalent to
           --WWvvllaa--llaarrggeerr--tthhaann==SSIIZZEE__MMAAXX or larger.

       --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           Warn if a register variable is declared volatile.  The volatile modifier does not
           inhibit all optimizations that may eliminate reads and/or writes to register
           variables.  This warning is enabled by --WWaallll.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           Warn if a requested optimization pass is disabled.  This warning does not generally
           indicate that there is anything wrong with your code; it merely indicates that
           GCC's optimizers are unable to handle the code effectively.  Often, the problem is
           that your code is too big or too complex; GCC refuses to optimize programs when the
           optimization itself is likely to take inordinate amounts of time.

       --WWppooiinntteerr--ssiiggnn (C and Objective-C only)
           Warn for pointer argument passing or assignment with different signedness.  This
           option is only supported for C and Objective-C.  It is implied by --WWaallll and by
           --WWppeeddaannttiicc, which can be disabled with --WWnnoo--ppooiinntteerr--ssiiggnn.

       --WWssttaacckk--pprrootteeccttoorr
           This option is only active when --ffssttaacckk--pprrootteeccttoorr is active.  It warns about
           functions that are not protected against stack smashing.

       --WWoovveerrlleennggtthh--ssttrriinnggss
           Warn about string constants that are longer than the "minimum maximum" length
           specified in the C standard.  Modern compilers generally allow string constants
           that are much longer than the standard's minimum limit, but very portable programs
           should avoid using longer strings.

           The limit applies _a_f_t_e_r string constant concatenation, and does not count the
           trailing NUL.  In C90, the limit was 509 characters; in C99, it was raised to 4095.
           C++98 does not specify a normative minimum maximum, so we do not diagnose
           overlength strings in C++.

           This option is implied by --WWppeeddaannttiicc, and can be disabled with
           --WWnnoo--oovveerrlleennggtthh--ssttrriinnggss.

       --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss (C and Objective-C only)
           Issue a warning for any floating constant that does not have a suffix.  When used
           together with --WWssyysstteemm--hheeaaddeerrss it warns about such constants in system header
           files.  This can be useful when preparing code to use with the
           "FLOAT_CONST_DECIMAL64" pragma from the decimal floating-point extension to C99.

       --WWnnoo--ddeessiiggnnaatteedd--iinniitt (C and Objective-C only)
           Suppress warnings when a positional initializer is used to initialize a structure
           that has been marked with the "designated_init" attribute.

       --WWhhssaa
           Issue a warning when HSAIL cannot be emitted for the compiled function or OpenMP
           construct.

   OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm
       To tell GCC to emit extra information for use by a debugger, in almost all cases you
       need only to add --gg to your other options.

       GCC allows you to use --gg with --OO.  The shortcuts taken by optimized code may
       occasionally be surprising: some variables you declared may not exist at all; flow of
       control may briefly move where you did not expect it; some statements may not be
       executed because they compute constant results or their values are already at hand;
       some statements may execute in different places because they have been moved out of
       loops.  Nevertheless it is possible to debug optimized output.  This makes it
       reasonable to use the optimizer for programs that might have bugs.

       If you are not using some other optimization option, consider using --OOgg with --gg.  With
       no --OO option at all, some compiler passes that collect information useful for debugging
       do not run at all, so that --OOgg may result in a better debugging experience.

       --gg  Produce debugging information in the operating system's native format (stabs, COFF,
           XCOFF, or DWARF).  GDB can work with this debugging information.

           On most systems that use stabs format, --gg enables use of extra debugging
           information that only GDB can use; this extra information makes debugging work
           better in GDB but probably makes other debuggers crash or refuse to read the
           program.  If you want to control for certain whether to generate the extra
           information, use --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff, or --ggvvmmss (see below).

       --ggggddbb
           Produce debugging information for use by GDB.  This means to use the most
           expressive format available (DWARF, stabs, or the native format if neither of those
           are supported), including GDB extensions if at all possible.

       --ggddwwaarrff
       --ggddwwaarrff--_v_e_r_s_i_o_n
           Produce debugging information in DWARF format (if that is supported).  The value of
           _v_e_r_s_i_o_n may be either 2, 3, 4 or 5; the default version for most targets is 4.
           DWARF Version 5 is only experimental.

           Note that with DWARF Version 2, some ports require and always use some non-
           conflicting DWARF 3 extensions in the unwind tables.

           Version 4 may require GDB 7.0 and --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss for maximum benefit.

           GCC no longer supports DWARF Version 1, which is substantially different than
           Version 2 and later.  For historical reasons, some other DWARF-related options such
           as --ffnnoo--ddwwaarrff22--ccffii--aassmm) retain a reference to DWARF Version 2 in their names, but
           apply to all currently-supported versions of DWARF.

       --ggssttaabbss
           Produce debugging information in stabs format (if that is supported), without GDB
           extensions.  This is the format used by DBX on most BSD systems.  On MIPS, Alpha
           and System V Release 4 systems this option produces stabs debugging output that is
           not understood by DBX.  On System V Release 4 systems this option requires the GNU
           assembler.

       --ggssttaabbss++
           Produce debugging information in stabs format (if that is supported), using GNU
           extensions understood only by the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to read the program.

       --ggxxccooffff
           Produce debugging information in XCOFF format (if that is supported).  This is the
           format used by the DBX debugger on IBM RS/6000 systems.

       --ggxxccooffff++
           Produce debugging information in XCOFF format (if that is supported), using GNU
           extensions understood only by the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to read the program, and may
           cause assemblers other than the GNU assembler (GAS) to fail with an error.

       --ggvvmmss
           Produce debugging information in Alpha/VMS debug format (if that is supported).
           This is the format used by DEBUG on Alpha/VMS systems.

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
       --ggxxccooffff_l_e_v_e_l
       --ggvvmmss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to specify how much information.
           The default level is 2.

           Level 0 produces no debug information at all.  Thus, --gg00 negates --gg.

           Level 1 produces minimal information, enough for making backtraces in parts of the
           program that you don't plan to debug.  This includes descriptions of functions and
           external variables, and line number tables, but no information about local
           variables.

           Level 3 includes extra information, such as all the macro definitions present in
           the program.  Some debuggers support macro expansion when you use --gg33.

           If you use multiple --gg options, with or without level numbers, the last such option
           is the one that is effective.

           --ggddwwaarrff does not accept a concatenated debug level, to avoid confusion with
           --ggddwwaarrff--_l_e_v_e_l.  Instead use an additional --gg_l_e_v_e_l option to change the debug level
           for DWARF.

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           Produce debugging information in stabs format (if that is supported), for only
           symbols that are actually used.

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           Instead of emitting debugging information for a C++ class in only one object file,
           emit it in all object files using the class.  This option should be used only with
           debuggers that are unable to handle the way GCC normally emits debugging
           information for classes because using this option increases the size of debugging
           information by as much as a factor of two.

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           Direct the linker to not merge together strings in the debugging information that
           are identical in different object files.  Merging is not supported by all
           assemblers or linkers.  Merging decreases the size of the debug information in the
           output file at the cost of increasing link processing time.  Merging is enabled by
           default.

       --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files residing in directory _o_l_d, record debugging information
           describing them as if the files resided in directory _n_e_w instead.  This can be used
           to replace a build-time path with an install-time path in the debug info.  It can
           also be used to change an absolute path to a relative path by using _. for _n_e_w.
           This can give more reproducible builds, which are location independent, but may
           require an extra command to tell GDB where to find the source files. See also
           --ffffiillee--pprreeffiixx--mmaapp.

       --ffvvaarr--ttrraacckkiinngg
           Run variable tracking pass.  It computes where variables are stored at each
           position in code.  Better debugging information is then generated (if the debugging
           information format supports this information).

           It is enabled by default when compiling with optimization (--OOss, --OO, --OO22, ...),
           debugging information (--gg) and the debug info format supports it.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           Annotate assignments to user variables early in the compilation and attempt to
           carry the annotations over throughout the compilation all the way to the end, in an
           attempt to improve debug information while optimizing.  Use of --ggddwwaarrff--44 is
           recommended along with it.

           It can be enabled even if var-tracking is disabled, in which case annotations are
           created and maintained, but discarded at the end.  By default, this flag is enabled
           together with --ffvvaarr--ttrraacckkiinngg, except when selective scheduling is enabled.

       --ggsspplliitt--ddwwaarrff
           Separate as much DWARF debugging information as possible into a separate output
           file with the extension _._d_w_o.  This option allows the build system to avoid linking
           files with debug information.  To be useful, this option requires a debugger
           capable of reading _._d_w_o files.

       --ggddeessccrriibbee--ddiieess
           Add description attributes to some DWARF DIEs that have no name attribute, such as
           artificial variables, external references and call site parameter DIEs.

       --ggppuubbnnaammeess
           Generate DWARF ".debug_pubnames" and ".debug_pubtypes" sections.

       --ggggnnuu--ppuubbnnaammeess
           Generate ".debug_pubnames" and ".debug_pubtypes" sections in a format suitable for
           conversion into a GDB index.  This option is only useful with a linker that can
           produce GDB index version 7.

       --ffddeebbuugg--ttyyppeess--sseeccttiioonn
           When using DWARF Version 4 or higher, type DIEs can be put into their own
           ".debug_types" section instead of making them part of the ".debug_info" section.
           It is more efficient to put them in a separate comdat section since the linker can
           then remove duplicates.  But not all DWARF consumers support ".debug_types"
           sections yet and on some objects ".debug_types" produces larger instead of smaller
           debugging information.

       --ggrreeccoorrdd--ggcccc--sswwiittcchheess
       --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command-line options used to invoke the compiler that may
           affect code generation to be appended to the DW_AT_producer attribute in DWARF
           debugging information.  The options are concatenated with spaces separating them
           from each other and from the compiler version.  It is enabled by default.  See also
           --ffrreeccoorrdd--ggcccc--sswwiittcchheess for another way of storing compiler options into the object
           file.

       --ggssttrriicctt--ddwwaarrff
           Disallow using extensions of later DWARF standard version than selected with
           --ggddwwaarrff--_v_e_r_s_i_o_n.  On most targets using non-conflicting DWARF extensions from later
           standard versions is allowed.

       --ggnnoo--ssttrriicctt--ddwwaarrff
           Allow using extensions of later DWARF standard version than selected with
           --ggddwwaarrff--_v_e_r_s_i_o_n.

       --ggaass--lloocc--ssuuppppoorrtt
           Inform the compiler that the assembler supports ".loc" directives.  It may then use
           them for the assembler to generate DWARF2+ line number tables.

           This is generally desirable, because assembler-generated line-number tables are a
           lot more compact than those the compiler can generate itself.

           This option will be enabled by default if, at GCC configure time, the assembler was
           found to support such directives.

       --ggnnoo--aass--lloocc--ssuuppppoorrtt
           Force GCC to generate DWARF2+ line number tables internally, if DWARF2+ line number
           tables are to be generated.

       ggaass--llooccvviieeww--ssuuppppoorrtt
           Inform the compiler that the assembler supports "view" assignment and reset
           assertion checking in ".loc" directives.

           This option will be enabled by default if, at GCC configure time, the assembler was
           found to support them.

       ggnnoo--aass--llooccvviieeww--ssuuppppoorrtt
           Force GCC to assign view numbers internally, if --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss are
           explicitly requested.

       --ggccoolluummnn--iinnffoo
       --ggnnoo--ccoolluummnn--iinnffoo
           Emit location column information into DWARF debugging information, rather than just
           file and line.  This option is enabled by default.

       --ggssttaatteemmeenntt--ffrroonnttiieerrss
       --ggnnoo--ssttaatteemmeenntt--ffrroonnttiieerrss
           This option causes GCC to create markers in the internal representation at the
           beginning of statements, and to keep them roughly in place throughout compilation,
           using them to guide the output of "is_stmt" markers in the line number table.  This
           is enabled by default when compiling with optimization (--OOss, --OO, --OO22, ...), and
           outputting DWARF 2 debug information at the normal level.

       --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss
       --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss==iinnccoommppaatt55
       --ggnnoo--vvaarriiaabbllee--llooccaattiioonn--vviieewwss
           Augment variable location lists with progressive view numbers implied from the line
           number table.  This enables debug information consumers to inspect state at certain
           points of the program, even if no instructions associated with the corresponding
           source locations are present at that point.  If the assembler lacks support for
           view numbers in line number tables, this will cause the compiler to emit the line
           number table, which generally makes them somewhat less compact.  The augmented line
           number tables and location lists are fully backward-compatible, so they can be
           consumed by debug information consumers that are not aware of these augmentations,
           but they won't derive any benefit from them either.

           This is enabled by default when outputting DWARF 2 debug information at the normal
           level, as long as there is assembler support, --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss is enabled
           and --ggssttrriicctt--ddwwaarrff is not.  When assembler support is not available, this may still
           be enabled, but it will force GCC to output internal line number tables, and if
           --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss is not enabled, that will most certainly lead to
           silently mismatching location views.

           There is a proposed representation for view numbers that is not backward compatible
           with the location list format introduced in DWARF 5, that can be enabled with
           --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss==iinnccoommppaatt55.  This option may be removed in the future, is
           only provided as a reference implementation of the proposed representation.  Debug
           information consumers are not expected to support this extended format, and they
           would be rendered unable to decode location lists using it.

       --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss
       --ggnnoo--iinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss
           Attempt to determine location views that can be omitted from location view lists.
           This requires the compiler to have very accurate insn length estimates, which isn't
           always the case, and it may cause incorrect view lists to be generated silently
           when using an assembler that does not support location view lists.  The GNU
           assembler will flag any such error as a "view number mismatch".  This is only
           enabled on ports that define a reliable estimation function.

       --ggiinnlliinnee--ppooiinnttss
       --ggnnoo--iinnlliinnee--ppooiinnttss
           Generate extended debug information for inlined functions.  Location view tracking
           markers are inserted at inlined entry points, so that address and view numbers can
           be computed and output in debug information.  This can be enabled independently of
           location views, in which case the view numbers won't be output, but it can only be
           enabled along with statement frontiers, and it is only enabled by default if
           location views are enabled.

       --ggzz[==_t_y_p_e]
           Produce compressed debug sections in DWARF format, if that is supported.  If _t_y_p_e
           is not given, the default type depends on the capabilities of the assembler and
           linker used.  _t_y_p_e may be one of nnoonnee (don't compress debug sections), zzlliibb (use
           zlib compression in ELF gABI format), or zzlliibb--ggnnuu (use zlib compression in
           traditional GNU format).  If the linker doesn't support writing compressed debug
           sections, the option is rejected.  Otherwise, if the assembler does not support
           them, --ggzz is silently ignored when producing object files.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           Emit debug information for struct-like types only when the base name of the
           compilation source file matches the base name of file in which the struct is
           defined.

           This option substantially reduces the size of debugging information, but at
           significant potential loss in type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd for a less aggressive option.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more detailed control.

           This option works only with DWARF debug output.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           Emit debug information for struct-like types only when the base name of the
           compilation source file matches the base name of file in which the type is defined,
           unless the struct is a template or defined in a system header.

           This option significantly reduces the size of debugging information, with some
           potential loss in type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy for a more aggressive option.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more detailed control.

           This option works only with DWARF debug output.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t]
           Specify the struct-like types for which the compiler generates debug information.
           The intent is to reduce duplicate struct debug information between different object
           files within the same program.

           This option is a detailed version of --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd and
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy, which serves for most needs.

           A specification has the syntax[ddiirr::|iinndd::][oorrdd::|ggeenn::](aannyy|ssyyss|bbaassee|nnoonnee)

           The optional first word limits the specification to structs that are used directly
           (ddiirr::) or used indirectly (iinndd::).  A struct type is used directly when it is the
           type of a variable, member.  Indirect uses arise through pointers to structs.  That
           is, when use of an incomplete struct is valid, the use is indirect.  An example is
           ssttrruucctt oonnee ddiirreecctt;; ssttrruucctt ttwwoo ** iinnddiirreecctt;;.

           The optional second word limits the specification to ordinary structs (oorrdd::) or
           generic structs (ggeenn::).  Generic structs are a bit complicated to explain.  For
           C++, these are non-explicit specializations of template classes, or non-template
           classes within the above.  Other programming languages have generics, but
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd does not yet implement them.

           The third word specifies the source files for those structs for which the compiler
           should emit debug information.  The values nnoonnee and aannyy have the normal meaning.
           The value bbaassee means that the base of name of the file in which the type
           declaration appears must match the base of the name of the main compilation file.
           In practice, this means that when compiling _f_o_o_._c, debug information is generated
           for types declared in that file and _f_o_o_._h, but not other header files.  The value
           ssyyss means those types satisfying bbaassee or declared in system or compiler headers.

           You may need to experiment to determine the best settings for your application.

           The default is --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd==aallll.

           This option works only with DWARF debug output.

       --ffnnoo--ddwwaarrff22--ccffii--aassmm
           Emit DWARF unwind info as compiler generated ".eh_frame" section instead of using
           GAS ".cfi_*" directives.

       --ffnnoo--eelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           Normally, when producing DWARF output, GCC avoids producing debug symbol output for
           types that are nowhere used in the source file being compiled.  Sometimes it is
           useful to have GCC emit debugging information for all types declared in a
           compilation unit, regardless of whether or not they are actually used in that
           compilation unit, for example if, in the debugger, you want to cast a value to a
           type that is not actually used in your program (but is declared).  More often,
           however, this results in a significant amount of wasted space.

   OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn
       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to reduce the cost of
       compilation and to make debugging produce the expected results.  Statements are
       independent: if you stop the program with a breakpoint between statements, you can then
       assign a new value to any variable or change the program counter to any other statement
       in the function and get exactly the results you expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the performance
       and/or code size at the expense of compilation time and possibly the ability to debug
       the program.

       The compiler performs optimization based on the knowledge it has of the program.
       Compiling multiple files at once to a single output file mode allows the compiler to
       use information gained from all of the files when compiling each of them.

       Not all optimizations are controlled directly by a flag.  Only optimizations that have
       a flag are listed in this section.

       Most optimizations are completely disabled at --OO00 or if an --OO level is not set on the
       command line, even if individual optimization flags are specified.  Similarly, --OOgg
       suppresses many optimization passes.

       Depending on the target and how GCC was configured, a slightly different set of
       optimizations may be enabled at each --OO level than those listed here.  You can invoke
       GCC with --QQ ----hheellpp==ooppttiimmiizzeerrss to find out the exact set of optimizations that are
       enabled at each level.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more time, and a lot more memory
           for a large function.

           With --OO, the compiler tries to reduce code size and execution time, without
           performing any optimizations that take a great deal of compilation time.

           --OO turns on the following optimization flags:

           --ffaauuttoo--iinncc--ddeecc --ffbbrraanncchh--ccoouunntt--rreegg --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss --ffccoommppaarree--eelliimm
           --ffccpprroopp--rreeggiisstteerrss --ffddccee --ffddeeffeerr--ppoopp --ffddeellaayyeedd--bbrraanncchh --ffddssee --ffffoorrwwaarrdd--pprrooppaaggaattee
           --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffiiff--ccoonnvveerrssiioonn --ffiiff--ccoonnvveerrssiioonn22
           --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee --ffiippaa--pprrooffiillee --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--rreeffeerreennccee
           --ffiippaa--rreeffeerreennccee--aaddddrreessssaabbllee --ffmmeerrggee--ccoonnssttaannttss --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           --ffoommiitt--ffrraammee--ppooiinntteerr --ffrreeoorrddeerr--bblloocckkss --ffsshhrriinnkk--wwrraapp --ffsshhrriinnkk--wwrraapp--sseeppaarraattee
           --ffsspplliitt--wwiiddee--ttyyppeess --ffssssaa--bbaacckkpprroopp --ffssssaa--pphhiioopptt --ffttrreeee--bbiitt--ccccpp --ffttrreeee--ccccpp --ffttrreeee--cchh
           --ffttrreeee--ccooaalleessccee--vvaarrss --ffttrreeee--ccooppyy--pprroopp --ffttrreeee--ddccee --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee
           --ffttrreeee--ffoorrwwpprroopp --ffttrreeee--ffrree --ffttrreeee--pphhiipprroopp --ffttrreeee--ppttaa --ffttrreeee--sscceevv--ccpprroopp --ffttrreeee--ssiinnkk
           --ffttrreeee--ssllssrr --ffttrreeee--ssrraa --ffttrreeee--tteerr --ffuunniitt--aatt--aa--ttiimmee

       --OO22 Optimize even more.  GCC performs nearly all supported optimizations that do not
           involve a space-speed tradeoff.  As compared to --OO, this option increases both
           compilation time and the performance of the generated code.

           --OO22 turns on all optimization flags specified by --OO.  It also turns on the
           following optimization flags:

           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss --ffaalliiggnn--llaabbeellss  --ffaalliiggnn--llooooppss --ffccaalllleerr--ssaavveess
           --ffccooddee--hhooiissttiinngg --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffddeevviirrttuuaalliizzee  --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy
           --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffggccssee  --ffggccssee--llmm --ffhhooiisstt--aaddjjaacceenntt--llooaaddss
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiinnddiirreecctt--iinnlliinniinngg --ffiippaa--bbiitt--ccpp  --ffiippaa--ccpp  --ffiippaa--iiccff
           --ffiippaa--rraa  --ffiippaa--ssrraa  --ffiippaa--vvrrpp --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee --ffllrraa--rreemmaatt
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffooppttiimmiizzee--ssttrrlleenn --ffppaarrttiiaall--iinnlliinniinngg --ffppeeeepphhoollee22
           --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==ssttcc --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn  --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22 --ffsscchheedd--iinntteerrbblloocckk
           --ffsscchheedd--ssppeecc --ffssttoorree--mmeerrggiinngg --ffssttrriicctt--aalliiaassiinngg --fftthhrreeaadd--jjuummppss
           --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee --ffttrreeee--pprree --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn  --ffttrreeee--ttaaiill--mmeerrggee
           --ffttrreeee--vvrrpp

           Please note the warning under --ffggccssee about invoking --OO22 on programs that use
           computed gotos.

           NOTE: In Ubuntu 8.10 and later versions, --DD__FFOORRTTIIFFYY__SSOOUURRCCEE==22 is set by default, and
           is activated when --OO is set to 2 or higher.  This enables additional compile-time
           and run-time checks for several libc functions.  To disable, specify either
           --UU__FFOORRTTIIFFYY__SSOOUURRCCEE or --DD__FFOORRTTIIFFYY__SSOOUURRCCEE==00.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations specified by --OO22 and also turns
           on the following optimization flags:

           --ffggccssee--aafftteerr--rreellooaadd --ffiinnlliinnee--ffuunnccttiioonnss --ffiippaa--ccpp--cclloonnee --fflloooopp--iinntteerrcchhaannggee
           --fflloooopp--uunnrroollll--aanndd--jjaamm --ffppeeeell--llooooppss --ffpprreeddiiccttiivvee--ccoommmmoonniinngg --ffsspplliitt--ppaatthhss
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn --ffttrreeee--lloooopp--vveeccttoorriizzee
           --ffttrreeee--ppaarrttiiaall--pprree --ffttrreeee--ssllpp--vveeccttoorriizzee --ffuunnsswwiittcchh--llooooppss --ffvveecctt--ccoosstt--mmooddeell
           --ffvveerrssiioonn--llooooppss--ffoorr--ssttrriiddeess

       --OO00 Reduce compilation time and make debugging produce the expected results.  This is
           the default.

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations except those that often
           increase code size:

           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss --ffaalliiggnn--llaabbeellss  --ffaalliiggnn--llooooppss
           --ffpprreeffeettcchh--lloooopp--aarrrraayyss  --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==ssttcc

           It also enables --ffiinnlliinnee--ffuunnccttiioonnss, causes the compiler to tune for code size
           rather than execution speed, and performs further optimizations designed to reduce
           code size.

       --OOffaasstt
           Disregard strict standards compliance.  --OOffaasstt enables all --OO33 optimizations.  It
           also enables optimizations that are not valid for all standard-compliant programs.
           It turns on --ffffaasstt--mmaatthh and the Fortran-specific --ffssttaacckk--aarrrraayyss, unless
           --ffmmaaxx--ssttaacckk--vvaarr--ssiizzee is specified, and --ffnnoo--pprrootteecctt--ppaarreennss.

       --OOgg Optimize debugging experience.  --OOgg should be the optimization level of choice for
           the standard edit-compile-debug cycle, offering a reasonable level of optimization
           while maintaining fast compilation and a good debugging experience.  It is a better
           choice than --OO00 for producing debuggable code because some compiler passes that
           collect debug information are disabled at --OO00.

           Like --OO00, --OOgg completely disables a number of optimization passes so that
           individual options controlling them have no effect.  Otherwise --OOgg enables all --OO11
           optimization flags except for those that may interfere with debugging:

           --ffbbrraanncchh--ccoouunntt--rreegg  --ffddeellaayyeedd--bbrraanncchh --ffiiff--ccoonnvveerrssiioonn  --ffiiff--ccoonnvveerrssiioonn22
           --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee --ffmmoovvee--lloooopp--iinnvvaarriiaannttss  --ffssssaa--pphhiioopptt --ffttrreeee--bbiitt--ccccpp
           --ffttrreeee--ppttaa  --ffttrreeee--ssrraa

       If you use multiple --OO options, with or without level numbers, the last such option is
       the one that is effective.

       Options of the form --ff_f_l_a_g specify machine-independent flags.  Most flags have both
       positive and negative forms; the negative form of --ffffoooo is --ffnnoo--ffoooo.  In the table
       below, only one of the forms is listed---the one you typically use.  You can figure out
       the other form by either removing nnoo-- or adding it.

       The following options control specific optimizations.  They are either activated by --OO
       options or are related to ones that are.  You can use the following flags in the rare
       cases when "fine-tuning" of optimizations to be performed is desired.

       --ffnnoo--ddeeffeerr--ppoopp
           For machines that must pop arguments after a function call, always pop the
           arguments as soon as each function returns.  At levels --OO11 and higher, --ffddeeffeerr--ppoopp
           is the default; this allows the compiler to let arguments accumulate on the stack
           for several function calls and pop them all at once.

       --ffffoorrwwaarrdd--pprrooppaaggaattee
           Perform a forward propagation pass on RTL.  The pass tries to combine two
           instructions and checks if the result can be simplified.  If loop unrolling is
           active, two passes are performed and the second is scheduled after loop unrolling.

           This option is enabled by default at optimization levels --OO, --OO22, --OO33, --OOss.

       --ffffpp--ccoonnttrraacctt==_s_t_y_l_e
           --ffffpp--ccoonnttrraacctt==ooffff disables floating-point expression contraction.
           --ffffpp--ccoonnttrraacctt==ffaasstt enables floating-point expression contraction such as forming of
           fused multiply-add operations if the target has native support for them.
           --ffffpp--ccoonnttrraacctt==oonn enables floating-point expression contraction if allowed by the
           language standard.  This is currently not implemented and treated equal to
           --ffffpp--ccoonnttrraacctt==ooffff.

           The default is --ffffpp--ccoonnttrraacctt==ffaasstt.

       --ffoommiitt--ffrraammee--ppooiinntteerr
           Omit the frame pointer in functions that don't need one.  This avoids the
           instructions to save, set up and restore the frame pointer; on many targets it also
           makes an extra register available.

           On some targets this flag has no effect because the standard calling sequence
           always uses a frame pointer, so it cannot be omitted.

           Note that --ffnnoo--oommiitt--ffrraammee--ppooiinntteerr doesn't guarantee the frame pointer is used in
           all functions.  Several targets always omit the frame pointer in leaf functions.

           Enabled by default at --OO and higher.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
           Optimize sibling and tail recursive calls.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssttrrlleenn
           Optimize various standard C string functions (e.g. "strlen", "strchr" or "strcpy")
           and their "_FORTIFY_SOURCE" counterparts into faster alternatives.

           Enabled at levels --OO22, --OO33.

       --ffnnoo--iinnlliinnee
           Do not expand any functions inline apart from those marked with the "always_inline"
           attribute.  This is the default when not optimizing.

           Single functions can be exempted from inlining by marking them with the "noinline"
           attribute.

       --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           Integrate functions into their callers when their body is smaller than expected
           function call code (so overall size of program gets smaller).  The compiler
           heuristically decides which functions are simple enough to be worth integrating in
           this way.  This inlining applies to all functions, even those not declared inline.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiinnddiirreecctt--iinnlliinniinngg
           Inline also indirect calls that are discovered to be known at compile time thanks
           to previous inlining.  This option has any effect only when inlining itself is
           turned on by the --ffiinnlliinnee--ffuunnccttiioonnss or --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiinnlliinnee--ffuunnccttiioonnss
           Consider all functions for inlining, even if they are not declared inline.  The
           compiler heuristically decides which functions are worth integrating in this way.

           If all calls to a given function are integrated, and the function is declared
           "static", then the function is normally not output as assembler code in its own
           right.

           Enabled at levels --OO33, --OOss.  Also enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           Consider all "static" functions called once for inlining into their caller even if
           they are not marked "inline".  If a call to a given function is integrated, then
           the function is not output as assembler code in its own right.

           Enabled at levels --OO11, --OO22, --OO33 and --OOss, but not --OOgg.

       --ffeeaarrllyy--iinnlliinniinngg
           Inline functions marked by "always_inline" and functions whose body seems smaller
           than the function call overhead early before doing --ffpprrooffiillee--ggeenneerraattee
           instrumentation and real inlining pass.  Doing so makes profiling significantly
           cheaper and usually inlining faster on programs having large chains of nested
           wrapper functions.

           Enabled by default.

       --ffiippaa--ssrraa
           Perform interprocedural scalar replacement of aggregates, removal of unused
           parameters and replacement of parameters passed by reference by parameters passed
           by value.

           Enabled at levels --OO22, --OO33 and --OOss.

       --ffiinnlliinnee--lliimmiitt==_n
           By default, GCC limits the size of functions that can be inlined.  This flag allows
           coarse control of this limit.  _n is the size of functions that can be inlined in
           number of pseudo instructions.

           Inlining is actually controlled by a number of parameters, which may be specified
           individually by using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The --ffiinnlliinnee--lliimmiitt==_n option sets some of
           these parameters as follows:

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               is set to _n/2.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               is set to _n/2.

           See below for a documentation of the individual parameters controlling inlining and
           for the defaults of these parameters.

           _N_o_t_e_: there may be no value to --ffiinnlliinnee--lliimmiitt that results in default behavior.

           _N_o_t_e_: pseudo instruction represents, in this particular context, an abstract
           measurement of function's size.  In no way does it represent a count of assembly
           instructions and as such its exact meaning might change from one release to an
           another.

       --ffnnoo--kkeeeepp--iinnlliinnee--ddlllleexxppoorrtt
           This is a more fine-grained version of --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss, which applies only
           to functions that are declared using the "dllexport" attribute or declspec.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           In C, emit "static" functions that are declared "inline" into the object file, even
           if the function has been inlined into all of its callers.  This switch does not
           affect functions using the "extern inline" extension in GNU C90.  In C++, emit any
           and all inline functions into the object file.

       --ffkkeeeepp--ssttaattiicc--ffuunnccttiioonnss
           Emit "static" functions into the object file, even if the function is never used.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           Emit variables declared "static const" when optimization isn't turned on, even if
           the variables aren't referenced.

           GCC enables this option by default.  If you want to force the compiler to check if
           a variable is referenced, regardless of whether or not optimization is turned on,
           use the --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
           Attempt to merge identical constants (string constants and floating-point
           constants) across compilation units.

           This option is the default for optimized compilation if the assembler and linker
           support it.  Use --ffnnoo--mmeerrggee--ccoonnssttaannttss to inhibit this behavior.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
           Attempt to merge identical constants and identical variables.

           This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to --ffmmeerrggee--ccoonnssttaannttss this
           considers e.g. even constant initialized arrays or initialized constant variables
           with integral or floating-point types.  Languages like C or C++ require each
           variable, including multiple instances of the same variable in recursive calls, to
           have distinct locations, so using this option results in non-conforming behavior.

       --ffmmoodduulloo--sscchheedd
           Perform swing modulo scheduling immediately before the first scheduling pass.  This
           pass looks at innermost loops and reorders their instructions by overlapping
           different iterations.

       --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           Perform more aggressive SMS-based modulo scheduling with register moves allowed.
           By setting this flag certain anti-dependences edges are deleted, which triggers the
           generation of reg-moves based on the life-range analysis.  This option is effective
           only with --ffmmoodduulloo--sscchheedd enabled.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           Disable the optimization pass that scans for opportunities to use "decrement and
           branch" instructions on a count register instead of instruction sequences that
           decrement a register, compare it against zero, and then branch based upon the
           result.  This option is only meaningful on architectures that support such
           instructions, which include x86, PowerPC, IA-64 and S/390.  Note that the
           --ffnnoo--bbrraanncchh--ccoouunntt--rreegg option doesn't remove the decrement and branch instructions
           from the generated instruction stream introduced by other optimization passes.

           The default is --ffbbrraanncchh--ccoouunntt--rreegg at --OO11 and higher, except for --OOgg.

       --ffnnoo--ffuunnccttiioonn--ccssee
           Do not put function addresses in registers; make each instruction that calls a
           constant function contain the function's address explicitly.

           This option results in less efficient code, but some strange hacks that alter the
           assembler output may be confused by the optimizations performed when this option is
           not used.

           The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           If the target supports a BSS section, GCC by default puts variables that are
           initialized to zero into BSS.  This can save space in the resulting code.

           This option turns off this behavior because some programs explicitly rely on
           variables going to the data section---e.g., so that the resulting executable can
           find the beginning of that section and/or make assumptions based on that.

           The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --fftthhrreeaadd--jjuummppss
           Perform optimizations that check to see if a jump branches to a location where
           another comparison subsumed by the first is found.  If so, the first branch is
           redirected to either the destination of the second branch or a point immediately
           following it, depending on whether the condition is known to be true or false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsspplliitt--wwiiddee--ttyyppeess
           When using a type that occupies multiple registers, such as "long long" on a 32-bit
           system, split the registers apart and allocate them independently.  This normally
           generates better code for those types, but may make debugging more difficult.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
           In common subexpression elimination (CSE), scan through jump instructions when the
           target of the jump is not reached by any other path.  For example, when CSE
           encounters an "if" statement with an "else" clause, CSE follows the jump when the
           condition tested is false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
           This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE to follow jumps that
           conditionally skip over blocks.  When CSE encounters a simple "if" statement with
           no else clause, --ffccssee--sskkiipp--bblloocckkss causes CSE to follow the jump around the body of
           the "if".

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
           Re-run common subexpression elimination after loop optimizations are performed.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
           Perform a global common subexpression elimination pass.  This pass also performs
           global constant and copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a GCC extension, you may get
           better run-time performance if you disable the global common subexpression
           elimination pass by adding --ffnnoo--ggccssee to the command line.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
           When --ffggccssee--llmm is enabled, global common subexpression elimination attempts to move
           loads that are only killed by stores into themselves.  This allows a loop
           containing a load/store sequence to be changed to a load outside the loop, and a
           copy/store within the loop.

           Enabled by default when --ffggccssee is enabled.

       --ffggccssee--ssmm
           When --ffggccssee--ssmm is enabled, a store motion pass is run after global common
           subexpression elimination.  This pass attempts to move stores out of loops.  When
           used in conjunction with --ffggccssee--llmm, loops containing a load/store sequence can be
           changed to a load before the loop and a store after the loop.

           Not enabled at any optimization level.

       --ffggccssee--llaass
           When --ffggccssee--llaass is enabled, the global common subexpression elimination pass
           eliminates redundant loads that come after stores to the same memory location (both
           partial and full redundancies).

           Not enabled at any optimization level.

       --ffggccssee--aafftteerr--rreellooaadd
           When --ffggccssee--aafftteerr--rreellooaadd is enabled, a redundant load elimination pass is performed
           after reload.  The purpose of this pass is to clean up redundant spilling.

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffaaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss
           This option tells the loop optimizer to use language constraints to derive bounds
           for the number of iterations of a loop.  This assumes that loop code does not
           invoke undefined behavior by for example causing signed integer overflows or out-
           of-bound array accesses.  The bounds for the number of iterations of a loop are
           used to guide loop unrolling and peeling and loop exit test optimizations.  This
           option is enabled by default.

       --ffuunnccoonnssttrraaiinneedd--ccoommmmoonnss
           This option tells the compiler that variables declared in common blocks (e.g.
           Fortran) may later be overridden with longer trailing arrays. This prevents certain
           optimizations that depend on knowing the array bounds.

       --ffccrroossssjjuummppiinngg
           Perform cross-jumping transformation.  This transformation unifies equivalent code
           and saves code size.  The resulting code may or may not perform better than without
           cross-jumping.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffaauuttoo--iinncc--ddeecc
           Combine increments or decrements of addresses with memory accesses.  This pass is
           always skipped on architectures that do not have instructions to support this.
           Enabled by default at --OO and higher on architectures that support this.

       --ffddccee
           Perform dead code elimination (DCE) on RTL.  Enabled by default at --OO and higher.

       --ffddssee
           Perform dead store elimination (DSE) on RTL.  Enabled by default at --OO and higher.

       --ffiiff--ccoonnvveerrssiioonn
           Attempt to transform conditional jumps into branch-less equivalents.  This includes
           use of conditional moves, min, max, set flags and abs instructions, and some tricks
           doable by standard arithmetics.  The use of conditional execution on chips where it
           is available is controlled by --ffiiff--ccoonnvveerrssiioonn22.

           Enabled at levels --OO, --OO22, --OO33, --OOss, but not with --OOgg.

       --ffiiff--ccoonnvveerrssiioonn22
           Use conditional execution (where available) to transform conditional jumps into
           branch-less equivalents.

           Enabled at levels --OO, --OO22, --OO33, --OOss, but not with --OOgg.

       --ffddeecclloonnee--ccttoorr--ddttoorr
           The C++ ABI requires multiple entry points for constructors and destructors: one
           for a base subobject, one for a complete object, and one for a virtual destructor
           that calls operator delete afterwards.  For a hierarchy with virtual bases, the
           base and complete variants are clones, which means two copies of the function.
           With this option, the base and complete variants are changed to be thunks that call
           a common implementation.

           Enabled by --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           Assume that programs cannot safely dereference null pointers, and that no code or
           data element resides at address zero.  This option enables simple constant folding
           optimizations at all optimization levels.  In addition, other optimization passes
           in GCC use this flag to control global dataflow analyses that eliminate useless
           checks for null pointers; these assume that a memory access to address zero always
           results in a trap, so that if a pointer is checked after it has already been
           dereferenced, it cannot be null.

           Note however that in some environments this assumption is not true.  Use
           --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this optimization for programs that
           depend on that behavior.

           This option is enabled by default on most targets.  On Nios II ELF, it defaults to
           off.  On AVR, CR16, and MSP430, this option is completely disabled.

           Passes that use the dataflow information are enabled independently at different
           optimization levels.

       --ffddeevviirrttuuaalliizzee
           Attempt to convert calls to virtual functions to direct calls.  This is done both
           within a procedure and interprocedurally as part of indirect inlining
           (--ffiinnddiirreecctt--iinnlliinniinngg) and interprocedural constant propagation (--ffiippaa--ccpp).  Enabled
           at levels --OO22, --OO33, --OOss.

       --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy
           Attempt to convert calls to virtual functions to speculative direct calls.  Based
           on the analysis of the type inheritance graph, determine for a given call the set
           of likely targets. If the set is small, preferably of size 1, change the call into
           a conditional deciding between direct and indirect calls.  The speculative calls
           enable more optimizations, such as inlining.  When they seem useless after further
           optimization, they are converted back into original form.

       --ffddeevviirrttuuaalliizzee--aatt--llttrraannss
           Stream extra information needed for aggressive devirtualization when running the
           link-time optimizer in local transformation mode.  This option enables more
           devirtualization but significantly increases the size of streamed data. For this
           reason it is disabled by default.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           Perform a number of minor optimizations that are relatively expensive.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreeee
           Attempt to remove redundant extension instructions.  This is especially helpful for
           the x86-64 architecture, which implicitly zero-extends in 64-bit registers after
           writing to their lower 32-bit half.

           Enabled for Alpha, AArch64 and x86 at levels --OO22, --OO33, --OOss.

       --ffnnoo--lliiffeettiimmee--ddssee
           In C++ the value of an object is only affected by changes within its lifetime: when
           the constructor begins, the object has an indeterminate value, and any changes
           during the lifetime of the object are dead when the object is destroyed.  Normally
           dead store elimination will take advantage of this; if your code relies on the
           value of the object storage persisting beyond the lifetime of the object, you can
           use this flag to disable this optimization.  To preserve stores before the
           constructor starts (e.g. because your operator new clears the object storage) but
           still treat the object as dead after the destructor you, can use --fflliiffeettiimmee--ddssee==11.
           The default behavior can be explicitly selected with --fflliiffeettiimmee--ddssee==22.
           --fflliiffeettiimmee--ddssee==00 is equivalent to --ffnnoo--lliiffeettiimmee--ddssee.

       --fflliivvee--rraannggee--sshhrriinnkkaaggee
           Attempt to decrease register pressure through register live range shrinkage.  This
           is helpful for fast processors with small or moderate size register sets.

       --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use the specified coloring algorithm for the integrated register allocator.  The
           _a_l_g_o_r_i_t_h_m argument can be pprriioorriittyy, which specifies Chow's priority coloring, or
           CCBB, which specifies Chaitin-Briggs coloring.  Chaitin-Briggs coloring is not
           implemented for all architectures, but for those targets that do support it, it is
           the default because it generates better code.

       --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           Use specified regions for the integrated register allocator.  The _r_e_g_i_o_n argument
           should be one of the following:

           aallll Use all loops as register allocation regions.  This can give the best results
               for machines with a small and/or irregular register set.

           mmiixxeedd
               Use all loops except for loops with small register pressure as the regions.
               This value usually gives the best results in most cases and for most
               architectures, and is enabled by default when compiling with optimization for
               speed (--OO, --OO22, ...).

           oonnee Use all functions as a single region.  This typically results in the smallest
               code size, and is enabled by default for --OOss or --OO00.

       --ffiirraa--hhooiisstt--pprreessssuurree
           Use IRA to evaluate register pressure in the code hoisting pass for decisions to
           hoist expressions.  This option usually results in smaller code, but it can slow
           the compiler down.

           This option is enabled at level --OOss for all targets.

       --ffiirraa--lloooopp--pprreessssuurree
           Use IRA to evaluate register pressure in loops for decisions to move loop
           invariants.  This option usually results in generation of faster and smaller code
           on machines with large register files (>= 32 registers), but it can slow the
           compiler down.

           This option is enabled at level --OO33 for some targets.

       --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           Disable sharing of stack slots used for saving call-used hard registers living
           through a call.  Each hard register gets a separate stack slot, and as a result
           function stack frames are larger.

       --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           Disable sharing of stack slots allocated for pseudo-registers.  Each pseudo-
           register that does not get a hard register gets a separate stack slot, and as a
           result function stack frames are larger.

       --ffllrraa--rreemmaatt
           Enable CFG-sensitive rematerialization in LRA.  Instead of loading values of
           spilled pseudos, LRA tries to rematerialize (recalculate) values if it is
           profitable.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffddeellaayyeedd--bbrraanncchh
           If supported for the target machine, attempt to reorder instructions to exploit
           instruction slots available after delayed branch instructions.

           Enabled at levels --OO, --OO22, --OO33, --OOss, but not at --OOgg.

       --ffsscchheedduullee--iinnssnnss
           If supported for the target machine, attempt to reorder instructions to eliminate
           execution stalls due to required data being unavailable.  This helps machines that
           have slow floating point or memory load instructions by allowing other instructions
           to be issued until the result of the load or floating-point instruction is
           required.

           Enabled at levels --OO22, --OO33.

       --ffsscchheedduullee--iinnssnnss22
           Similar to --ffsscchheedduullee--iinnssnnss, but requests an additional pass of instruction
           scheduling after register allocation has been done.  This is especially useful on
           machines with a relatively small number of registers and where memory load
           instructions take more than one cycle.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
           Disable instruction scheduling across basic blocks, which is normally enabled when
           scheduling before register allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffnnoo--sscchheedd--ssppeecc
           Disable speculative motion of non-load instructions, which is normally enabled when
           scheduling before register allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--pprreessssuurree
           Enable register pressure sensitive insn scheduling before register allocation.
           This only makes sense when scheduling before register allocation is enabled, i.e.
           with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.  Usage of this option can improve the
           generated code and decrease its size by preventing register pressure increase above
           the number of available hard registers and subsequent spills in register
           allocation.

       --ffsscchheedd--ssppeecc--llooaadd
           Allow speculative motion of some load instructions.  This only makes sense when
           scheduling before register allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           Allow speculative motion of more load instructions.  This only makes sense when
           scheduling before register allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss
       --ffsscchheedd--ssttaalllleedd--iinnssnnss==_n
           Define how many insns (if any) can be moved prematurely from the queue of stalled
           insns into the ready list during the second scheduling pass.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss means that no insns are moved prematurely,
           --ffsscchheedd--ssttaalllleedd--iinnssnnss==00 means there is no limit on how many queued insns can be
           moved prematurely.  --ffsscchheedd--ssttaalllleedd--iinnssnnss without a value is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss==11.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp
       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==_n
           Define how many insn groups (cycles) are examined for a dependency on a stalled
           insn that is a candidate for premature removal from the queue of stalled insns.
           This has an effect only during the second scheduling pass, and only if
           --ffsscchheedd--ssttaalllleedd--iinnssnnss is used.  --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss--ddeepp is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==00.  --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp without a value is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==11.

       --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           When scheduling after register allocation, use superblock scheduling.  This allows
           motion across basic block boundaries, resulting in faster schedules.  This option
           is experimental, as not all machine descriptions used by GCC model the CPU closely
           enough to avoid unreliable results from the algorithm.

           This only makes sense when scheduling after register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ggrroouupp--hheeuurriissttiicc
           Enable the group heuristic in the scheduler.  This heuristic favors the instruction
           that belongs to a schedule group.  This is enabled by default when scheduling is
           enabled, i.e. with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc
           Enable the critical-path heuristic in the scheduler.  This heuristic favors
           instructions on the critical path.  This is enabled by default when scheduling is
           enabled, i.e. with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc
           Enable the speculative instruction heuristic in the scheduler.  This heuristic
           favors speculative instructions with greater dependency weakness.  This is enabled
           by default when scheduling is enabled, i.e.  with --ffsscchheedduullee--iinnssnnss or
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--rraannkk--hheeuurriissttiicc
           Enable the rank heuristic in the scheduler.  This heuristic favors the instruction
           belonging to a basic block with greater size or frequency.  This is enabled by
           default when scheduling is enabled, i.e.  with --ffsscchheedduullee--iinnssnnss or
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           Enable the last-instruction heuristic in the scheduler.  This heuristic favors the
           instruction that is less dependent on the last instruction scheduled.  This is
           enabled by default when scheduling is enabled, i.e. with --ffsscchheedduullee--iinnssnnss or
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc
           Enable the dependent-count heuristic in the scheduler.  This heuristic favors the
           instruction that has more instructions depending on it.  This is enabled by default
           when scheduling is enabled, i.e.  with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at
           --OO22 or higher.

       --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           Modulo scheduling is performed before traditional scheduling.  If a loop is modulo
           scheduled, later scheduling passes may change its schedule.  Use this option to
           control that behavior.

       --ffsseelleeccttiivvee--sscchheedduulliinngg
           Schedule instructions using selective scheduling algorithm.  Selective scheduling
           runs instead of the first scheduler pass.

       --ffsseelleeccttiivvee--sscchheedduulliinngg22
           Schedule instructions using selective scheduling algorithm.  Selective scheduling
           runs instead of the second scheduler pass.

       --ffsseell--sscchheedd--ppiippeelliinniinngg
           Enable software pipelining of innermost loops during selective scheduling.  This
           option has no effect unless one of --ffsseelleeccttiivvee--sscchheedduulliinngg or
           --ffsseelleeccttiivvee--sscchheedduulliinngg22 is turned on.

       --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss
           When pipelining loops during selective scheduling, also pipeline outer loops.  This
           option has no effect unless --ffsseell--sscchheedd--ppiippeelliinniinngg is turned on.

       --ffsseemmaannttiicc--iinntteerrppoossiittiioonn
           Some object formats, like ELF, allow interposing of symbols by the dynamic linker.
           This means that for symbols exported from the DSO, the compiler cannot perform
           interprocedural propagation, inlining and other optimizations in anticipation that
           the function or variable in question may change. While this feature is useful, for
           example, to rewrite memory allocation functions by a debugging implementation, it
           is expensive in the terms of code quality.  With --ffnnoo--sseemmaannttiicc--iinntteerrppoossiittiioonn the
           compiler assumes that if interposition happens for functions the overwriting
           function will have precisely the same semantics (and side effects).  Similarly if
           interposition happens for variables, the constructor of the variable will be the
           same. The flag has no effect for functions explicitly declared inline (where it is
           never allowed for interposition to change semantics) and for symbols explicitly
           declared weak.

       --ffsshhrriinnkk--wwrraapp
           Emit function prologues only before parts of the function that need it, rather than
           at the top of the function.  This flag is enabled by default at --OO and higher.

       --ffsshhrriinnkk--wwrraapp--sseeppaarraattee
           Shrink-wrap separate parts of the prologue and epilogue separately, so that those
           parts are only executed when needed.  This option is on by default, but has no
           effect unless --ffsshhrriinnkk--wwrraapp is also turned on and the target supports this.

       --ffccaalllleerr--ssaavveess
           Enable allocation of values to registers that are clobbered by function calls, by
           emitting extra instructions to save and restore the registers around such calls.
           Such allocation is done only when it seems to result in better code.

           This option is always enabled by default on certain machines, usually those which
           have no call-preserved registers to use instead.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss
           Tracks stack adjustments (pushes and pops) and stack memory references and then
           tries to find ways to combine them.

           Enabled by default at --OO11 and higher.

       --ffiippaa--rraa
           Use caller save registers for allocation if those registers are not used by any
           called function.  In that case it is not necessary to save and restore them around
           calls.  This is only possible if called functions are part of same compilation unit
           as current function and they are compiled before it.

           Enabled at levels --OO22, --OO33, --OOss, however the option is disabled if generated code
           will be instrumented for profiling (--pp, or --ppgg) or if callee's register usage
           cannot be known exactly (this happens on targets that do not expose prologues and
           epilogues in RTL).

       --ffccoonnsseerrvvee--ssttaacckk
           Attempt to minimize stack usage.  The compiler attempts to use less stack space,
           even if that makes the program slower.  This option implies setting the llaarrggee--
           ssttaacckk--ffrraammee parameter to 100 and the llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh parameter to 400.

       --ffttrreeee--rreeaassssoocc
           Perform reassociation on trees.  This flag is enabled by default at --OO and higher.

       --ffccooddee--hhooiissttiinngg
           Perform code hoisting.  Code hoisting tries to move the evaluation of expressions
           executed on all paths to the function exit as early as possible.  This is
           especially useful as a code size optimization, but it often helps for code speed as
           well.  This flag is enabled by default at --OO22 and higher.

       --ffttrreeee--pprree
           Perform partial redundancy elimination (PRE) on trees.  This flag is enabled by
           default at --OO22 and --OO33.

       --ffttrreeee--ppaarrttiiaall--pprree
           Make partial redundancy elimination (PRE) more aggressive.  This flag is enabled by
           default at --OO33.

       --ffttrreeee--ffoorrwwpprroopp
           Perform forward propagation on trees.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--ffrree
           Perform full redundancy elimination (FRE) on trees.  The difference between FRE and
           PRE is that FRE only considers expressions that are computed on all paths leading
           to the redundant computation.  This analysis is faster than PRE, though it exposes
           fewer redundancies.  This flag is enabled by default at --OO and higher.

       --ffttrreeee--pphhiipprroopp
           Perform hoisting of loads from conditional pointers on trees.  This pass is enabled
           by default at --OO and higher.

       --ffhhooiisstt--aaddjjaacceenntt--llooaaddss
           Speculatively hoist loads from both branches of an if-then-else if the loads are
           from adjacent locations in the same structure and the target architecture has a
           conditional move instruction.  This flag is enabled by default at --OO22 and higher.

       --ffttrreeee--ccooppyy--pprroopp
           Perform copy propagation on trees.  This pass eliminates unnecessary copy
           operations.  This flag is enabled by default at --OO and higher.

       --ffiippaa--ppuurree--ccoonnsstt
           Discover which functions are pure or constant.  Enabled by default at --OO and
           higher.

       --ffiippaa--rreeffeerreennccee
           Discover which static variables do not escape the compilation unit.  Enabled by
           default at --OO and higher.

       --ffiippaa--rreeffeerreennccee--aaddddrreessssaabbllee
           Discover read-only, write-only and non-addressable static variables.  Enabled by
           default at --OO and higher.

       --ffiippaa--ssttaacckk--aalliiggnnmmeenntt
           Reduce stack alignment on call sites if possible.  Enabled by default.

       --ffiippaa--ppttaa
           Perform interprocedural pointer analysis and interprocedural modification and
           reference analysis.  This option can cause excessive memory and compile-time usage
           on large compilation units.  It is not enabled by default at any optimization
           level.

       --ffiippaa--pprrooffiillee
           Perform interprocedural profile propagation.  The functions called only from cold
           functions are marked as cold. Also functions executed once (such as "cold",
           "noreturn", static constructors or destructors) are identified. Cold functions and
           loop less parts of functions executed once are then optimized for size.  Enabled by
           default at --OO and higher.

       --ffiippaa--ccpp
           Perform interprocedural constant propagation.  This optimization analyzes the
           program to determine when values passed to functions are constants and then
           optimizes accordingly.  This optimization can substantially increase performance if
           the application has constants passed to functions.  This flag is enabled by default
           at --OO22, --OOss and --OO33.  It is also enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffiippaa--ccpp--cclloonnee
           Perform function cloning to make interprocedural constant propagation stronger.
           When enabled, interprocedural constant propagation performs function cloning when
           externally visible function can be called with constant arguments.  Because this
           optimization can create multiple copies of functions, it may significantly increase
           code size (see ----ppaarraamm iippccpp--uunniitt--ggrroowwtthh==_v_a_l_u_e).  This flag is enabled by default at
           --OO33.  It is also enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffiippaa--bbiitt--ccpp
           When enabled, perform interprocedural bitwise constant propagation. This flag is
           enabled by default at --OO22 and by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.  It requires
           that --ffiippaa--ccpp is enabled.

       --ffiippaa--vvrrpp
           When enabled, perform interprocedural propagation of value ranges. This flag is
           enabled by default at --OO22. It requires that --ffiippaa--ccpp is enabled.

       --ffiippaa--iiccff
           Perform Identical Code Folding for functions and read-only variables.  The
           optimization reduces code size and may disturb unwind stacks by replacing a
           function by equivalent one with a different name. The optimization works more
           effectively with link-time optimization enabled.

           Although the behavior is similar to the Gold Linker's ICF optimization, GCC ICF
           works on different levels and thus the optimizations are not same - there are
           equivalences that are found only by GCC and equivalences found only by Gold.

           This flag is enabled by default at --OO22 and --OOss.

       --fflliivvee--ppaattcchhiinngg==_l_e_v_e_l
           Control GCC's optimizations to produce output suitable for live-patching.

           If the compiler's optimization uses a function's body or information extracted from
           its body to optimize/change another function, the latter is called an impacted
           function of the former.  If a function is patched, its impacted functions should be
           patched too.

           The impacted functions are determined by the compiler's interprocedural
           optimizations.  For example, a caller is impacted when inlining a function into its
           caller, cloning a function and changing its caller to call this new clone, or
           extracting a function's pureness/constness information to optimize its direct or
           indirect callers, etc.

           Usually, the more IPA optimizations enabled, the larger the number of impacted
           functions for each function.  In order to control the number of impacted functions
           and more easily compute the list of impacted function, IPA optimizations can be
           partially enabled at two different levels.

           The _l_e_v_e_l argument should be one of the following:

           iinnlliinnee--cclloonnee
               Only enable inlining and cloning optimizations, which includes inlining,
               cloning, interprocedural scalar replacement of aggregates and partial inlining.
               As a result, when patching a function, all its callers and its clones' callers
               are impacted, therefore need to be patched as well.

               --fflliivvee--ppaattcchhiinngg==iinnlliinnee--cclloonnee disables the following optimization flags:
               --ffwwhhoollee--pprrooggrraamm  --ffiippaa--ppttaa  --ffiippaa--rreeffeerreennccee  --ffiippaa--rraa --ffiippaa--iiccff
               --ffiippaa--iiccff--ffuunnccttiioonnss  --ffiippaa--iiccff--vvaarriiaabblleess --ffiippaa--bbiitt--ccpp  --ffiippaa--vvrrpp
               --ffiippaa--ppuurree--ccoonnsstt  --ffiippaa--rreeffeerreennccee--aaddddrreessssaabbllee --ffiippaa--ssttaacckk--aalliiggnnmmeenntt

           iinnlliinnee--oonnllyy--ssttaattiicc
               Only enable inlining of static functions.  As a result, when patching a static
               function, all its callers are impacted and so need to be patched as well.

               In addition to all the flags that --fflliivvee--ppaattcchhiinngg==iinnlliinnee--cclloonnee disables,
               --fflliivvee--ppaattcchhiinngg==iinnlliinnee--oonnllyy--ssttaattiicc disables the following additional
               optimization flags: --ffiippaa--ccpp--cclloonnee  --ffiippaa--ssrraa  --ffppaarrttiiaall--iinnlliinniinngg  --ffiippaa--ccpp

           When --fflliivvee--ppaattcchhiinngg is specified without any value, the default value is _i_n_l_i_n_e_-
           _c_l_o_n_e.

           This flag is disabled by default.

           Note that --fflliivvee--ppaattcchhiinngg is not supported with link-time optimization (--ffllttoo).

       --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee
           Detect paths that trigger erroneous or undefined behavior due to dereferencing a
           null pointer.  Isolate those paths from the main control flow and turn the
           statement with erroneous or undefined behavior into a trap.  This flag is enabled
           by default at --OO22 and higher and depends on --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss also being
           enabled.

       --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--aattttrriibbuuttee
           Detect paths that trigger erroneous or undefined behavior due to a null value being
           used in a way forbidden by a "returns_nonnull" or "nonnull" attribute.  Isolate
           those paths from the main control flow and turn the statement with erroneous or
           undefined behavior into a trap.  This is not currently enabled, but may be enabled
           by --OO22 in the future.

       --ffttrreeee--ssiinnkk
           Perform forward store motion on trees.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--bbiitt--ccccpp
           Perform sparse conditional bit constant propagation on trees and propagate pointer
           alignment information.  This pass only operates on local scalar variables and is
           enabled by default at --OO11 and higher, except for --OOgg.  It requires that --ffttrreeee--ccccpp
           is enabled.

       --ffttrreeee--ccccpp
           Perform sparse conditional constant propagation (CCP) on trees.  This pass only
           operates on local scalar variables and is enabled by default at --OO and higher.

       --ffssssaa--bbaacckkpprroopp
           Propagate information about uses of a value up the definition chain in order to
           simplify the definitions.  For example, this pass strips sign operations if the
           sign of a value never matters.  The flag is enabled by default at --OO and higher.

       --ffssssaa--pphhiioopptt
           Perform pattern matching on SSA PHI nodes to optimize conditional code.  This pass
           is enabled by default at --OO11 and higher, except for --OOgg.

       --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn
           Perform conversion of simple initializations in a switch to initializations from a
           scalar array.  This flag is enabled by default at --OO22 and higher.

       --ffttrreeee--ttaaiill--mmeerrggee
           Look for identical code sequences.  When found, replace one with a jump to the
           other.  This optimization is known as tail merging or cross jumping.  This flag is
           enabled by default at --OO22 and higher.  The compilation time in this pass can be
           limited using mmaaxx--ttaaiill--mmeerrggee--ccoommppaarriissoonnss parameter and mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss
           parameter.

       --ffttrreeee--ddccee
           Perform dead code elimination (DCE) on trees.  This flag is enabled by default at
           --OO and higher.

       --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           Perform conditional dead code elimination (DCE) for calls to built-in functions
           that may set "errno" but are otherwise free of side effects.  This flag is enabled
           by default at --OO22 and higher if --OOss is not also specified.

       --ffttrreeee--ddoommiinnaattoorr--ooppttss
           Perform a variety of simple scalar cleanups (constant/copy propagation, redundancy
           elimination, range propagation and expression simplification) based on a dominator
           tree traversal.  This also performs jump threading (to reduce jumps to jumps). This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--ddssee
           Perform dead store elimination (DSE) on trees.  A dead store is a store into a
           memory location that is later overwritten by another store without any intervening
           loads.  In this case the earlier store can be deleted.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--cchh
           Perform loop header copying on trees.  This is beneficial since it increases
           effectiveness of code motion optimizations.  It also saves one jump.  This flag is
           enabled by default at --OO and higher.  It is not enabled for --OOss, since it usually
           increases code size.

       --ffttrreeee--lloooopp--ooppttiimmiizzee
           Perform loop optimizations on trees.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--lloooopp--lliinneeaarr
       --fflloooopp--ssttrriipp--mmiinnee
       --fflloooopp--bblloocckk
           Perform loop nest optimizations.  Same as --fflloooopp--nneesstt--ooppttiimmiizzee.  To use this code
           transformation, GCC has to be configured with ----wwiitthh--iissll to enable the Graphite
           loop transformation infrastructure.

       --ffggrraapphhiittee--iiddeennttiittyy
           Enable the identity transformation for graphite.  For every SCoP we generate the
           polyhedral representation and transform it back to gimple.  Using
           --ffggrraapphhiittee--iiddeennttiittyy we can check the costs or benefits of the GIMPLE -> GRAPHITE ->
           GIMPLE transformation.  Some minimal optimizations are also performed by the code
           generator isl, like index splitting and dead code elimination in loops.

       --fflloooopp--nneesstt--ooppttiimmiizzee
           Enable the isl based loop nest optimizer.  This is a generic loop nest optimizer
           based on the Pluto optimization algorithms.  It calculates a loop structure
           optimized for data-locality and parallelism.  This option is experimental.

       --fflloooopp--ppaarraalllleelliizzee--aallll
           Use the Graphite data dependence analysis to identify loops that can be
           parallelized.  Parallelize all the loops that can be analyzed to not contain loop
           carried dependences without checking that it is profitable to parallelize the
           loops.

       --ffttrreeee--ccooaalleessccee--vvaarrss
           While transforming the program out of the SSA representation, attempt to reduce
           copying by coalescing versions of different user-defined variables, instead of just
           compiler temporaries.  This may severely limit the ability to debug an optimized
           program compiled with --ffnnoo--vvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss.  In the negated form, this
           flag prevents SSA coalescing of user variables.  This option is enabled by default
           if optimization is enabled, and it does very little otherwise.

       --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt
           Attempt to transform conditional jumps in the innermost loops to branch-less
           equivalents.  The intent is to remove control-flow from the innermost loops in
           order to improve the ability of the vectorization pass to handle these loops.  This
           is enabled by default if vectorization is enabled.

       --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           Perform loop distribution.  This flag can improve cache performance on big loop
           bodies and allow further loop optimizations, like parallelization or vectorization,
           to take place.  For example, the loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

           This flag is enabled by default at --OO33.  It is also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss
           Perform loop distribution of patterns that can be code generated with calls to a
           library.  This flag is enabled by default at --OO33, and by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

           This pass distributes the initialization loops and generates a call to memset zero.
           For example, the loop

                   DO I = 1, N
                     A(I) = 0
                     B(I) = A(I) + I
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = 0
                   ENDDO
                   DO I = 1, N
                      B(I) = A(I) + I
                   ENDDO

           and the initialization loop is transformed into a call to memset zero.  This flag
           is enabled by default at --OO33.  It is also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --fflloooopp--iinntteerrcchhaannggee
           Perform loop interchange outside of graphite.  This flag can improve cache
           performance on loop nest and allow further loop optimizations, like vectorization,
           to take place.  For example, the loop

                   for (int i = 0; i < N; i++)
                     for (int j = 0; j < N; j++)
                       for (int k = 0; k < N; k++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           is transformed to

                   for (int i = 0; i < N; i++)
                     for (int k = 0; k < N; k++)
                       for (int j = 0; j < N; j++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           This flag is enabled by default at --OO33.  It is also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --fflloooopp--uunnrroollll--aanndd--jjaamm
           Apply unroll and jam transformations on feasible loops.  In a loop nest this
           unrolls the outer loop by some factor and fuses the resulting multiple inner loops.
           This flag is enabled by default at --OO33.  It is also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --ffttrreeee--lloooopp--iimm
           Perform loop invariant motion on trees.  This pass moves only invariants that are
           hard to handle at RTL level (function calls, operations that expand to nontrivial
           sequences of insns).  With --ffuunnsswwiittcchh--llooooppss it also moves operands of conditions
           that are invariant out of the loop, so that we can use just trivial invariantness
           analysis in loop unswitching.  The pass also includes store motion.

       --ffttrreeee--lloooopp--iivvccaannoonn
           Create a canonical counter for number of iterations in loops for which determining
           number of iterations requires complicated analysis.  Later optimizations then may
           determine the number easily.  Useful especially in connection with unrolling.

       --ffttrreeee--sscceevv--ccpprroopp
           Perform final value replacement.  If a variable is modified in a loop in such a way
           that its value when exiting the loop can be determined using only its initial value
           and the number of loop iterations, replace uses of the final value by such a
           computation, provided it is sufficiently cheap.  This reduces data dependencies and
           may allow further simplifications.  Enabled by default at --OO and higher.

       --ffiivvooppttss
           Perform induction variable optimizations (strength reduction, induction variable
           merging and induction variable elimination) on trees.

       --ffttrreeee--ppaarraalllleelliizzee--llooooppss==nn
           Parallelize loops, i.e., split their iteration space to run in n threads.  This is
           only possible for loops whose iterations are independent and can be arbitrarily
           reordered.  The optimization is only profitable on multiprocessor machines, for
           loops that are CPU-intensive, rather than constrained e.g. by memory bandwidth.
           This option implies --pptthhrreeaadd, and thus is only supported on targets that have
           support for --pptthhrreeaadd.

       --ffttrreeee--ppttaa
           Perform function-local points-to analysis on trees.  This flag is enabled by
           default at --OO11 and higher, except for --OOgg.

       --ffttrreeee--ssrraa
           Perform scalar replacement of aggregates.  This pass replaces structure references
           with scalars to prevent committing structures to memory too early.  This flag is
           enabled by default at --OO11 and higher, except for --OOgg.

       --ffssttoorree--mmeerrggiinngg
           Perform merging of narrow stores to consecutive memory addresses.  This pass merges
           contiguous stores of immediate values narrower than a word into fewer wider stores
           to reduce the number of instructions.  This is enabled by default at --OO22 and higher
           as well as --OOss.

       --ffttrreeee--tteerr
           Perform temporary expression replacement during the SSA->normal phase.  Single
           use/single def temporaries are replaced at their use location with their defining
           expression.  This results in non-GIMPLE code, but gives the expanders much more
           complex trees to work on resulting in better RTL generation.  This is enabled by
           default at --OO and higher.

       --ffttrreeee--ssllssrr
           Perform straight-line strength reduction on trees.  This recognizes related
           expressions involving multiplications and replaces them by less expensive
           calculations when possible.  This is enabled by default at --OO and higher.

       --ffttrreeee--vveeccttoorriizzee
           Perform vectorization on trees. This flag enables --ffttrreeee--lloooopp--vveeccttoorriizzee and
           --ffttrreeee--ssllpp--vveeccttoorriizzee if not explicitly specified.

       --ffttrreeee--lloooopp--vveeccttoorriizzee
           Perform loop vectorization on trees. This flag is enabled by default at --OO33 and by
           --ffttrreeee--vveeccttoorriizzee, --ffpprrooffiillee--uussee, and --ffaauuttoo--pprrooffiillee.

       --ffttrreeee--ssllpp--vveeccttoorriizzee
           Perform basic block vectorization on trees. This flag is enabled by default at --OO33
           and by --ffttrreeee--vveeccttoorriizzee, --ffpprrooffiillee--uussee, and --ffaauuttoo--pprrooffiillee.

       --ffvveecctt--ccoosstt--mmooddeell==_m_o_d_e_l
           Alter the cost model used for vectorization.  The _m_o_d_e_l argument should be one of
           uunnlliimmiitteedd, ddyynnaammiicc or cchheeaapp.  With the uunnlliimmiitteedd model the vectorized code-path is
           assumed to be profitable while with the ddyynnaammiicc model a runtime check guards the
           vectorized code-path to enable it only for iteration counts that will likely
           execute faster than when executing the original scalar loop.  The cchheeaapp model
           disables vectorization of loops where doing so would be cost prohibitive for
           example due to required runtime checks for data dependence or alignment but
           otherwise is equal to the ddyynnaammiicc model.  The default cost model depends on other
           optimization flags and is either ddyynnaammiicc or cchheeaapp.

       --ffssiimmdd--ccoosstt--mmooddeell==_m_o_d_e_l
           Alter the cost model used for vectorization of loops marked with the OpenMP simd
           directive.  The _m_o_d_e_l argument should be one of uunnlliimmiitteedd, ddyynnaammiicc, cchheeaapp.  All
           values of _m_o_d_e_l have the same meaning as described in --ffvveecctt--ccoosstt--mmooddeell and by
           default a cost model defined with --ffvveecctt--ccoosstt--mmooddeell is used.

       --ffttrreeee--vvrrpp
           Perform Value Range Propagation on trees.  This is similar to the constant
           propagation pass, but instead of values, ranges of values are propagated.  This
           allows the optimizers to remove unnecessary range checks like array bound checks
           and null pointer checks.  This is enabled by default at --OO22 and higher.  Null
           pointer check elimination is only done if --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is enabled.

       --ffsspplliitt--ppaatthhss
           Split paths leading to loop backedges.  This can improve dead code elimination and
           common subexpression elimination.  This is enabled by default at --OO33 and above.

       --ffsspplliitt--iivvss--iinn--uunnrroolllleerr
           Enables expression of values of induction variables in later iterations of the
           unrolled loop using the value in the first iteration.  This breaks long dependency
           chains, thus improving efficiency of the scheduling passes.

           A combination of --ffwweebb and CSE is often sufficient to obtain the same effect.
           However, that is not reliable in cases where the loop body is more complicated than
           a single basic block.  It also does not work at all on some architectures due to
           restrictions in the CSE pass.

           This optimization is enabled by default.

       --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr
           With this option, the compiler creates multiple copies of some local variables when
           unrolling a loop, which can result in superior code.

       --ffppaarrttiiaall--iinnlliinniinngg
           Inline parts of functions.  This option has any effect only when inlining itself is
           turned on by the --ffiinnlliinnee--ffuunnccttiioonnss or --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           Perform predictive commoning optimization, i.e., reusing computations (especially
           memory loads and stores) performed in previous iterations of loops.

           This option is enabled at level --OO33.  It is also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           If supported by the target machine, generate instructions to prefetch memory to
           improve the performance of loops that access large arrays.

           This option may generate better or worse code; results are highly dependent on the
           structure of loops within the source code.

           Disabled at level --OOss.

       --ffnnoo--pprriinnttff--rreettuurrnn--vvaalluuee
           Do not substitute constants for known return value of formatted output functions
           such as "sprintf", "snprintf", "vsprintf", and "vsnprintf" (but not "printf" of
           "fprintf").  This transformation allows GCC to optimize or even eliminate branches
           based on the known return value of these functions called with arguments that are
           either constant, or whose values are known to be in a range that makes determining
           the exact return value possible.  For example, when --ffpprriinnttff--rreettuurrnn--vvaalluuee is in
           effect, both the branch and the body of the "if" statement (but not the call to
           "snprint") can be optimized away when "i" is a 32-bit or smaller integer because
           the return value is guaranteed to be at most 8.

                   char buf[9];
                   if (snprintf (buf, "%08x", i) >= sizeof buf)
                     ...

           The --ffpprriinnttff--rreettuurrnn--vvaalluuee option relies on other optimizations and yields best
           results with --OO22 and above.  It works in tandem with the --WWffoorrmmaatt--oovveerrffllooww and
           --WWffoorrmmaatt--ttrruunnccaattiioonn options.  The --ffpprriinnttff--rreettuurrnn--vvaalluuee option is enabled by
           default.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
           Disable any machine-specific peephole optimizations.  The difference between
           --ffnnoo--ppeeeepphhoollee and --ffnnoo--ppeeeepphhoollee22 is in how they are implemented in the compiler;
           some targets use one, some use the other, a few use both.

           --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           Do not guess branch probabilities using heuristics.

           GCC uses heuristics to guess branch probabilities if they are not provided by
           profiling feedback (--ffpprrooffiillee--aarrccss).  These heuristics are based on the control
           flow graph.  If some branch probabilities are specified by "__builtin_expect", then
           the heuristics are used to guess branch probabilities for the rest of the control
           flow graph, taking the "__builtin_expect" info into account.  The interactions
           between the heuristics and "__builtin_expect" can be complex, and in some cases, it
           may be useful to disable the heuristics so that the effects of "__builtin_expect"
           are easier to understand.

           It is also possible to specify expected probability of the expression with
           "__builtin_expect_with_probability" built-in function.

           The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels --OO, --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--bblloocckkss
           Reorder basic blocks in the compiled function in order to reduce number of taken
           branches and improve code locality.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use the specified algorithm for basic block reordering.  The _a_l_g_o_r_i_t_h_m argument can
           be ssiimmppllee, which does not increase code size (except sometimes due to secondary
           effects like alignment), or ssttcc, the "software trace cache" algorithm, which tries
           to put all often executed code together, minimizing the number of branches executed
           by making extra copies of code.

           The default is ssiimmppllee at levels --OO, --OOss, and ssttcc at levels --OO22, --OO33.

       --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           In addition to reordering basic blocks in the compiled function, in order to reduce
           number of taken branches, partitions hot and cold basic blocks into separate
           sections of the assembly and _._o files, to improve paging and cache locality
           performance.

           This optimization is automatically turned off in the presence of exception handling
           or unwind tables (on targets using setjump/longjump or target specific scheme), for
           linkonce sections, for functions with a user-defined section attribute and on any
           architecture that does not support named sections.  When --ffsspplliitt--ssttaacckk is used this
           option is not enabled by default (to avoid linker errors), but may be enabled
           explicitly (if using a working linker).

           Enabled for x86 at levels --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
           Reorder functions in the object file in order to improve code locality.  This is
           implemented by using special subsections ".text.hot" for most frequently executed
           functions and ".text.unlikely" for unlikely executed functions.  Reordering is done
           by the linker so object file format must support named sections and linker must
           place them in a reasonable way.

           This option isn't effective unless you either provide profile feedback (see
           --ffpprrooffiillee--aarrccss for details) or manually annotate functions with "hot" or "cold"
           attributes.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
           Allow the compiler to assume the strictest aliasing rules applicable to the
           language being compiled.  For C (and C++), this activates optimizations based on
           the type of expressions.  In particular, an object of one type is assumed never to
           reside at the same address as an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can alias an "int", but not a
           "void*" or a "double".  A character type may alias any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member than the one most recently
           written to (called "type-punning") is common.  Even with --ffssttrriicctt--aalliiaassiinngg, type-
           punning is allowed, provided the memory is accessed through the union type.  So,
           the code above works as expected.    However, this code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the resulting pointer and
           dereferencing the result has undefined behavior, even if the cast uses a union
           type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The --ffssttrriicctt--aalliiaassiinngg option is enabled at levels --OO22, --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
       --ffaalliiggnn--ffuunnccttiioonnss==_n::_m
       --ffaalliiggnn--ffuunnccttiioonnss==_n::_m::_n_2
       --ffaalliiggnn--ffuunnccttiioonnss==_n::_m::_n_2::_m_2
           Align the start of functions to the next power-of-two greater than _n, skipping up
           to _m-1 bytes.  This ensures that at least the first _m bytes of the function can be
           fetched by the CPU without crossing an _n-byte alignment boundary.

           If _m is not specified, it defaults to _n.

           Examples: --ffaalliiggnn--ffuunnccttiioonnss==3322 aligns functions to the next 32-byte boundary,
           --ffaalliiggnn--ffuunnccttiioonnss==2244 aligns to the next 32-byte boundary only if this can be done
           by skipping 23 bytes or less, --ffaalliiggnn--ffuunnccttiioonnss==3322::77 aligns to the next 32-byte
           boundary only if this can be done by skipping 6 bytes or less.

           The second pair of _n_2:_m_2 values allows you to specify a secondary alignment:
           --ffaalliiggnn--ffuunnccttiioonnss==6644::77::3322::33 aligns to the next 64-byte boundary if this can be done
           by skipping 6 bytes or less, otherwise aligns to the next 32-byte boundary if this
           can be done by skipping 2 bytes or less.  If _m_2 is not specified, it defaults to
           _n_2.

           Some assemblers only support this flag when _n is a power of two; in that case, it
           is rounded up.

           --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are equivalent and mean that functions
           are not aligned.

           If _n is not specified or is zero, use a machine-dependent default.  The maximum
           allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --fflliimmiitt--ffuunnccttiioonn--aalliiggnnmmeenntt
           If this option is enabled, the compiler tries to avoid unnecessarily overaligning
           functions. It attempts to instruct the assembler to align by the amount specified
           by --ffaalliiggnn--ffuunnccttiioonnss, but not to skip more bytes than the size of the function.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
       --ffaalliiggnn--llaabbeellss==_n::_m
       --ffaalliiggnn--llaabbeellss==_n::_m::_n_2
       --ffaalliiggnn--llaabbeellss==_n::_m::_n_2::_m_2
           Align all branch targets to a power-of-two boundary.

           Parameters of this option are analogous to the --ffaalliiggnn--ffuunnccttiioonnss option.
           --ffnnoo--aalliiggnn--llaabbeellss and --ffaalliiggnn--llaabbeellss==11 are equivalent and mean that labels are not
           aligned.

           If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and are greater than this value,
           then their values are used instead.

           If _n is not specified or is zero, use a machine-dependent default which is very
           likely to be 11, meaning no alignment.  The maximum allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
       --ffaalliiggnn--llooooppss==_n::_m
       --ffaalliiggnn--llooooppss==_n::_m::_n_2
       --ffaalliiggnn--llooooppss==_n::_m::_n_2::_m_2
           Align loops to a power-of-two boundary.  If the loops are executed many times, this
           makes up for any execution of the dummy padding instructions.

           Parameters of this option are analogous to the --ffaalliiggnn--ffuunnccttiioonnss option.
           --ffnnoo--aalliiggnn--llooooppss and --ffaalliiggnn--llooooppss==11 are equivalent and mean that loops are not
           aligned.  The maximum allowed _n option value is 65536.

           If _n is not specified or is zero, use a machine-dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
       --ffaalliiggnn--jjuummppss==_n::_m
       --ffaalliiggnn--jjuummppss==_n::_m::_n_2
       --ffaalliiggnn--jjuummppss==_n::_m::_n_2::_m_2
           Align branch targets to a power-of-two boundary, for branch targets where the
           targets can only be reached by jumping.  In this case, no dummy operations need be
           executed.

           Parameters of this option are analogous to the --ffaalliiggnn--ffuunnccttiioonnss option.
           --ffnnoo--aalliiggnn--jjuummppss and --ffaalliiggnn--jjuummppss==11 are equivalent and mean that loops are not
           aligned.

           If _n is not specified or is zero, use a machine-dependent default.  The maximum
           allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --ffuunniitt--aatt--aa--ttiimmee
           This option is left for compatibility reasons. --ffuunniitt--aatt--aa--ttiimmee has no effect,
           while --ffnnoo--uunniitt--aatt--aa--ttiimmee implies --ffnnoo--ttoopplleevveell--rreeoorrddeerr and --ffnnoo--sseeccttiioonn--aanncchhoorrss.

           Enabled by default.

       --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           Do not reorder top-level functions, variables, and "asm" statements.  Output them
           in the same order that they appear in the input file.  When this option is used,
           unreferenced static variables are not removed.  This option is intended to support
           existing code that relies on a particular ordering.  For new code, it is better to
           use attributes when possible.

           --ffttoopplleevveell--rreeoorrddeerr is the default at --OO11 and higher, and also at --OO00 if
           --ffsseeccttiioonn--aanncchhoorrss is explicitly requested.  Additionally --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           implies --ffnnoo--sseeccttiioonn--aanncchhoorrss.

       --ffwweebb
           Constructs webs as commonly used for register allocation purposes and assign each
           web individual pseudo register.  This allows the register allocation pass to
           operate on pseudos directly, but also strengthens several other optimization
           passes, such as CSE, loop optimizer and trivial dead code remover.  It can,
           however, make debugging impossible, since variables no longer stay in a "home
           register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffwwhhoollee--pprrooggrraamm
           Assume that the current compilation unit represents the whole program being
           compiled.  All public functions and variables with the exception of "main" and
           those merged by attribute "externally_visible" become static functions and in
           effect are optimized more aggressively by interprocedural optimizers.

           This option should not be used in combination with --ffllttoo.  Instead relying on a
           linker plugin should provide safer and more precise information.

       --ffllttoo[[==_n]]
           This option runs the standard link-time optimizer.  When invoked with source code,
           it generates GIMPLE (one of GCC's internal representations) and writes it to
           special ELF sections in the object file.  When the object files are linked
           together, all the function bodies are read from these ELF sections and instantiated
           as if they had been part of the same translation unit.

           To use the link-time optimizer, --ffllttoo and optimization options should be specified
           at compile time and during the final link.  It is recommended that you compile all
           the files participating in the same link with the same options and also specify
           those options at link time.  For example:

                   gcc -c -O2 -flto foo.c
                   gcc -c -O2 -flto bar.c
                   gcc -o myprog -flto -O2 foo.o bar.o

           The first two invocations to GCC save a bytecode representation of GIMPLE into
           special ELF sections inside _f_o_o_._o and _b_a_r_._o.  The final invocation reads the GIMPLE
           bytecode from _f_o_o_._o and _b_a_r_._o, merges the two files into a single internal image,
           and compiles the result as usual.  Since both _f_o_o_._o and _b_a_r_._o are merged into a
           single image, this causes all the interprocedural analyses and optimizations in GCC
           to work across the two files as if they were a single one.  This means, for
           example, that the inliner is able to inline functions in _b_a_r_._o into functions in
           _f_o_o_._o and vice-versa.

           Another (simpler) way to enable link-time optimization is:

                   gcc -o myprog -flto -O2 foo.c bar.c

           The above generates bytecode for _f_o_o_._c and _b_a_r_._c, merges them together into a
           single GIMPLE representation and optimizes them as usual to produce _m_y_p_r_o_g.

           The important thing to keep in mind is that to enable link-time optimizations you
           need to use the GCC driver to perform the link step.  GCC automatically performs
           link-time optimization if any of the objects involved were compiled with the --ffllttoo
           command-line option.  You can always override the automatic decision to do link-
           time optimization by passing --ffnnoo--llttoo to the link command.

           To make whole program optimization effective, it is necessary to make certain whole
           program assumptions.  The compiler needs to know what functions and variables can
           be accessed by libraries and runtime outside of the link-time optimized unit.  When
           supported by the linker, the linker plugin (see --ffuussee--lliinnkkeerr--pplluuggiinn) passes
           information to the compiler about used and externally visible symbols.  When the
           linker plugin is not available, --ffwwhhoollee--pprrooggrraamm should be used to allow the
           compiler to make these assumptions, which leads to more aggressive optimization
           decisions.

           When a file is compiled with --ffllttoo without --ffuussee--lliinnkkeerr--pplluuggiinn, the generated
           object file is larger than a regular object file because it contains GIMPLE
           bytecodes and the usual final code (see --ffffaatt--llttoo--oobbjjeeccttss.  This means that object
           files with LTO information can be linked as normal object files; if --ffnnoo--llttoo is
           passed to the linker, no interprocedural optimizations are applied.  Note that when
           --ffnnoo--ffaatt--llttoo--oobbjjeeccttss is enabled the compile stage is faster but you cannot perform
           a regular, non-LTO link on them.

           When producing the final binary, GCC only applies link-time optimizations to those
           files that contain bytecode.  Therefore, you can mix and match object files and
           libraries with GIMPLE bytecodes and final object code.  GCC automatically selects
           which files to optimize in LTO mode and which files to link without further
           processing.

           Generally, options specified at link time override those specified at compile time,
           although in some cases GCC attempts to infer link-time options from the settings
           used to compile the input files.

           If you do not specify an optimization level option --OO at link time, then GCC uses
           the highest optimization level used when compiling the object files.  Note that it
           is generally ineffective to specify an optimization level option only at link time
           and not at compile time, for two reasons.  First, compiling without optimization
           suppresses compiler passes that gather information needed for effective
           optimization at link time.  Second, some early optimization passes can be performed
           only at compile time and not at link time.

           There are some code generation flags preserved by GCC when generating bytecodes, as
           they need to be used during the final link.  Currently, the following options and
           their settings are taken from the first object file that explicitly specifies them:
           --ffPPIICC, --ffppiicc, --ffppiiee, --ffccoommmmoonn, --ffeexxcceeppttiioonnss, --ffnnoonn--ccaallll--eexxcceeppttiioonnss, --ffggnnuu--ttmm and
           all the --mm target flags.

           Certain ABI-changing flags are required to match in all compilation units, and
           trying to override this at link time with a conflicting value is ignored.  This
           includes options such as --ffrreegg--ssttrruucctt--rreettuurrnn and --ffppcccc--ssttrruucctt--rreettuurrnn.

           Other options such as --ffffpp--ccoonnttrraacctt, --ffnnoo--ssttrriicctt--oovveerrffllooww, --ffwwrraappvv, --ffnnoo--ttrraappvv or
           --ffnnoo--ssttrriicctt--aalliiaassiinngg are passed through to the link stage and merged conservatively
           for conflicting translation units.  Specifically --ffnnoo--ssttrriicctt--oovveerrffllooww, --ffwwrraappvv and
           --ffnnoo--ttrraappvv take precedence; and for example --ffffpp--ccoonnttrraacctt==ooffff takes precedence over
           --ffffpp--ccoonnttrraacctt==ffaasstt.  You can override them at link time.

           When you need to pass options to the assembler via --WWaa or --XXaasssseemmbblleerr make sure to
           either compile such translation units with --ffnnoo--llttoo or consistently use the same
           assembler options on all translation units.  You can alternatively also specify
           assembler options at LTO link time.

           To enable debug info generation you need to supply --gg at compile-time.  If any of
           the input files at link time were built with debug info generation enabled the link
           will enable debug info generation as well.  Any elaborate debug info settings like
           the dwarf level --ggddwwaarrff--55 need to be explicitely repeated at the linker command
           line and mixing different settings in different translation units is discouraged.

           If LTO encounters objects with C linkage declared with incompatible types in
           separate translation units to be linked together (undefined behavior according to
           ISO C99 6.2.7), a non-fatal diagnostic may be issued.  The behavior is still
           undefined at run time.  Similar diagnostics may be raised for other languages.

           Another feature of LTO is that it is possible to apply interprocedural
           optimizations on files written in different languages:

                   gcc -c -flto foo.c
                   g++ -c -flto bar.cc
                   gfortran -c -flto baz.f90
                   g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran

           Notice that the final link is done with gg++++ to get the C++ runtime libraries and
           --llggffoorrttrraann is added to get the Fortran runtime libraries.  In general, when mixing
           languages in LTO mode, you should use the same link command options as when mixing
           languages in a regular (non-LTO) compilation.

           If object files containing GIMPLE bytecode are stored in a library archive, say
           _l_i_b_f_o_o_._a, it is possible to extract and use them in an LTO link if you are using a
           linker with plugin support.  To create static libraries suitable for LTO, use ggcccc--
           aarr and ggcccc--rraannlliibb instead of aarr and rraannlliibb; to show the symbols of object files
           with GIMPLE bytecode, use ggcccc--nnmm.  Those commands require that aarr, rraannlliibb and nnmm
           have been compiled with plugin support.  At link time, use the flag
           --ffuussee--lliinnkkeerr--pplluuggiinn to ensure that the library participates in the LTO optimization
           process:

                   gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo

           With the linker plugin enabled, the linker extracts the needed GIMPLE files from
           _l_i_b_f_o_o_._a and passes them on to the running GCC to make them part of the aggregated
           GIMPLE image to be optimized.

           If you are not using a linker with plugin support and/or do not enable the linker
           plugin, then the objects inside _l_i_b_f_o_o_._a are extracted and linked as usual, but
           they do not participate in the LTO optimization process.  In order to make a static
           library suitable for both LTO optimization and usual linkage, compile its object
           files with --ffllttoo --ffffaatt--llttoo--oobbjjeeccttss.

           Link-time optimizations do not require the presence of the whole program to
           operate.  If the program does not require any symbols to be exported, it is
           possible to combine --ffllttoo and --ffwwhhoollee--pprrooggrraamm to allow the interprocedural
           optimizers to use more aggressive assumptions which may lead to improved
           optimization opportunities.  Use of --ffwwhhoollee--pprrooggrraamm is not needed when linker
           plugin is active (see --ffuussee--lliinnkkeerr--pplluuggiinn).

           The current implementation of LTO makes no attempt to generate bytecode that is
           portable between different types of hosts.  The bytecode files are versioned and
           there is a strict version check, so bytecode files generated in one version of GCC
           do not work with an older or newer version of GCC.

           Link-time optimization does not work well with generation of debugging information
           on systems other than those using a combination of ELF and DWARF.

           If you specify the optional _n, the optimization and code generation done at link
           time is executed in parallel using _n parallel jobs by utilizing an installed mmaakkee
           program.  The environment variable MMAAKKEE may be used to override the program used.

           You can also specify --ffllttoo==jjoobbsseerrvveerr to use GNU make's job server mode to determine
           the number of parallel jobs. This is useful when the Makefile calling GCC is
           already executing in parallel.  You must prepend a ++ to the command recipe in the
           parent Makefile for this to work.  This option likely only works if MMAAKKEE is GNU
           make.

           Use --ffllttoo==aauuttoo to use GNU make's job server, if available, or otherwise fall back
           to autodetection of the number of CPU threads present in your system.

       --ffllttoo--ppaarrttiittiioonn==_a_l_g
           Specify the partitioning algorithm used by the link-time optimizer.  The value is
           either 11ttoo11 to specify a partitioning mirroring the original source files or
           bbaallaanncceedd to specify partitioning into equally sized chunks (whenever possible) or
           mmaaxx to create new partition for every symbol where possible.  Specifying nnoonnee as an
           algorithm disables partitioning and streaming completely.  The default value is
           bbaallaanncceedd. While 11ttoo11 can be used as an workaround for various code ordering issues,
           the mmaaxx partitioning is intended for internal testing only.  The value oonnee
           specifies that exactly one partition should be used while the value nnoonnee bypasses
           partitioning and executes the link-time optimization step directly from the WPA
           phase.

       --ffllttoo--ooddrr--ttyyppee--mmeerrggiinngg
           Enable streaming of mangled types names of C++ types and their unification at link
           time.  This increases size of LTO object files, but enables diagnostics about One
           Definition Rule violations.

       --ffllttoo--ccoommpprreessssiioonn--lleevveell==_n
           This option specifies the level of compression used for intermediate language
           written to LTO object files, and is only meaningful in conjunction with LTO mode
           (--ffllttoo).  Valid values are 0 (no compression) to 9 (maximum compression).  Values
           outside this range are clamped to either 0 or 9.  If the option is not given, a
           default balanced compression setting is used.

       --ffuussee--lliinnkkeerr--pplluuggiinn
           Enables the use of a linker plugin during link-time optimization.  This option
           relies on plugin support in the linker, which is available in gold or in GNU ld
           2.21 or newer.

           This option enables the extraction of object files with GIMPLE bytecode out of
           library archives. This improves the quality of optimization by exposing more code
           to the link-time optimizer.  This information specifies what symbols can be
           accessed externally (by non-LTO object or during dynamic linking).  Resulting code
           quality improvements on binaries (and shared libraries that use hidden visibility)
           are similar to --ffwwhhoollee--pprrooggrraamm.  See --ffllttoo for a description of the effect of this
           flag and how to use it.

           This option is enabled by default when LTO support in GCC is enabled and GCC was
           configured for use with a linker supporting plugins (GNU ld 2.21 or newer or gold).

       --ffffaatt--llttoo--oobbjjeeccttss
           Fat LTO objects are object files that contain both the intermediate language and
           the object code. This makes them usable for both LTO linking and normal linking.
           This option is effective only when compiling with --ffllttoo and is ignored at link
           time.

           --ffnnoo--ffaatt--llttoo--oobbjjeeccttss improves compilation time over plain LTO, but requires the
           complete toolchain to be aware of LTO. It requires a linker with linker plugin
           support for basic functionality.  Additionally, nnmm, aarr and rraannlliibb need to support
           linker plugins to allow a full-featured build environment (capable of building
           static libraries etc).  GCC provides the ggcccc--aarr, ggcccc--nnmm, ggcccc--rraannlliibb wrappers to
           pass the right options to these tools. With non fat LTO makefiles need to be
           modified to use them.

           Note that modern binutils provide plugin auto-load mechanism.  Installing the
           linker plugin into _$_l_i_b_d_i_r_/_b_f_d_-_p_l_u_g_i_n_s has the same effect as usage of the command
           wrappers (ggcccc--aarr, ggcccc--nnmm and ggcccc--rraannlliibb).

           The default is --ffnnoo--ffaatt--llttoo--oobbjjeeccttss on targets with linker plugin support.

       --ffccoommppaarree--eelliimm
           After register allocation and post-register allocation instruction splitting,
           identify arithmetic instructions that compute processor flags similar to a
           comparison operation based on that arithmetic.  If possible, eliminate the explicit
           comparison operation.

           This pass only applies to certain targets that cannot explicitly represent the
           comparison operation before register allocation is complete.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccpprroopp--rreeggiisstteerrss
           After register allocation and post-register allocation instruction splitting,
           perform a copy-propagation pass to try to reduce scheduling dependencies and
           occasionally eliminate the copy.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffpprrooffiillee--ccoorrrreeccttiioonn
           Profiles collected using an instrumented binary for multi-threaded programs may be
           inconsistent due to missed counter updates. When this option is specified, GCC uses
           heuristics to correct or smooth out such inconsistencies. By default, GCC emits an
           error message when an inconsistent profile is detected.

           This option is enabled by --ffaauuttoo--pprrooffiillee.

       --ffpprrooffiillee--uussee
       --ffpprrooffiillee--uussee==_p_a_t_h
           Enable profile feedback-directed optimizations, and the following optimizations,
           many of which are generally profitable only with profile feedback available:

           --ffbbrraanncchh--pprroobbaabbiilliittiieess  --ffpprrooffiillee--vvaalluueess --ffuunnrroollll--llooooppss  --ffppeeeell--llooooppss  --ffttrraacceerr
           --ffvvpptt --ffiinnlliinnee--ffuunnccttiioonnss  --ffiippaa--ccpp  --ffiippaa--ccpp--cclloonnee  --ffiippaa--bbiitt--ccpp
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg  --ffsspplliitt--llooooppss  --ffuunnsswwiittcchh--llooooppss --ffggccssee--aafftteerr--rreellooaadd
           --ffttrreeee--lloooopp--vveeccttoorriizzee  --ffttrreeee--ssllpp--vveeccttoorriizzee --ffvveecctt--ccoosstt--mmooddeell==ddyynnaammiicc
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffpprrooffiillee--rreeoorrddeerr--ffuunnccttiioonnss

           Before you can use this option, you must first generate profiling information.

           By default, GCC emits an error message if the feedback profiles do not match the
           source code.  This error can be turned into a warning by using
           --WWnnoo--eerrrroorr==ccoovveerraaggee--mmiissmmaattcchh.  Note this may result in poorly optimized code.
           Additionally, by default, GCC also emits a warning message if the feedback profiles
           do not exist (see --WWmmiissssiinngg--pprrooffiillee).

           If _p_a_t_h is specified, GCC looks at the _p_a_t_h to find the profile feedback data
           files. See --ffpprrooffiillee--ddiirr.

       --ffaauuttoo--pprrooffiillee
       --ffaauuttoo--pprrooffiillee==_p_a_t_h
           Enable sampling-based feedback-directed optimizations, and the following
           optimizations, many of which are generally profitable only with profile feedback
           available:

           --ffbbrraanncchh--pprroobbaabbiilliittiieess  --ffpprrooffiillee--vvaalluueess --ffuunnrroollll--llooooppss  --ffppeeeell--llooooppss  --ffttrraacceerr
           --ffvvpptt --ffiinnlliinnee--ffuunnccttiioonnss  --ffiippaa--ccpp  --ffiippaa--ccpp--cclloonnee  --ffiippaa--bbiitt--ccpp
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg  --ffsspplliitt--llooooppss  --ffuunnsswwiittcchh--llooooppss --ffggccssee--aafftteerr--rreellooaadd
           --ffttrreeee--lloooopp--vveeccttoorriizzee  --ffttrreeee--ssllpp--vveeccttoorriizzee --ffvveecctt--ccoosstt--mmooddeell==ddyynnaammiicc
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffpprrooffiillee--ccoorrrreeccttiioonn

           _p_a_t_h is the name of a file containing AutoFDO profile information.  If omitted, it
           defaults to _f_b_d_a_t_a_._a_f_d_o in the current directory.

           Producing an AutoFDO profile data file requires running your program with the ppeerrff
           utility on a supported GNU/Linux target system.  For more information, see
           <hhttttppss::////ppeerrff..wwiikkii..kkeerrnneell..oorrgg//>.

           E.g.

                   perf record -e br_inst_retired:near_taken -b -o perf.data \
                       -- your_program

           Then use the ccrreeaattee__ggccoovv tool to convert the raw profile data to a format that can
           be used by GCC.  You must also supply the unstripped binary for your program to
           this tool.  See <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//aauuttooffddoo>.

           E.g.

                   create_gcov --binary=your_program.unstripped --profile=perf.data \
                       --gcov=profile.afdo

       The following options control compiler behavior regarding floating-point arithmetic.
       These options trade off between speed and correctness.  All must be specifically
       enabled.

       --ffffllooaatt--ssttoorree
           Do not store floating-point variables in registers, and inhibit other options that
           might change whether a floating-point value is taken from a register or memory.

           This option prevents undesirable excess precision on machines such as the 68000
           where the floating registers (of the 68881) keep more precision than a "double" is
           supposed to have.  Similarly for the x86 architecture.  For most programs, the
           excess precision does only good, but a few programs rely on the precise definition
           of IEEE floating point.  Use --ffffllooaatt--ssttoorree for such programs, after modifying them
           to store all pertinent intermediate computations into variables.

       --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e
           This option allows further control over excess precision on machines where
           floating-point operations occur in a format with more precision or range than the
           IEEE standard and interchange floating-point types.  By default,
           --ffeexxcceessss--pprreecciissiioonn==ffaasstt is in effect; this means that operations may be carried out
           in a wider precision than the types specified in the source if that would result in
           faster code, and it is unpredictable when rounding to the types specified in the
           source code takes place.  When compiling C, if --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is
           specified then excess precision follows the rules specified in ISO C99; in
           particular, both casts and assignments cause values to be rounded to their semantic
           types (whereas --ffffllooaatt--ssttoorree only affects assignments).  This option is enabled by
           default for C if a strict conformance option such as --ssttdd==cc9999 is used.  --ffffaasstt--mmaatthh
           enables --ffeexxcceessss--pprreecciissiioonn==ffaasstt by default regardless of whether a strict
           conformance option is used.

           --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is not implemented for languages other than C.  On the
           x86, it has no effect if --mmffppmmaatthh==ssssee or --mmffppmmaatthh==ssssee++338877 is specified; in the
           former case, IEEE semantics apply without excess precision, and in the latter,
           rounding is unpredictable.

       --ffffaasstt--mmaatthh
           Sets the options --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss, --ffffiinniittee--mmaatthh--oonnllyy,
           --ffnnoo--rroouunnddiinngg--mmaatthh, --ffnnoo--ssiiggnnaalliinngg--nnaannss, --ffccxx--lliimmiitteedd--rraannggee and
           --ffeexxcceessss--pprreecciissiioonn==ffaasstt.

           This option causes the preprocessor macro "__FAST_MATH__" to be defined.

           This option is not turned on by any --OO option besides --OOffaasstt since it can result in
           incorrect output for programs that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may, however, yield faster code for
           programs that do not require the guarantees of these specifications.

       --ffnnoo--mmaatthh--eerrrrnnoo
           Do not set "errno" after calling math functions that are executed with a single
           instruction, e.g., "sqrt".  A program that relies on IEEE exceptions for math error
           handling may want to use this flag for speed while maintaining IEEE arithmetic
           compatibility.

           This option is not turned on by any --OO option since it can result in incorrect
           output for programs that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may, however, yield faster code for
           programs that do not require the guarantees of these specifications.

           The default is --ffmmaatthh--eerrrrnnoo.

           On Darwin systems, the math library never sets "errno".  There is therefore no
           reason for the compiler to consider the possibility that it might, and
           --ffnnoo--mmaatthh--eerrrrnnoo is the default.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           Allow optimizations for floating-point arithmetic that (a) assume that arguments
           and results are valid and (b) may violate IEEE or ANSI standards.  When used at
           link time, it may include libraries or startup files that change the default FPU
           control word or other similar optimizations.

           This option is not turned on by any --OO option since it can result in incorrect
           output for programs that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may, however, yield faster code for
           programs that do not require the guarantees of these specifications.  Enables
           --ffnnoo--ssiiggnneedd--zzeerrooss, --ffnnoo--ttrraappppiinngg--mmaatthh, --ffaassssoocciiaattiivvee--mmaatthh and --ffrreecciipprrooccaall--mmaatthh.

           The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffaassssoocciiaattiivvee--mmaatthh
           Allow re-association of operands in series of floating-point operations.  This
           violates the ISO C and C++ language standard by possibly changing computation
           result.  NOTE: re-ordering may change the sign of zero as well as ignore NaNs and
           inhibit or create underflow or overflow (and thus cannot be used on code that
           relies on rounding behavior like "(x + 2**52) - 2**52".  May also reorder floating-
           point comparisons and thus may not be used when ordered comparisons are required.
           This option requires that both --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh be in
           effect.  Moreover, it doesn't make much sense with --ffrroouunnddiinngg--mmaatthh. For Fortran the
           option is automatically enabled when both --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh
           are in effect.

           The default is --ffnnoo--aassssoocciiaattiivvee--mmaatthh.

       --ffrreecciipprrooccaall--mmaatthh
           Allow the reciprocal of a value to be used instead of dividing by the value if this
           enables optimizations.  For example "x / y" can be replaced with "x * (1/y)", which
           is useful if "(1/y)" is subject to common subexpression elimination.  Note that
           this loses precision and increases the number of flops operating on the value.

           The default is --ffnnoo--rreecciipprrooccaall--mmaatthh.

       --ffffiinniittee--mmaatthh--oonnllyy
           Allow optimizations for floating-point arithmetic that assume that arguments and
           results are not NaNs or +-Infs.

           This option is not turned on by any --OO option since it can result in incorrect
           output for programs that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may, however, yield faster code for
           programs that do not require the guarantees of these specifications.

           The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ssiiggnneedd--zzeerrooss
           Allow optimizations for floating-point arithmetic that ignore the signedness of
           zero.  IEEE arithmetic specifies the behavior of distinct +0.0 and -0.0 values,
           which then prohibits simplification of expressions such as x+0.0 or 0.0*x (even
           with --ffffiinniittee--mmaatthh--oonnllyy).  This option implies that the sign of a zero result isn't
           significant.

           The default is --ffssiiggnneedd--zzeerrooss.

       --ffnnoo--ttrraappppiinngg--mmaatthh
           Compile code assuming that floating-point operations cannot generate user-visible
           traps.  These traps include division by zero, overflow, underflow, inexact result
           and invalid operation.  This option requires that --ffnnoo--ssiiggnnaalliinngg--nnaannss be in effect.
           Setting this option may allow faster code if one relies on "non-stop" IEEE
           arithmetic, for example.

           This option should never be turned on by any --OO option since it can result in
           incorrect output for programs that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is --ffttrraappppiinngg--mmaatthh.

       --ffrroouunnddiinngg--mmaatthh
           Disable transformations and optimizations that assume default floating-point
           rounding behavior.  This is round-to-zero for all floating point to integer
           conversions, and round-to-nearest for all other arithmetic truncations.  This
           option should be specified for programs that change the FP rounding mode
           dynamically, or that may be executed with a non-default rounding mode.  This option
           disables constant folding of floating-point expressions at compile time (which may
           be affected by rounding mode) and arithmetic transformations that are unsafe in the
           presence of sign-dependent rounding modes.

           The default is --ffnnoo--rroouunnddiinngg--mmaatthh.

           This option is experimental and does not currently guarantee to disable all GCC
           optimizations that are affected by rounding mode.  Future versions of GCC may
           provide finer control of this setting using C99's "FENV_ACCESS" pragma.  This
           command-line option will be used to specify the default state for "FENV_ACCESS".

       --ffssiiggnnaalliinngg--nnaannss
           Compile code assuming that IEEE signaling NaNs may generate user-visible traps
           during floating-point operations.  Setting this option disables optimizations that
           may change the number of exceptions visible with signaling NaNs.  This option
           implies --ffttrraappppiinngg--mmaatthh.

           This option causes the preprocessor macro "__SUPPORT_SNAN__" to be defined.

           The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

           This option is experimental and does not currently guarantee to disable all GCC
           optimizations that affect signaling NaN behavior.

       --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt
           Do not allow the built-in functions "ceil", "floor", "round" and "trunc", and their
           "float" and "long double" variants, to generate code that raises the "inexact"
           floating-point exception for noninteger arguments.  ISO C99 and C11 allow these
           functions to raise the "inexact" exception, but ISO/IEC TS 18661-1:2014, the C
           bindings to IEEE 754-2008, does not allow these functions to do so.

           The default is --ffffpp--iinntt--bbuuiillttiinn--iinneexxaacctt, allowing the exception to be raised.  This
           option does nothing unless --ffttrraappppiinngg--mmaatthh is in effect.

           Even if --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt is used, if the functions generate a call to a
           library function then the "inexact" exception may be raised if the library
           implementation does not follow TS 18661.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           Treat floating-point constants as single precision instead of implicitly converting
           them to double-precision constants.

       --ffccxx--lliimmiitteedd--rraannggee
           When enabled, this option states that a range reduction step is not needed when
           performing complex division.  Also, there is no checking whether the result of a
           complex multiplication or division is "NaN + I*NaN", with an attempt to rescue the
           situation in that case.  The default is --ffnnoo--ccxx--lliimmiitteedd--rraannggee, but is enabled by
           --ffffaasstt--mmaatthh.

           This option controls the default setting of the ISO C99 "CX_LIMITED_RANGE" pragma.
           Nevertheless, the option applies to all languages.

       --ffccxx--ffoorrttrraann--rruulleess
           Complex multiplication and division follow Fortran rules.  Range reduction is done
           as part of complex division, but there is no checking whether the result of a
           complex multiplication or division is "NaN + I*NaN", with an attempt to rescue the
           situation in that case.

           The default is --ffnnoo--ccxx--ffoorrttrraann--rruulleess.

       The following options control optimizations that may improve performance, but are not
       enabled by any --OO options.  This section includes experimental options that may produce
       broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
           After running a program compiled with --ffpprrooffiillee--aarrccss, you can compile it a second
           time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve optimizations based on the number of
           times each branch was taken.  When a program compiled with --ffpprrooffiillee--aarrccss exits, it
           saves arc execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._g_c_d_a for each source file.
           The information in this data file is very dependent on the structure of the
           generated code, so you must use the same source code and the same optimization
           options for both compilations.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each JJUUMMPP__IINNSSNN and
           CCAALLLL__IINNSSNN.  These can be used to improve optimization.  Currently, they are only
           used in one place: in _r_e_o_r_g_._c, instead of guessing which path a branch is most
           likely to take, the RREEGG__BBRR__PPRROOBB values are used to exactly determine which path is
           taken more often.

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffpprrooffiillee--vvaalluueess
           If combined with --ffpprrooffiillee--aarrccss, it adds code so that some data about values of
           expressions in the program is gathered.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered from profiling values
           of expressions for usage in optimizations.

           Enabled by --ffpprrooffiillee--ggeenneerraattee, --ffpprrooffiillee--uussee, and --ffaauuttoo--pprrooffiillee.

       --ffpprrooffiillee--rreeoorrddeerr--ffuunnccttiioonnss
           Function reordering based on profile instrumentation collects first time of
           execution of a function and orders these functions in ascending order.

           Enabled with --ffpprrooffiillee--uussee.

       --ffvvpptt
           If combined with --ffpprrooffiillee--aarrccss, this option instructs the compiler to add code to
           gather information about values of expressions.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered and actually performs
           the optimizations based on them.  Currently the optimizations include
           specialization of division operations using the knowledge about the value of the
           denominator.

           Enabled with --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffrreennaammee--rreeggiisstteerrss
           Attempt to avoid false dependencies in scheduled code by making use of registers
           left over after register allocation.  This optimization most benefits processors
           with lots of registers.  Depending on the debug information format adopted by the
           target, however, it can make debugging impossible, since variables no longer stay
           in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffsscchheedduullee--ffuussiioonn
           Performs a target dependent pass over the instruction stream to schedule
           instructions of same type together because target machine can execute them more
           efficiently if they are adjacent to each other in the instruction flow.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.  This transformation
           simplifies the control flow of the function allowing other optimizations to do a
           better job.

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be determined at compile time or upon
           entry to the loop.  --ffuunnrroollll--llooooppss implies --ffrreerruunn--ccssee--aafftteerr--lloooopp, --ffwweebb and
           --ffrreennaammee--rreeggiisstteerrss.  It also turns on complete loop peeling (i.e. complete removal
           of loops with a small constant number of iterations).  This option makes code
           larger, and may or may not make it run faster.

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations is uncertain when the loop is
           entered.  This usually makes programs run more slowly.  --ffuunnrroollll--aallll--llooooppss implies
           the same options as --ffuunnrroollll--llooooppss.

       --ffppeeeell--llooooppss
           Peels loops for which there is enough information that they do not roll much (from
           profile feedback or static analysis).  It also turns on complete loop peeling (i.e.
           complete removal of loops with small constant number of iterations).

           Enabled by --OO33, --ffpprrooffiillee--uussee, and --ffaauuttoo--pprrooffiillee.

       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled at level
           --OO11 and higher, except for --OOgg.

       --ffsspplliitt--llooooppss
           Split a loop into two if it contains a condition that's always true for one side of
           the iteration space and false for the other.

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffuunnsswwiittcchh--llooooppss
           Move branches with loop invariant conditions out of the loop, with duplicates of
           the loop on both branches (modified according to result of the condition).

           Enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffvveerrssiioonn--llooooppss--ffoorr--ssttrriiddeess
           If a loop iterates over an array with a variable stride, create another version of
           the loop that assumes the stride is always one.  For example:

                   for (int i = 0; i < n; ++i)
                     x[i * stride] = ...;

           becomes:

                   if (stride == 1)
                     for (int i = 0; i < n; ++i)
                       x[i] = ...;
                   else
                     for (int i = 0; i < n; ++i)
                       x[i * stride] = ...;

           This is particularly useful for assumed-shape arrays in Fortran where (for example)
           it allows better vectorization assuming contiguous accesses.  This flag is enabled
           by default at --OO33.  It is also enabled by --ffpprrooffiillee--uussee and --ffaauuttoo--pprrooffiillee.

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
           Place each function or data item into its own section in the output file if the
           target supports arbitrary sections.  The name of the function or the name of the
           data item determines the section's name in the output file.

           Use these options on systems where the linker can perform optimizations to improve
           locality of reference in the instruction space.  Most systems using the ELF object
           format have linkers with such optimizations.  On AIX, the linker rearranges
           sections (CSECTs) based on the call graph.  The performance impact varies.

           Together with a linker garbage collection (linker ----ggcc--sseeccttiioonnss option) these
           options may lead to smaller statically-linked executables (after stripping).

           On ELF/DWARF systems these options do not degenerate the quality of the debug
           information.  There could be issues with other object files/debug info formats.

           Only use these options when there are significant benefits from doing so.  When you
           specify these options, the assembler and linker create larger object and executable
           files and are also slower.  These options affect code generation.  They prevent
           optimizations by the compiler and assembler using relative locations inside a
           translation unit since the locations are unknown until link time.  An example of
           such an optimization is relaxing calls to short call instructions.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           Perform branch target register load optimization before prologue / epilogue
           threading.  The use of target registers can typically be exposed only during
           reload, thus hoisting loads out of loops and doing inter-block scheduling needs a
           separate optimization pass.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           Perform branch target register load optimization after prologue / epilogue
           threading.

       --ffbbttrr--bbbb--eexxcclluussiivvee
           When performing branch target register load optimization, don't reuse branch target
           registers within any basic block.

       --ffssttddaarrgg--oopptt
           Optimize the prologue of variadic argument functions with respect to usage of those
           arguments.

           NOTE: In Ubuntu 14.10 and later versions, --ffssttaacckk--pprrootteeccttoorr--ssttrroonngg is enabled by
           default for C, C++, ObjC, ObjC++, if none of --ffnnoo--ssttaacckk--pprrootteeccttoorr, --nnoossttddlliibb, nor
           --ffffrreeeessttaannddiinngg are found.

       --ffsseeccttiioonn--aanncchhoorrss
           Try to reduce the number of symbolic address calculations by using shared "anchor"
           symbols to address nearby objects.  This transformation can help to reduce the
           number of GOT entries and GOT accesses on some targets.

           For example, the implementation of the following function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           usually calculates the addresses of all three variables, but if you compile it with
           --ffsseeccttiioonn--aanncchhoorrss, it accesses the variables from a common anchor point instead.
           The effect is similar to the following pseudocode (which isn't valid C):

                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
           In some places, GCC uses various constants to control the amount of optimization
           that is done.  For example, GCC does not inline functions that contain more than a
           certain number of instructions.  You can control some of these constants on the
           command line using the ----ppaarraamm option.

           The names of specific parameters, and the meaning of the values, are tied to the
           internals of the compiler, and are subject to change without notice in future
           releases.

           In order to get minimal, maximal and default value of a parameter, one can use
           ----hheellpp==ppaarraamm --QQ options.

           In each case, the _v_a_l_u_e is an integer.  The allowable choices for _n_a_m_e are:

           pprreeddiiccttaabbllee--bbrraanncchh--oouuttccoommee
               When branch is predicted to be taken with probability lower than this threshold
               (in percent), then it is considered well predictable.

           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--iinnssnnss
               RTL if-conversion tries to remove conditional branches around a block and
               replace them with conditionally executed instructions.  This parameter gives
               the maximum number of instructions in a block which should be considered for
               if-conversion.  The compiler will also use other heuristics to decide whether
               if-conversion is likely to be profitable.

           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--pprreeddiiccttaabbllee--ccoosstt
           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--uunnpprreeddiiccttaabbllee--ccoosstt
               RTL if-conversion will try to remove conditional branches around a block and
               replace them with conditionally executed instructions.  These parameters give
               the maximum permissible cost for the sequence that would be generated by if-
               conversion depending on whether the branch is statically determined to be
               predictable or not.  The units for this parameter are the same as those for the
               GCC internal seq_cost metric.  The compiler will try to provide a reasonable
               default for this parameter using the BRANCH_COST target macro.

           mmaaxx--ccrroossssjjuummpp--eeddggeess
               The maximum number of incoming edges to consider for cross-jumping.  The
               algorithm used by --ffccrroossssjjuummppiinngg is O(N^2) in the number of edges incoming to
               each block.  Increasing values mean more aggressive optimization, making the
               compilation time increase with probably small improvement in executable size.

           mmiinn--ccrroossssjjuummpp--iinnssnnss
               The minimum number of instructions that must be matched at the end of two
               blocks before cross-jumping is performed on them.  This value is ignored in the
               case where all instructions in the block being cross-jumped from are matched.

           mmaaxx--ggrrooww--ccooppyy--bbbb--iinnssnnss
               The maximum code size expansion factor when copying basic blocks instead of
               jumping.  The expansion is relative to a jump instruction.

           mmaaxx--ggoottoo--dduupplliiccaattiioonn--iinnssnnss
               The maximum number of instructions to duplicate to a block that jumps to a
               computed goto.  To avoid O(N^2) behavior in a number of passes, GCC factors
               computed gotos early in the compilation process, and unfactors them as late as
               possible.  Only computed jumps at the end of a basic blocks with no more than
               max-goto-duplication-insns are unfactored.

           mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
               The maximum number of instructions to consider when looking for an instruction
               to fill a delay slot.  If more than this arbitrary number of instructions are
               searched, the time savings from filling the delay slot are minimal, so stop
               searching.  Increasing values mean more aggressive optimization, making the
               compilation time increase with probably small improvement in execution time.

           mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
               When trying to fill delay slots, the maximum number of instructions to consider
               when searching for a block with valid live register information.  Increasing
               this arbitrarily chosen value means more aggressive optimization, increasing
               the compilation time.  This parameter should be removed when the delay slot
               code is rewritten to maintain the control-flow graph.

           mmaaxx--ggccssee--mmeemmoorryy
               The approximate maximum amount of memory that can be allocated in order to
               perform the global common subexpression elimination optimization.  If more
               memory than specified is required, the optimization is not done.

           mmaaxx--ggccssee--iinnsseerrttiioonn--rraattiioo
               If the ratio of expression insertions to deletions is larger than this value
               for any expression, then RTL PRE inserts or removes the expression and thus
               leaves partially redundant computations in the instruction stream.

           mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
               The maximum number of pending dependencies scheduling allows before flushing
               the current state and starting over.  Large functions with few branches or
               calls can create excessively large lists which needlessly consume memory and
               resources.

           mmaaxx--mmoodduulloo--bbaacckkttrraacckk--aatttteemmppttss
               The maximum number of backtrack attempts the scheduler should make when modulo
               scheduling a loop.  Larger values can exponentially increase compilation time.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               Several parameters control the tree inliner used in GCC.  This number sets the
               maximum number of instructions (counted in GCC's internal representation) in a
               single function that the tree inliner considers for inlining.  This only
               affects functions declared inline and methods implemented in a class
               declaration (C++).

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of functions that
               would otherwise not be considered for inlining by the compiler are
               investigated.  To those functions, a different (more restrictive) limit
               compared to functions declared inline can be applied.

           mmaaxx--iinnlliinnee--iinnssnnss--ssmmaallll
               This is bound applied to calls which are considered relevant with
               --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiizzee
               This is bound applied to calls which are optimized for size. Small growth may
               be desirable to anticipate optimization oppurtunities exposed by inlining.

           uunniinnlliinneedd--ffuunnccttiioonn--iinnssnnss
               Number of instructions accounted by inliner for function overhead such as
               function prologue and epilogue.

           uunniinnlliinneedd--ffuunnccttiioonn--ttiimmee
               Extra time accounted by inliner for function overhead such as time needed to
               execute function prologue and epilogue

           uunniinnlliinneedd--tthhuunnkk--iinnssnnss
           uunniinnlliinneedd--tthhuunnkk--ttiimmee
               Same as ----ppaarraamm uunniinnlliinneedd--ffuunnccttiioonn--iinnssnnss and ----ppaarraamm uunniinnlliinneedd--ffuunnccttiioonn--ttiimmee
               but applied to function thunks

           iinnlliinnee--mmiinn--ssppeeeedduupp
               When estimated performance improvement of caller + callee runtime exceeds this
               threshold (in percent), the function can be inlined regardless of the limit on
               ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee and ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo.

           llaarrggee--ffuunnccttiioonn--iinnssnnss
               The limit specifying really large functions.  For functions larger than this
               limit after inlining, inlining is constrained by ----ppaarraamm llaarrggee--ffuunnccttiioonn--ggrroowwtthh.
               This parameter is useful primarily to avoid extreme compilation time caused by
               non-linear algorithms used by the back end.

           llaarrggee--ffuunnccttiioonn--ggrroowwtthh
               Specifies maximal growth of large function caused by inlining in percents.  For
               example, parameter value 100 limits large function growth to 2.0 times the
               original size.

           llaarrggee--uunniitt--iinnssnnss
               The limit specifying large translation unit.  Growth caused by inlining of
               units larger than this limit is limited by ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.  For
               small units this might be too tight.  For example, consider a unit consisting
               of function A that is inline and B that just calls A three times.  If B is
               small relative to A, the growth of unit is 300\% and yet such inlining is very
               sane.  For very large units consisting of small inlineable functions, however,
               the overall unit growth limit is needed to avoid exponential explosion of code
               size.  Thus for smaller units, the size is increased to ----ppaarraamm llaarrggee--uunniitt--
               iinnssnnss before applying ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.

           iinnlliinnee--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused by inlining.
               For example, parameter value 20 limits unit growth to 1.2 times the original
               size. Cold functions (either marked cold via an attribute or by profile
               feedback) are not accounted into the unit size.

           iippccpp--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused by
               interprocedural constant propagation.  For example, parameter value 10 limits
               unit growth to 1.1 times the original size.

           llaarrggee--ssttaacckk--ffrraammee
               The limit specifying large stack frames.  While inlining the algorithm is
               trying to not grow past this limit too much.

           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh
               Specifies maximal growth of large stack frames caused by inlining in percents.
               For example, parameter value 1000 limits large stack frame growth to 11 times
               the original size.

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee
           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               Specifies the maximum number of instructions an out-of-line copy of a self-
               recursive inline function can grow into by performing recursive inlining.

               ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee applies to functions declared inline.  For
               functions not declared inline, recursive inlining happens only when
               --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33) is enabled; ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               rreeccuurrssiivvee--aauuttoo applies instead.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh
           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               Specifies the maximum recursion depth used for recursive inlining.

               ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh applies to functions declared inline.  For
               functions not declared inline, recursive inlining happens only when
               --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33) is enabled; ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--
               ddeepptthh--aauuttoo applies instead.

           mmiinn--iinnlliinnee--rreeccuurrssiivvee--pprroobbaabbiilliittyy
               Recursive inlining is profitable only for function having deep recursion in
               average and can hurt for function having little recursion depth by increasing
               the prologue size or complexity of function body to other optimizers.

               When profile feedback is available (see --ffpprrooffiillee--ggeenneerraattee) the actual
               recursion depth can be guessed from the probability that function recurses via
               a given call expression.  This parameter limits inlining only to call
               expressions whose probability exceeds the given threshold (in percents).

           eeaarrllyy--iinnlliinniinngg--iinnssnnss
               Specify growth that the early inliner can make.  In effect it increases the
               amount of inlining for code having a large abstraction penalty.

           mmaaxx--eeaarrllyy--iinnlliinneerr--iitteerraattiioonnss
               Limit of iterations of the early inliner.  This basically bounds the number of
               nested indirect calls the early inliner can resolve.  Deeper chains are still
               handled by late inlining.

           ccoommddaatt--sshhaarriinngg--pprroobbaabbiilliittyy
               Probability (in percent) that C++ inline function with comdat visibility are
               shared across multiple compilation units.

           pprrooffiillee--ffuunncc--iinntteerrnnaall--iidd
               A parameter to control whether to use function internal id in profile database
               lookup. If the value is 0, the compiler uses an id that is based on function
               assembler name and filename, which makes old profile data more tolerant to
               source changes such as function reordering etc.

           mmiinn--vveecctt--lloooopp--bboouunndd
               The minimum number of iterations under which loops are not vectorized when
               --ffttrreeee--vveeccttoorriizzee is used.  The number of iterations after vectorization needs
               to be greater than the value specified by this option to allow vectorization.

           ggccssee--ccoosstt--ddiissttaannccee--rraattiioo
               Scaling factor in calculation of maximum distance an expression can be moved by
               GCSE optimizations.  This is currently supported only in the code hoisting
               pass.  The bigger the ratio, the more aggressive code hoisting is with simple
               expressions, i.e., the expressions that have cost less than ggccssee--uunnrreessttrriicctteedd--
               ccoosstt.  Specifying 0 disables hoisting of simple expressions.

           ggccssee--uunnrreessttrriicctteedd--ccoosstt
               Cost, roughly measured as the cost of a single typical machine instruction, at
               which GCSE optimizations do not constrain the distance an expression can
               travel.  This is currently supported only in the code hoisting pass.  The
               lesser the cost, the more aggressive code hoisting is.  Specifying 0 allows all
               expressions to travel unrestricted distances.

           mmaaxx--hhooiisstt--ddeepptthh
               The depth of search in the dominator tree for expressions to hoist.  This is
               used to avoid quadratic behavior in hoisting algorithm.  The value of 0 does
               not limit on the search, but may slow down compilation of huge functions.

           mmaaxx--ttaaiill--mmeerrggee--ccoommppaarriissoonnss
               The maximum amount of similar bbs to compare a bb with.  This is used to avoid
               quadratic behavior in tree tail merging.

           mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss
               The maximum amount of iterations of the pass over the function.  This is used
               to limit compilation time in tree tail merging.

           ssttoorree--mmeerrggiinngg--aallllooww--uunnaalliiggnneedd
               Allow the store merging pass to introduce unaligned stores if it is legal to do
               so.

           mmaaxx--ssttoorreess--ttoo--mmeerrggee
               The maximum number of stores to attempt to merge into wider stores in the store
               merging pass.

           mmaaxx--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions that a loop may have to be unrolled.  If a
               loop is unrolled, this parameter also determines how many times the loop code
               is unrolled.

           mmaaxx--aavveerraaggee--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions biased by probabilities of their execution
               that a loop may have to be unrolled.  If a loop is unrolled, this parameter
               also determines how many times the loop code is unrolled.

           mmaaxx--uunnrroollll--ttiimmeess
               The maximum number of unrollings of a single loop.

           mmaaxx--ppeeeelleedd--iinnssnnss
               The maximum number of instructions that a loop may have to be peeled.  If a
               loop is peeled, this parameter also determines how many times the loop code is
               peeled.

           mmaaxx--ppeeeell--ttiimmeess
               The maximum number of peelings of a single loop.

           mmaaxx--ppeeeell--bbrraanncchheess
               The maximum number of branches on the hot path through the peeled sequence.

           mmaaxx--ccoommpplleetteellyy--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a completely peeled loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--ttiimmeess
               The maximum number of iterations of a loop to be suitable for complete peeling.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--lloooopp--nneesstt--ddeepptthh
               The maximum depth of a loop nest suitable for complete peeling.

           mmaaxx--uunnsswwiittcchh--iinnssnnss
               The maximum number of insns of an unswitched loop.

           mmaaxx--uunnsswwiittcchh--lleevveell
               The maximum number of branches unswitched in a single loop.

           lliimm--eexxppeennssiivvee
               The minimum cost of an expensive expression in the loop invariant motion.

           iivv--ccoonnssiiddeerr--aallll--ccaannddiiddaatteess--bboouunndd
               Bound on number of candidates for induction variables, below which all
               candidates are considered for each use in induction variable optimizations.  If
               there are more candidates than this, only the most relevant ones are considered
               to avoid quadratic time complexity.

           iivv--mmaaxx--ccoonnssiiddeerreedd--uusseess
               The induction variable optimizations give up on loops that contain more
               induction variable uses.

           iivv--aallwwaayyss--pprruunnee--ccaanndd--sseett--bboouunndd
               If the number of candidates in the set is smaller than this value, always try
               to remove unnecessary ivs from the set when adding a new one.

           aavvgg--lloooopp--nniitteerr
               Average number of iterations of a loop.

           ddssee--mmaaxx--oobbjjeecctt--ssiizzee
               Maximum size (in bytes) of objects tracked bytewise by dead store elimination.
               Larger values may result in larger compilation times.

           ddssee--mmaaxx--aalliiaass--qquueerriieess--ppeerr--ssttoorree
               Maximum number of queries into the alias oracle per store.  Larger values
               result in larger compilation times and may result in more removed dead stores.

           sscceevv--mmaaxx--eexxpprr--ssiizzee
               Bound on size of expressions used in the scalar evolutions analyzer.  Large
               expressions slow the analyzer.

           sscceevv--mmaaxx--eexxpprr--ccoommpplleexxiittyy
               Bound on the complexity of the expressions in the scalar evolutions analyzer.
               Complex expressions slow the analyzer.

           mmaaxx--ttrreeee--iiff--ccoonnvveerrssiioonn--pphhii--aarrggss
               Maximum number of arguments in a PHI supported by TREE if conversion unless the
               loop is marked with simd pragma.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiggnnmmeenntt--cchheecckkss
               The maximum number of run-time checks that can be performed when doing loop
               versioning for alignment in the vectorizer.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiaass--cchheecckkss
               The maximum number of run-time checks that can be performed when doing loop
               versioning for alias in the vectorizer.

           vveecctt--mmaaxx--ppeeeelliinngg--ffoorr--aalliiggnnmmeenntt
               The maximum number of loop peels to enhance access alignment for vectorizer.
               Value -1 means no limit.

           mmaaxx--iitteerraattiioonnss--ttoo--ttrraacckk
               The maximum number of iterations of a loop the brute-force algorithm for
               analysis of the number of iterations of the loop tries to evaluate.

           hhoott--bbbb--ccoouunntt--wwss--ppeerrmmiillllee
               A basic block profile count is considered hot if it contributes to the given
               permillage (i.e. 0...1000) of the entire profiled execution.

           hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
               Select fraction of the entry block frequency of executions of basic block in
               function given basic block needs to have to be considered hot.

           mmaaxx--pprreeddiicctteedd--iitteerraattiioonnss
               The maximum number of loop iterations we predict statically.  This is useful in
               cases where a function contains a single loop with known bound and another loop
               with unknown bound.  The known number of iterations is predicted correctly,
               while the unknown number of iterations average to roughly 10.  This means that
               the loop without bounds appears artificially cold relative to the other one.

           bbuuiillttiinn--eexxppeecctt--pprroobbaabbiilliittyy
               Control the probability of the expression having the specified value. This
               parameter takes a percentage (i.e. 0 ... 100) as input.

           bbuuiillttiinn--ssttrriinngg--ccmmpp--iinnlliinnee--lleennggtthh
               The maximum length of a constant string for a builtin string cmp call eligible
               for inlining.

           aalliiggnn--tthhrreesshhoolldd
               Select fraction of the maximal frequency of executions of a basic block in a
               function to align the basic block.

           aalliiggnn--lloooopp--iitteerraattiioonnss
               A loop expected to iterate at least the selected number of iterations is
               aligned.

           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               This value is used to limit superblock formation once the given percentage of
               executed instructions is covered.  This limits unnecessary code size expansion.

               The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk parameter is used only when profile
               feedback is available.  The real profiles (as opposed to statically estimated
               ones) are much less balanced allowing the threshold to be larger value.

           ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
               Stop tail duplication once code growth has reached given percentage.  This is a
               rather artificial limit, as most of the duplicates are eliminated later in
               cross jumping, so it may be set to much higher values than is the desired code
               growth.

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
               Stop reverse growth when the reverse probability of best edge is less than this
               threshold (in percent).

           ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy
           ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy--ffeeeeddbbaacckk
               Stop forward growth if the best edge has probability lower than this threshold.

               Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two parameters are provided.  ttrraacceerr--mmiinn--
               bbrraanncchh--pprroobbaabbiilliittyy--ffeeeeddbbaacckk is used for compilation with profile feedback and
               ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy compilation without.  The value for compilation
               with profile feedback needs to be more conservative (higher) in order to make
               tracer effective.

           ssttaacckk--ccllaasshh--pprrootteeccttiioonn--gguuaarrdd--ssiizzee
               Specify the size of the operating system provided stack guard as 2 raised to
               _n_u_m bytes.  Higher values may reduce the number of explicit probes, but a value
               larger than the operating system provided guard will leave code vulnerable to
               stack clash style attacks.

           ssttaacckk--ccllaasshh--pprrootteeccttiioonn--pprroobbee--iinntteerrvvaall
               Stack clash protection involves probing stack space as it is allocated.  This
               param controls the maximum distance between probes into the stack as 2 raised
               to _n_u_m bytes.  Higher values may reduce the number of explicit probes, but a
               value larger than the operating system provided guard will leave code
               vulnerable to stack clash style attacks.

           mmaaxx--ccssee--ppaatthh--lleennggtthh
               The maximum number of basic blocks on path that CSE considers.

           mmaaxx--ccssee--iinnssnnss
               The maximum number of instructions CSE processes before flushing.

           ggggcc--mmiinn--eexxppaanndd
               GCC uses a garbage collector to manage its own memory allocation.  This
               parameter specifies the minimum percentage by which the garbage collector's
               heap should be allowed to expand between collections.  Tuning this may improve
               compilation speed; it has no effect on code generation.

               The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when RAM >=
               1GB.  If "getrlimit" is available, the notion of "RAM" is the smallest of
               actual RAM and "RLIMIT_DATA" or "RLIMIT_AS".  If GCC is not able to calculate
               RAM on a particular platform, the lower bound of 30% is used.  Setting this
               parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full collection to occur at
               every opportunity.  This is extremely slow, but can be useful for debugging.

           ggggcc--mmiinn--hheeaappssiizzee
               Minimum size of the garbage collector's heap before it begins bothering to
               collect garbage.  The first collection occurs after the heap expands by ggggcc--
               mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaappssiizzee.  Again, tuning this may improve
               compilation speed, and has no effect on code generation.

               The default is the smaller of RAM/8, RLIMIT_RSS, or a limit that tries to
               ensure that RLIMIT_DATA or RLIMIT_AS are not exceeded, but with a lower bound
               of 4096 (four megabytes) and an upper bound of 131072 (128 megabytes).  If GCC
               is not able to calculate RAM on a particular platform, the lower bound is used.
               Setting this parameter very large effectively disables garbage collection.
               Setting this parameter and ggggcc--mmiinn--eexxppaanndd to zero causes a full collection to
               occur at every opportunity.

           mmaaxx--rreellooaadd--sseeaarrcchh--iinnssnnss
               The maximum number of instruction reload should look backward for equivalent
               register.  Increasing values mean more aggressive optimization, making the
               compilation time increase with probably slightly better performance.

           mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss
               The maximum number of memory locations cselib should take into account.
               Increasing values mean more aggressive optimization, making the compilation
               time increase with probably slightly better performance.

           mmaaxx--sscchheedd--rreeaaddyy--iinnssnnss
               The maximum number of instructions ready to be issued the scheduler should
               consider at any given time during the first scheduling pass.  Increasing values
               mean more thorough searches, making the compilation time increase with probably
               little benefit.

           mmaaxx--sscchheedd--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for interblock
               scheduling.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for pipelining in the
               selective scheduler.

           mmaaxx--sscchheedd--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for interblock
               scheduling.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for pipelining in the
               selective scheduler.

           mmiinn--ssppeecc--pprroobb
               The minimum probability (in percents) of reaching a source block for interblock
               speculative scheduling.

           mmaaxx--sscchheedd--eexxtteenndd--rreeggiioonnss--iitteerrss
               The maximum number of iterations through CFG to extend regions.  A value of 0
               disables region extensions.

           mmaaxx--sscchheedd--iinnssnn--ccoonnfflliicctt--ddeellaayy
               The maximum conflict delay for an insn to be considered for speculative motion.

           sscchheedd--ssppeecc--pprroobb--ccuuttooffff
               The minimal probability of speculation success (in percents), so that
               speculative insns are scheduled.

           sscchheedd--ssttaattee--eeddggee--pprroobb--ccuuttooffff
               The minimum probability an edge must have for the scheduler to save its state
               across it.

           sscchheedd--mmeemm--ttrruuee--ddeepp--ccoosstt
               Minimal distance (in CPU cycles) between store and load targeting same memory
               locations.

           sseellsscchheedd--mmaaxx--llooookkaahheeaadd
               The maximum size of the lookahead window of selective scheduling.  It is a
               depth of search for available instructions.

           sseellsscchheedd--mmaaxx--sscchheedd--ttiimmeess
               The maximum number of times that an instruction is scheduled during selective
               scheduling.  This is the limit on the number of iterations through which the
               instruction may be pipelined.

           sseellsscchheedd--iinnssnnss--ttoo--rreennaammee
               The maximum number of best instructions in the ready list that are considered
               for renaming in the selective scheduler.

           ssmmss--mmiinn--sscc
               The minimum value of stage count that swing modulo scheduler generates.

           mmaaxx--llaasstt--vvaalluuee--rrttll
               The maximum size measured as number of RTLs that can be recorded in an
               expression in combiner for a pseudo register as last known value of that
               register.

           mmaaxx--ccoommbbiinnee--iinnssnnss
               The maximum number of instructions the RTL combiner tries to combine.

           iinntteeggeerr--sshhaarree--lliimmiitt
               Small integer constants can use a shared data structure, reducing the
               compiler's memory usage and increasing its speed.  This sets the maximum value
               of a shared integer constant.

           sssspp--bbuuffffeerr--ssiizzee
               The minimum size of buffers (i.e. arrays) that receive stack smashing
               protection when --ffssttaacckk--pprrootteeccttiioonn is used.

               This default before Ubuntu 10.10 was "8". Currently it is "4", to increase the
               number of functions protected by the stack protector.

           mmiinn--ssiizzee--ffoorr--ssttaacckk--sshhaarriinngg
               The minimum size of variables taking part in stack slot sharing when not
               optimizing.

           mmaaxx--jjuummpp--tthhrreeaadd--dduupplliiccaattiioonn--ssttmmttss
               Maximum number of statements allowed in a block that needs to be duplicated
               when threading jumps.

           mmaaxx--ffiieellddss--ffoorr--ffiieelldd--sseennssiittiivvee
               Maximum number of fields in a structure treated in a field sensitive manner
               during pointer analysis.

           pprreeffeettcchh--llaatteennccyy
               Estimate on average number of instructions that are executed before prefetch
               finishes.  The distance prefetched ahead is proportional to this constant.
               Increasing this number may also lead to less streams being prefetched (see
               ssiimmuullttaanneeoouuss--pprreeffeettcchheess).

           ssiimmuullttaanneeoouuss--pprreeffeettcchheess
               Maximum number of prefetches that can run at the same time.

           ll11--ccaacchhee--lliinnee--ssiizzee
               The size of cache line in L1 data cache, in bytes.

           ll11--ccaacchhee--ssiizzee
               The size of L1 data cache, in kilobytes.

           ll22--ccaacchhee--ssiizzee
               The size of L2 data cache, in kilobytes.

           pprreeffeettcchh--ddyynnaammiicc--ssttrriiddeess
               Whether the loop array prefetch pass should issue software prefetch hints for
               strides that are non-constant.  In some cases this may be beneficial, though
               the fact the stride is non-constant may make it hard to predict when there is
               clear benefit to issuing these hints.

               Set to 1 if the prefetch hints should be issued for non-constant strides.  Set
               to 0 if prefetch hints should be issued only for strides that are known to be
               constant and below pprreeffeettcchh--mmiinniimmuumm--ssttrriiddee.

           pprreeffeettcchh--mmiinniimmuumm--ssttrriiddee
               Minimum constant stride, in bytes, to start using prefetch hints for.  If the
               stride is less than this threshold, prefetch hints will not be issued.

               This setting is useful for processors that have hardware prefetchers, in which
               case there may be conflicts between the hardware prefetchers and the software
               prefetchers.  If the hardware prefetchers have a maximum stride they can
               handle, it should be used here to improve the use of software prefetchers.

               A value of -1 means we don't have a threshold and therefore prefetch hints can
               be issued for any constant stride.

               This setting is only useful for strides that are known and constant.

           lloooopp--iinntteerrcchhaannggee--mmaaxx--nnuumm--ssttmmttss
               The maximum number of stmts in a loop to be interchanged.

           lloooopp--iinntteerrcchhaannggee--ssttrriiddee--rraattiioo
               The minimum ratio between stride of two loops for interchange to be profitable.

           mmiinn--iinnssnn--ttoo--pprreeffeettcchh--rraattiioo
               The minimum ratio between the number of instructions and the number of
               prefetches to enable prefetching in a loop.

           pprreeffeettcchh--mmiinn--iinnssnn--ttoo--mmeemm--rraattiioo
               The minimum ratio between the number of instructions and the number of memory
               references to enable prefetching in a loop.

           uussee--ccaannoonniiccaall--ttyyppeess
               Whether the compiler should use the "canonical" type system.  Should always be
               1, which uses a more efficient internal mechanism for comparing types in C++
               and Objective-C++.  However, if bugs in the canonical type system are causing
               compilation failures, set this value to 0 to disable canonical types.

           sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo
               Switch initialization conversion refuses to create arrays that are bigger than
               sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo times the number of branches in the switch.

           mmaaxx--ppaarrttiiaall--aannttiicc--lleennggtthh
               Maximum length of the partial antic set computed during the tree partial
               redundancy elimination optimization (--ffttrreeee--pprree) when optimizing at --OO33 and
               above.  For some sorts of source code the enhanced partial redundancy
               elimination optimization can run away, consuming all of the memory available on
               the host machine.  This parameter sets a limit on the length of the sets that
               are computed, which prevents the runaway behavior.  Setting a value of 0 for
               this parameter allows an unlimited set length.

           rrppoo--vvnn--mmaaxx--lloooopp--ddeepptthh
               Maximum loop depth that is value-numbered optimistically.  When the limit hits
               the innermost _r_p_o_-_v_n_-_m_a_x_-_l_o_o_p_-_d_e_p_t_h loops and the outermost loop in the loop
               nest are value-numbered optimistically and the remaining ones not.

           ssccccvvnn--mmaaxx--aalliiaass--qquueerriieess--ppeerr--aacccceessss
               Maximum number of alias-oracle queries we perform when looking for redundancies
               for loads and stores.  If this limit is hit the search is aborted and the load
               or store is not considered redundant.  The number of queries is algorithmically
               limited to the number of stores on all paths from the load to the function
               entry.

           iirraa--mmaaxx--llooooppss--nnuumm
               IRA uses regional register allocation by default.  If a function contains more
               loops than the number given by this parameter, only at most the given number of
               the most frequently-executed loops form regions for regional register
               allocation.

           iirraa--mmaaxx--ccoonnfflliicctt--ttaabbllee--ssiizzee
               Although IRA uses a sophisticated algorithm to compress the conflict table, the
               table can still require excessive amounts of memory for huge functions.  If the
               conflict table for a function could be more than the size in MB given by this
               parameter, the register allocator instead uses a faster, simpler, and lower-
               quality algorithm that does not require building a pseudo-register conflict
               table.

           iirraa--lloooopp--rreesseerrvveedd--rreeggss
               IRA can be used to evaluate more accurate register pressure in loops for
               decisions to move loop invariants (see --OO33).  The number of available registers
               reserved for some other purposes is given by this parameter.  Default of the
               parameter is the best found from numerous experiments.

           llrraa--iinnhheerriittaannccee--eebbbb--pprroobbaabbiilliittyy--ccuuttooffff
               LRA tries to reuse values reloaded in registers in subsequent insns.  This
               optimization is called inheritance.  EBB is used as a region to do this
               optimization.  The parameter defines a minimal fall-through edge probability in
               percentage used to add BB to inheritance EBB in LRA.  The default value was
               chosen from numerous runs of SPEC2000 on x86-64.

           lloooopp--iinnvvaarriiaanntt--mmaaxx--bbbbss--iinn--lloooopp
               Loop invariant motion can be very expensive, both in compilation time and in
               amount of needed compile-time memory, with very large loops.  Loops with more
               basic blocks than this parameter won't have loop invariant motion optimization
               performed on them.

           lloooopp--mmaaxx--ddaattaarreeffss--ffoorr--ddaattaaddeeppss
               Building data dependencies is expensive for very large loops.  This parameter
               limits the number of data references in loops that are considered for data
               dependence analysis.  These large loops are no handled by the optimizations
               using loop data dependencies.

           mmaaxx--vvaarrttrraacckk--ssiizzee
               Sets a maximum number of hash table slots to use during variable tracking
               dataflow analysis of any function.  If this limit is exceeded with variable
               tracking at assignments enabled, analysis for that function is retried without
               it, after removing all debug insns from the function.  If the limit is exceeded
               even without debug insns, var tracking analysis is completely disabled for the
               function.  Setting the parameter to zero makes it unlimited.

           mmaaxx--vvaarrttrraacckk--eexxpprr--ddeepptthh
               Sets a maximum number of recursion levels when attempting to map variable names
               or debug temporaries to value expressions.  This trades compilation time for
               more complete debug information.  If this is set too low, value expressions
               that are available and could be represented in debug information may end up not
               being used; setting this higher may enable the compiler to find more complex
               debug expressions, but compile time and memory use may grow.

           mmaaxx--ddeebbuugg--mmaarrkkeerr--ccoouunntt
               Sets a threshold on the number of debug markers (e.g. begin stmt markers) to
               avoid complexity explosion at inlining or expanding to RTL.  If a function has
               more such gimple stmts than the set limit, such stmts will be dropped from the
               inlined copy of a function, and from its RTL expansion.

           mmiinn--nnoonnddeebbuugg--iinnssnn--uuiidd
               Use uids starting at this parameter for nondebug insns.  The range below the
               parameter is reserved exclusively for debug insns created by
               --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, but debug insns may get (non-overlapping) uids
               above it if the reserved range is exhausted.

           iippaa--ssrraa--ppttrr--ggrroowwtthh--ffaaccttoorr
               IPA-SRA replaces a pointer to an aggregate with one or more new parameters only
               when their cumulative size is less or equal to iippaa--ssrraa--ppttrr--ggrroowwtthh--ffaaccttoorr times
               the size of the original pointer parameter.

           ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssppeeeedd
           ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssiizzee
               The two Scalar Reduction of Aggregates passes (SRA and IPA-SRA) aim to replace
               scalar parts of aggregates with uses of independent scalar variables.  These
               parameters control the maximum size, in storage units, of aggregate which is
               considered for replacement when compiling for speed (ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--
               ssiizzee--OOssppeeeedd) or size (ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssiizzee) respectively.

           ssrraa--mmaaxx--pprrooppaaggaattiioonnss
               The maximum number of artificial accesses that Scalar Replacement of Aggregates
               (SRA) will track, per one local variable, in order to facilitate copy
               propagation.

           ttmm--mmaaxx--aaggggrreeggaattee--ssiizzee
               When making copies of thread-local variables in a transaction, this parameter
               specifies the size in bytes after which variables are saved with the logging
               functions as opposed to save/restore code sequence pairs.  This option only
               applies when using --ffggnnuu--ttmm.

           ggrraapphhiittee--mmaaxx--nnbb--ssccoopp--ppaarraammss
               To avoid exponential effects in the Graphite loop transforms, the number of
               parameters in a Static Control Part (SCoP) is bounded.  A value of zero can be
               used to lift the bound.  A variable whose value is unknown at compilation time
               and defined outside a SCoP is a parameter of the SCoP.

           lloooopp--bblloocckk--ttiillee--ssiizzee
               Loop blocking or strip mining transforms, enabled with --fflloooopp--bblloocckk or
               --fflloooopp--ssttrriipp--mmiinnee, strip mine each loop in the loop nest by a given number of
               iterations.  The strip length can be changed using the lloooopp--bblloocckk--ttiillee--ssiizzee
               parameter.

           iippaa--ccpp--vvaalluuee--lliisstt--ssiizzee
               IPA-CP attempts to track all possible values and types passed to a function's
               parameter in order to propagate them and perform devirtualization.  iippaa--ccpp--
               vvaalluuee--lliisstt--ssiizzee is the maximum number of values and types it stores per one
               formal parameter of a function.

           iippaa--ccpp--eevvaall--tthhrreesshhoolldd
               IPA-CP calculates its own score of cloning profitability heuristics and
               performs those cloning opportunities with scores that exceed iippaa--ccpp--eevvaall--
               tthhrreesshhoolldd.

           iippaa--ccpp--rreeccuurrssiioonn--ppeennaallttyy
               Percentage penalty the recursive functions will receive when they are evaluated
               for cloning.

           iippaa--ccpp--ssiinnggllee--ccaallll--ppeennaallttyy
               Percentage penalty functions containing a single call to another function will
               receive when they are evaluated for cloning.

           iippaa--mmaaxx--aagggg--iitteemmss
               IPA-CP is also capable to propagate a number of scalar values passed in an
               aggregate. iippaa--mmaaxx--aagggg--iitteemmss controls the maximum number of such values per one
               parameter.

           iippaa--ccpp--lloooopp--hhiinntt--bboonnuuss
               When IPA-CP determines that a cloning candidate would make the number of
               iterations of a loop known, it adds a bonus of iippaa--ccpp--lloooopp--hhiinntt--bboonnuuss to the
               profitability score of the candidate.

           iippaa--ccpp--aarrrraayy--iinnddeexx--hhiinntt--bboonnuuss
               When IPA-CP determines that a cloning candidate would make the index of an
               array access known, it adds a bonus of iippaa--ccpp--aarrrraayy--iinnddeexx--hhiinntt--bboonnuuss to the
               profitability score of the candidate.

           iippaa--mmaaxx--aaaa--sstteeppss
               During its analysis of function bodies, IPA-CP employs alias analysis in order
               to track values pointed to by function parameters.  In order not spend too much
               time analyzing huge functions, it gives up and consider all memory clobbered
               after examining iippaa--mmaaxx--aaaa--sstteeppss statements modifying memory.

           llttoo--ppaarrttiittiioonnss
               Specify desired number of partitions produced during WHOPR compilation.  The
               number of partitions should exceed the number of CPUs used for compilation.

           llttoo--mmiinn--ppaarrttiittiioonn
               Size of minimal partition for WHOPR (in estimated instructions).  This prevents
               expenses of splitting very small programs into too many partitions.

           llttoo--mmaaxx--ppaarrttiittiioonn
               Size of max partition for WHOPR (in estimated instructions).  to provide an
               upper bound for individual size of partition.  Meant to be used only with
               balanced partitioning.

           llttoo--mmaaxx--ssttrreeaammiinngg--ppaarraalllleelliissmm
               Maximal number of parallel processes used for LTO streaming.

           ccxxxx--mmaaxx--nnaammeessppaacceess--ffoorr--ddiiaaggnnoossttiicc--hheellpp
               The maximum number of namespaces to consult for suggestions when C++ name
               lookup fails for an identifier.

           ssiinnkk--ffrreeqquueennccyy--tthhrreesshhoolldd
               The maximum relative execution frequency (in percents) of the target block
               relative to a statement's original block to allow statement sinking of a
               statement.  Larger numbers result in more aggressive statement sinking.  A
               small positive adjustment is applied for statements with memory operands as
               those are even more profitable so sink.

           mmaaxx--ssttoorreess--ttoo--ssiinnkk
               The maximum number of conditional store pairs that can be sunk.  Set to 0 if
               either vectorization (--ffttrreeee--vveeccttoorriizzee) or if-conversion
               (--ffttrreeee--lloooopp--iiff--ccoonnvveerrtt) is disabled.

           aallllooww--ssttoorree--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on stores.  Set to 1 to allow,
               otherwise to 0.

           ccaassee--vvaalluueess--tthhrreesshhoolldd
               The smallest number of different values for which it is best to use a jump-
               table instead of a tree of conditional branches.  If the value is 0, use the
               default for the machine.

           ttrreeee--rreeaassssoocc--wwiiddtthh
               Set the maximum number of instructions executed in parallel in reassociated
               tree. This parameter overrides target dependent heuristics used by default if
               has non zero value.

           sscchheedd--pprreessssuurree--aallggoorriitthhmm
               Choose between the two available implementations of --ffsscchheedd--pprreessssuurree.
               Algorithm 1 is the original implementation and is the more likely to prevent
               instructions from being reordered.  Algorithm 2 was designed to be a compromise
               between the relatively conservative approach taken by algorithm 1 and the
               rather aggressive approach taken by the default scheduler.  It relies more
               heavily on having a regular register file and accurate register pressure
               classes.  See _h_a_i_f_a_-_s_c_h_e_d_._c in the GCC sources for more details.

               The default choice depends on the target.

           mmaaxx--ssllssrr--ccaanndd--ssccaann
               Set the maximum number of existing candidates that are considered when seeking
               a basis for a new straight-line strength reduction candidate.

           aassaann--gglloobbaallss
               Enable buffer overflow detection for global objects.  This kind of protection
               is enabled by default if you are using --ffssaanniittiizzee==aaddddrreessss option.  To disable
               global objects protection use ----ppaarraamm aassaann--gglloobbaallss==00.

           aassaann--ssttaacckk
               Enable buffer overflow detection for stack objects.  This kind of protection is
               enabled by default when using --ffssaanniittiizzee==aaddddrreessss.  To disable stack protection
               use ----ppaarraamm aassaann--ssttaacckk==00 option.

           aassaann--iinnssttrruummeenntt--rreeaaddss
               Enable buffer overflow detection for memory reads.  This kind of protection is
               enabled by default when using --ffssaanniittiizzee==aaddddrreessss.  To disable memory reads
               protection use ----ppaarraamm aassaann--iinnssttrruummeenntt--rreeaaddss==00.

           aassaann--iinnssttrruummeenntt--wwrriitteess
               Enable buffer overflow detection for memory writes.  This kind of protection is
               enabled by default when using --ffssaanniittiizzee==aaddddrreessss.  To disable memory writes
               protection use ----ppaarraamm aassaann--iinnssttrruummeenntt--wwrriitteess==00 option.

           aassaann--mmeemmiinnttrriinn
               Enable detection for built-in functions.  This kind of protection is enabled by
               default when using --ffssaanniittiizzee==aaddddrreessss.  To disable built-in functions
               protection use ----ppaarraamm aassaann--mmeemmiinnttrriinn==00.

           aassaann--uussee--aafftteerr--rreettuurrnn
               Enable detection of use-after-return.  This kind of protection is enabled by
               default when using the --ffssaanniittiizzee==aaddddrreessss option.  To disable it use ----ppaarraamm
               aassaann--uussee--aafftteerr--rreettuurrnn==00.

               Note: By default the check is disabled at run time.  To enable it, add
               "detect_stack_use_after_return=1" to the environment variable AASSAANN__OOPPTTIIOONNSS.

           aassaann--iinnssttrruummeennttaattiioonn--wwiitthh--ccaallll--tthhrreesshhoolldd
               If number of memory accesses in function being instrumented is greater or equal
               to this number, use callbacks instead of inline checks.  E.g. to disable inline
               code use ----ppaarraamm aassaann--iinnssttrruummeennttaattiioonn--wwiitthh--ccaallll--tthhrreesshhoolldd==00.

           uussee--aafftteerr--ssccooppee--ddiirreecctt--eemmiissssiioonn--tthhrreesshhoolldd
               If the size of a local variable in bytes is smaller or equal to this number,
               directly poison (or unpoison) shadow memory instead of using run-time
               callbacks.

           mmaaxx--ffssmm--tthhrreeaadd--ppaatthh--iinnssnnss
               Maximum number of instructions to copy when duplicating blocks on a finite
               state automaton jump thread path.

           mmaaxx--ffssmm--tthhrreeaadd--lleennggtthh
               Maximum number of basic blocks on a finite state automaton jump thread path.

           mmaaxx--ffssmm--tthhrreeaadd--ppaatthhss
               Maximum number of new jump thread paths to create for a finite state automaton.

           ppaarrllooooppss--cchhuunnkk--ssiizzee
               Chunk size of omp schedule for loops parallelized by parloops.

           ppaarrllooooppss--sscchheedduullee
               Schedule type of omp schedule for loops parallelized by parloops (static,
               dynamic, guided, auto, runtime).

           ppaarrllooooppss--mmiinn--ppeerr--tthhrreeaadd
               The minimum number of iterations per thread of an innermost parallelized loop
               for which the parallelized variant is preferred over the single threaded one.
               Note that for a parallelized loop nest the minimum number of iterations of the
               outermost loop per thread is two.

           mmaaxx--ssssaa--nnaammee--qquueerryy--ddeepptthh
               Maximum depth of recursion when querying properties of SSA names in things like
               fold routines.  One level of recursion corresponds to following a use-def
               chain.

           hhssaa--ggeenn--ddeebbuugg--ssttoorreess
               Enable emission of special debug stores within HSA kernels which are then read
               and reported by libgomp plugin.  Generation of these stores is disabled by
               default, use ----ppaarraamm hhssaa--ggeenn--ddeebbuugg--ssttoorreess==11 to enable it.

           mmaaxx--ssppeeccuullaattiivvee--ddeevviirrtt--mmaayyddeeffss
               The maximum number of may-defs we analyze when looking for a must-def
               specifying the dynamic type of an object that invokes a virtual call we may be
               able to devirtualize speculatively.

           mmaaxx--vvrrpp--sswwiittcchh--aasssseerrttiioonnss
               The maximum number of assertions to add along the default edge of a switch
               statement during VRP.

           uunnrroollll--jjaamm--mmiinn--ppeerrcceenntt
               The minimum percentage of memory references that must be optimized away for the
               unroll-and-jam transformation to be considered profitable.

           uunnrroollll--jjaamm--mmaaxx--uunnrroollll
               The maximum number of times the outer loop should be unrolled by the unroll-
               and-jam transformation.

           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--uunnpprreeddiiccttaabbllee--ccoosstt
               Maximum permissible cost for the sequence that would be generated by the RTL
               if-conversion pass for a branch that is considered unpredictable.

           mmaaxx--vvaarriiaabbllee--eexxppaannssiioonnss--iinn--uunnrroolllleerr
               If --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr is used, the maximum number of times that
               an individual variable will be expanded during loop unrolling.

           ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy--ffeeeeddbbaacckk
               Stop forward growth if the probability of best edge is less than this threshold
               (in percent). Used when profile feedback is available.

           ppaarrttiiaall--iinnlliinniinngg--eennttrryy--pprroobbaabbiilliittyy
               Maximum probability of the entry BB of split region (in percent relative to
               entry BB of the function) to make partial inlining happen.

           mmaaxx--ttrraacckkeedd--ssttrrlleennss
               Maximum number of strings for which strlen optimization pass will track string
               lengths.

           ggccssee--aafftteerr--rreellooaadd--ppaarrttiiaall--ffrraaccttiioonn
               The threshold ratio for performing partial redundancy elimination after reload.

           ggccssee--aafftteerr--rreellooaadd--ccrriittiiccaall--ffrraaccttiioonn
               The threshold ratio of critical edges execution count that permit performing
               redundancy elimination after reload.

           mmaaxx--lloooopp--hheeaaddeerr--iinnssnnss
               The maximum number of insns in loop header duplicated by the copy loop headers
               pass.

           vveecctt--eeppiilloogguueess--nnoommaasskk
               Enable loop epilogue vectorization using smaller vector size.

           ssllpp--mmaaxx--iinnssnnss--iinn--bbbb
               Maximum number of instructions in basic block to be considered for SLP
               vectorization.

           aavvooiidd--ffmmaa--mmaaxx--bbiittss
               Maximum number of bits for which we avoid creating FMAs.

           ssmmss--lloooopp--aavveerraaggee--ccoouunntt--tthhrreesshhoolldd
               A threshold on the average loop count considered by the swing modulo scheduler.

           ssmmss--ddffaa--hhiissttoorryy
               The number of cycles the swing modulo scheduler considers when checking
               conflicts using DFA.

           hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
               Select fraction of the maximal count of repetitions of basic block in program
               given basic block needs to have to be considered hot (used in non-LTO mode)

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               The maximum number of instructions non-inline function can grow to via
               recursive inlining.

           ggrraapphhiittee--aallllooww--ccooddeeggeenn--eerrrroorrss
               Whether codegen errors should be ICEs when --ffcchheecckkiinngg.

           ssmmss--mmaaxx--iiii--ffaaccttoorr
               A factor for tuning the upper bound that swing modulo scheduler uses for
               scheduling a loop.

           llrraa--mmaaxx--ccoonnssiiddeerreedd--rreellooaadd--ppsseeuuddooss
               The max number of reload pseudos which are considered during spilling a non-
               reload pseudo.

           mmaaxx--ppooww--ssqqrrtt--ddeepptthh
               Maximum depth of sqrt chains to use when synthesizing exponentiation by a real
               constant.

           mmaaxx--ddssee--aaccttiivvee--llooccaall--ssttoorreess
               Maximum number of active local stores in RTL dead store elimination.

           aassaann--iinnssttrruummeenntt--aallllooccaass
               Enable asan allocas/VLAs protection.

           mmaaxx--iitteerraattiioonnss--ccoommppuuttaattiioonn--ccoosstt
               Bound on the cost of an expression to compute the number of iterations.

           mmaaxx--iissll--ooppeerraattiioonnss
               Maximum number of isl operations, 0 means unlimited.

           ggrraapphhiittee--mmaaxx--aarrrraayyss--ppeerr--ssccoopp
               Maximum number of arrays per scop.

           mmaaxx--vvaarrttrraacckk--rreevveerrssee--oopp--ssiizzee
               Max. size of loc list for which reverse ops should be added.

           uunnlliikkeellyy--bbbb--ccoouunntt--ffrraaccttiioonn
               The minimum fraction of profile runs a given basic block execution count must
               be not to be considered unlikely.

           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               The percentage of function, weighted by execution frequency, that must be
               covered by trace formation.  Used when profile feedback is available.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               The maximum depth of recursive inlining for non-inline functions.

           ffssmm--ssccaallee--ppaatthh--ssttmmttss
               Scale factor to apply to the number of statements in a threading path when
               comparing to the number of (scaled) blocks.

           ffssmm--mmaaxxiimmuumm--pphhii--aarrgguummeennttss
               Maximum number of arguments a PHI may have before the FSM threader will not try
               to thread through its block.

           uunniinniitt--ccoonnttrrooll--ddeepp--aatttteemmppttss
               Maximum number of nested calls to search for control dependencies during
               uninitialized variable analysis.

           iinnddiirr--ccaallll--ttooppnn--pprrooffiillee
               Track top N target addresses in indirect-call profile.

           mmaaxx--oonnccee--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a peeled loop that rolls only once.

           ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssiizzee
               Maximum size, in storage units, of an aggregate which should be considered for
               scalarization when compiling for size.

           ffssmm--ssccaallee--ppaatthh--bblloocckkss
               Scale factor to apply to the number of blocks in a threading path when
               comparing to the number of (scaled) statements.

           sscchheedd--aauuttoopprreeff--qquueeuuee--ddeepptthh
               Hardware autoprefetcher scheduler model control flag.  Number of lookahead
               cycles the model looks into; at ' ' only enable instruction sorting heuristic.

           lloooopp--vveerrssiioonniinngg--mmaaxx--iinnnneerr--iinnssnnss
               The maximum number of instructions that an inner loop can have before the loop
               versioning pass considers it too big to copy.

           lloooopp--vveerrssiioonniinngg--mmaaxx--oouutteerr--iinnssnnss
               The maximum number of instructions that an outer loop can have before the loop
               versioning pass considers it too big to copy, discounting any instructions in
               inner loops that directly benefit from versioning.

           ssssaa--nnaammee--ddeeff--cchhaaiinn--lliimmiitt
               The maximum number of SSA_NAME assignments to follow in determining a property
               of a variable such as its value.  This limits the number of iterations or
               recursive calls GCC performs when optimizing certain statements or when
               determining their validity prior to issuing diagnostics.

   PPrrooggrraamm IInnssttrruummeennttaattiioonn OOppttiioonnss
       GCC supports a number of command-line options that control adding run-time
       instrumentation to the code it normally generates.  For example, one purpose of
       instrumentation is collect profiling statistics for use in finding program hot spots,
       code coverage analysis, or profile-guided optimizations.  Another class of program
       instrumentation is adding run-time checking to detect programming errors like invalid
       pointer dereferences or out-of-bounds array accesses, as well as deliberately hostile
       attacks such as stack smashing or C++ vtable hijacking.  There is also a general hook
       which can be used to implement other forms of tracing or function-level instrumentation
       for debug or program analysis purposes.

       --pp
       --ppgg Generate extra code to write profile information suitable for the analysis program
           pprrooff (for --pp) or ggpprrooff (for --ppgg).  You must use this option when compiling the
           source files you want data about, and you must also use it when linking.

           You can use the function attribute "no_instrument_function" to suppress profiling
           of individual functions when compiling with these options.

       --ffpprrooffiillee--aarrccss
           Add code so that program flow _a_r_c_s are instrumented.  During execution the program
           records how many times each branch and call is executed and how many times it is
           taken or returns.  On targets that support constructors with priority support,
           profiling properly handles constructors, destructors and C++ constructors (and
           destructors) of classes which are used as a type of a global variable.

           When the compiled program exits it saves this data to a file called _a_u_x_n_a_m_e_._g_c_d_a
           for each source file.  The data may be used for profile-directed optimizations
           (--ffbbrraanncchh--pprroobbaabbiilliittiieess), or for test coverage analysis (--fftteesstt--ccoovveerraaggee).  Each
           object file's _a_u_x_n_a_m_e is generated from the name of the output file, if explicitly
           specified and it is not the final executable, otherwise it is the basename of the
           source file.  In both cases any suffix is removed (e.g. _f_o_o_._g_c_d_a for input file
           _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._g_c_d_a for output file specified as --oo ddiirr//ffoooo..oo).

       ----ccoovveerraaggee
           This option is used to compile and link code instrumented for coverage analysis.
           The option is a synonym for --ffpprrooffiillee--aarrccss --fftteesstt--ccoovveerraaggee (when compiling) and
           --llggccoovv (when linking).  See the documentation for those options for more details.

           *   Compile the source files with --ffpprrooffiillee--aarrccss plus optimization and code
               generation options.  For test coverage analysis, use the additional
               --fftteesstt--ccoovveerraaggee option.  You do not need to profile every source file in a
               program.

           *   Compile the source files additionally with --ffpprrooffiillee--aabbss--ppaatthh to create
               absolute path names in the _._g_c_n_o files.  This allows ggccoovv to find the correct
               sources in projects where compilations occur with different working
               directories.

           *   Link your object files with --llggccoovv or --ffpprrooffiillee--aarrccss (the latter implies the
               former).

           *   Run the program on a representative workload to generate the arc profile
               information.  This may be repeated any number of times.  You can run concurrent
               instances of your program, and provided that the file system supports locking,
               the data files will be correctly updated.  Unless a strict ISO C dialect option
               is in effect, "fork" calls are detected and correctly handled without double
               counting.

           *   For profile-directed optimizations, compile the source files again with the
               same optimization and code generation options plus --ffbbrraanncchh--pprroobbaabbiilliittiieess.

           *   For test coverage analysis, use ggccoovv to produce human readable information from
               the _._g_c_n_o and _._g_c_d_a files.  Refer to the ggccoovv documentation for further
               information.

           With --ffpprrooffiillee--aarrccss, for each function of your program GCC creates a program flow
           graph, then finds a spanning tree for the graph.  Only arcs that are not on the
           spanning tree have to be instrumented: the compiler adds code to count the number
           of times that these arcs are executed.  When an arc is the only exit or only
           entrance to a block, the instrumentation code can be added to the block; otherwise,
           a new basic block must be created to hold the instrumentation code.

       --fftteesstt--ccoovveerraaggee
           Produce a notes file that the ggccoovv code-coverage utility can use to show program
           coverage.  Each source file's note file is called _a_u_x_n_a_m_e_._g_c_n_o.  Refer to the
           --ffpprrooffiillee--aarrccss option above for a description of _a_u_x_n_a_m_e and instructions on how to
           generate test coverage data.  Coverage data matches the source files more closely
           if you do not optimize.

       --ffpprrooffiillee--aabbss--ppaatthh
           Automatically convert relative source file names to absolute path names in the
           _._g_c_n_o files.  This allows ggccoovv to find the correct sources in projects where
           compilations occur with different working directories.

       --ffpprrooffiillee--ddiirr==_p_a_t_h
           Set the directory to search for the profile data files in to _p_a_t_h.  This option
           affects only the profile data generated by --ffpprrooffiillee--ggeenneerraattee, --fftteesstt--ccoovveerraaggee,
           --ffpprrooffiillee--aarrccss and used by --ffpprrooffiillee--uussee and --ffbbrraanncchh--pprroobbaabbiilliittiieess and its related
           options.  Both absolute and relative paths can be used.  By default, GCC uses the
           current directory as _p_a_t_h, thus the profile data file appears in the same directory
           as the object file.  In order to prevent the file name clashing, if the object file
           name is not an absolute path, we mangle the absolute path of the _s_o_u_r_c_e_n_a_m_e_._g_c_d_a
           file and use it as the file name of a _._g_c_d_a file.

           When an executable is run in a massive parallel environment, it is recommended to
           save profile to different folders.  That can be done with variables in _p_a_t_h that
           are exported during run-time:

           %%pp  process ID.

           %%qq{{VVAARR}}
               value of environment variable _V_A_R

       --ffpprrooffiillee--ggeenneerraattee
       --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           Enable options usually used for instrumenting application to produce profile useful
           for later recompilation with profile feedback based optimization.  You must use
           --ffpprrooffiillee--ggeenneerraattee both when compiling and when linking your program.

           The following options are enabled: --ffpprrooffiillee--aarrccss, --ffpprrooffiillee--vvaalluueess,
           --ffiinnlliinnee--ffuunnccttiioonnss, and --ffiippaa--bbiitt--ccpp.

           If _p_a_t_h is specified, GCC looks at the _p_a_t_h to find the profile feedback data
           files. See --ffpprrooffiillee--ddiirr.

           To optimize the program based on the collected profile information, use
           --ffpprrooffiillee--uussee.

       --ffpprrooffiillee--uuppddaattee==_m_e_t_h_o_d
           Alter the update method for an application instrumented for profile feedback based
           optimization.  The _m_e_t_h_o_d argument should be one of ssiinnggllee, aattoommiicc or pprreeffeerr--
           aattoommiicc.  The first one is useful for single-threaded applications, while the second
           one prevents profile corruption by emitting thread-safe code.

           WWaarrnniinngg:: When an application does not properly join all threads (or creates an
           detached thread), a profile file can be still corrupted.

           Using pprreeffeerr--aattoommiicc would be transformed either to aattoommiicc, when supported by a
           target, or to ssiinnggllee otherwise.  The GCC driver automatically selects pprreeffeerr--aattoommiicc
           when --pptthhrreeaadd is present in the command line.

       --ffpprrooffiillee--ffiilltteerr--ffiilleess==_r_e_g_e_x
           Instrument only functions from files where names match any regular expression
           (separated by a semi-colon).

           For example, --ffpprrooffiillee--ffiilltteerr--ffiilleess==mmaaiinn..cc;;mmoodduullee..**..cc will instrument only _m_a_i_n_._c
           and all C files starting with 'module'.

       --ffpprrooffiillee--eexxcclluuddee--ffiilleess==_r_e_g_e_x
           Instrument only functions from files where names do not match all the regular
           expressions (separated by a semi-colon).

           For example, --ffpprrooffiillee--eexxcclluuddee--ffiilleess==//uussrr//** will prevent instrumentation of all
           files that are located in _/_u_s_r_/ folder.

       --ffssaanniittiizzee==aaddddrreessss
           Enable AddressSanitizer, a fast memory error detector.  Memory access instructions
           are instrumented to detect out-of-bounds and use-after-free bugs.  The option
           enables --ffssaanniittiizzee--aaddddrreessss--uussee--aafftteerr--ssccooppee.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerr> for more details.  The
           run-time behavior can be influenced using the AASSAANN__OOPPTTIIOONNSS environment variable.
           When set to "help=1", the available options are shown at startup of the
           instrumented program.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerrFFllaaggss##rruunn--ttiimmee--ffllaaggss>
           for a list of supported options.  The option cannot be combined with
           --ffssaanniittiizzee==tthhrreeaadd.

       --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss
           Enable AddressSanitizer for Linux kernel.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//kkaassaann//wwiikkii> for more details.

       --ffssaanniittiizzee==ppooiinntteerr--ccoommppaarree
           Instrument comparison operation (<, <=, >, >=) with pointer operands.  The option
           must be combined with either --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss or --ffssaanniittiizzee==aaddddrreessss The
           option cannot be combined with --ffssaanniittiizzee==tthhrreeaadd.  Note: By default the check is
           disabled at run time.  To enable it, add "detect_invalid_pointer_pairs=2" to the
           environment variable AASSAANN__OOPPTTIIOONNSS. Using "detect_invalid_pointer_pairs=1" detects
           invalid operation only when both pointers are non-null.

       --ffssaanniittiizzee==ppooiinntteerr--ssuubbttrraacctt
           Instrument subtraction with pointer operands.  The option must be combined with
           either --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss or --ffssaanniittiizzee==aaddddrreessss The option cannot be
           combined with --ffssaanniittiizzee==tthhrreeaadd.  Note: By default the check is disabled at run
           time.  To enable it, add "detect_invalid_pointer_pairs=2" to the environment
           variable AASSAANN__OOPPTTIIOONNSS. Using "detect_invalid_pointer_pairs=1" detects invalid
           operation only when both pointers are non-null.

       --ffssaanniittiizzee==tthhrreeaadd
           Enable ThreadSanitizer, a fast data race detector.  Memory access instructions are
           instrumented to detect data race bugs.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii##tthhrreeaaddssaanniittiizzeerr> for more details. The
           run-time behavior can be influenced using the TTSSAANN__OOPPTTIIOONNSS environment variable;
           see <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//TThhrreeaaddSSaanniittiizzeerrFFllaaggss> for a list of
           supported options.  The option cannot be combined with --ffssaanniittiizzee==aaddddrreessss,
           --ffssaanniittiizzee==lleeaakk.

           Note that sanitized atomic builtins cannot throw exceptions when operating on
           invalid memory addresses with non-call exceptions (--ffnnoonn--ccaallll--eexxcceeppttiioonnss).

       --ffssaanniittiizzee==lleeaakk
           Enable LeakSanitizer, a memory leak detector.  This option only matters for linking
           of executables and the executable is linked against a library that overrides
           "malloc" and other allocator functions.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerrLLeeaakkSSaanniittiizzeerr> for more
           details.  The run-time behavior can be influenced using the LLSSAANN__OOPPTTIIOONNSS
           environment variable.  The option cannot be combined with --ffssaanniittiizzee==tthhrreeaadd.

       --ffssaanniittiizzee==uunnddeeffiinneedd
           Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector.  Various
           computations are instrumented to detect undefined behavior at runtime.  Current
           suboptions are:

           --ffssaanniittiizzee==sshhiifftt
               This option enables checking that the result of a shift operation is not
               undefined.  Note that what exactly is considered undefined differs slightly
               between C and C++, as well as between ISO C90 and C99, etc.  This option has
               two suboptions, --ffssaanniittiizzee==sshhiifftt--bbaassee and --ffssaanniittiizzee==sshhiifftt--eexxppoonneenntt.

           --ffssaanniittiizzee==sshhiifftt--eexxppoonneenntt
               This option enables checking that the second argument of a shift operation is
               not negative and is smaller than the precision of the promoted first argument.

           --ffssaanniittiizzee==sshhiifftt--bbaassee
               If the second argument of a shift operation is within range, check that the
               result of a shift operation is not undefined.  Note that what exactly is
               considered undefined differs slightly between C and C++, as well as between ISO
               C90 and C99, etc.

           --ffssaanniittiizzee==iinntteeggeerr--ddiivviiddee--bbyy--zzeerroo
               Detect integer division by zero as well as "INT_MIN / -1" division.

           --ffssaanniittiizzee==uunnrreeaacchhaabbllee
               With this option, the compiler turns the "__builtin_unreachable" call into a
               diagnostics message call instead.  When reaching the "__builtin_unreachable"
               call, the behavior is undefined.

           --ffssaanniittiizzee==vvllaa--bboouunndd
               This option instructs the compiler to check that the size of a variable length
               array is positive.

           --ffssaanniittiizzee==nnuullll
               This option enables pointer checking.  Particularly, the application built with
               this option turned on will issue an error message when it tries to dereference
               a NULL pointer, or if a reference (possibly an rvalue reference) is bound to a
               NULL pointer, or if a method is invoked on an object pointed by a NULL pointer.

           --ffssaanniittiizzee==rreettuurrnn
               This option enables return statement checking.  Programs built with this option
               turned on will issue an error message when the end of a non-void function is
               reached without actually returning a value.  This option works in C++ only.

           --ffssaanniittiizzee==ssiiggnneedd--iinntteeggeerr--oovveerrffllooww
               This option enables signed integer overflow checking.  We check that the result
               of "+", "*", and both unary and binary "-" does not overflow in the signed
               arithmetics.  Note, integer promotion rules must be taken into account.  That
               is, the following is not an overflow:

                       signed char a = SCHAR_MAX;
                       a++;

           --ffssaanniittiizzee==bboouunnddss
               This option enables instrumentation of array bounds.  Various out of bounds
               accesses are detected.  Flexible array members, flexible array member-like
               arrays, and initializers of variables with static storage are not instrumented.

           --ffssaanniittiizzee==bboouunnddss--ssttrriicctt
               This option enables strict instrumentation of array bounds.  Most out of bounds
               accesses are detected, including flexible array members and flexible array
               member-like arrays.  Initializers of variables with static storage are not
               instrumented.

           --ffssaanniittiizzee==aalliiggnnmmeenntt
               This option enables checking of alignment of pointers when they are
               dereferenced, or when a reference is bound to insufficiently aligned target, or
               when a method or constructor is invoked on insufficiently aligned object.

           --ffssaanniittiizzee==oobbjjeecctt--ssiizzee
               This option enables instrumentation of memory references using the
               "__builtin_object_size" function.  Various out of bounds pointer accesses are
               detected.

           --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo
               Detect floating-point division by zero.  Unlike other similar options,
               --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo is not enabled by --ffssaanniittiizzee==uunnddeeffiinneedd, since
               floating-point division by zero can be a legitimate way of obtaining infinities
               and NaNs.

           --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww
               This option enables floating-point type to integer conversion checking.  We
               check that the result of the conversion does not overflow.  Unlike other
               similar options, --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww is not enabled by
               --ffssaanniittiizzee==uunnddeeffiinneedd.  This option does not work well with "FE_INVALID"
               exceptions enabled.

           --ffssaanniittiizzee==nnoonnnnuullll--aattttrriibbuuttee
               This option enables instrumentation of calls, checking whether null values are
               not passed to arguments marked as requiring a non-null value by the "nonnull"
               function attribute.

           --ffssaanniittiizzee==rreettuurrnnss--nnoonnnnuullll--aattttrriibbuuttee
               This option enables instrumentation of return statements in functions marked
               with "returns_nonnull" function attribute, to detect returning of null values
               from such functions.

           --ffssaanniittiizzee==bbooooll
               This option enables instrumentation of loads from bool.  If a value other than
               0/1 is loaded, a run-time error is issued.

           --ffssaanniittiizzee==eennuumm
               This option enables instrumentation of loads from an enum type.  If a value
               outside the range of values for the enum type is loaded, a run-time error is
               issued.

           --ffssaanniittiizzee==vvppttrr
               This option enables instrumentation of C++ member function calls, member
               accesses and some conversions between pointers to base and derived classes, to
               verify the referenced object has the correct dynamic type.

           --ffssaanniittiizzee==ppooiinntteerr--oovveerrffllooww
               This option enables instrumentation of pointer arithmetics.  If the pointer
               arithmetics overflows, a run-time error is issued.

           --ffssaanniittiizzee==bbuuiillttiinn
               This option enables instrumentation of arguments to selected builtin functions.
               If an invalid value is passed to such arguments, a run-time error is issued.
               E.g. passing 0 as the argument to "__builtin_ctz" or "__builtin_clz" invokes
               undefined behavior and is diagnosed by this option.

           While --ffttrraappvv causes traps for signed overflows to be emitted, --ffssaanniittiizzee==uunnddeeffiinneedd
           gives a diagnostic message.  This currently works only for the C family of
           languages.

       --ffnnoo--ssaanniittiizzee==aallll
           This option disables all previously enabled sanitizers.  --ffssaanniittiizzee==aallll is not
           allowed, as some sanitizers cannot be used together.

       --ffaassaann--sshhaaddooww--ooffffsseett==_n_u_m_b_e_r
           This option forces GCC to use custom shadow offset in AddressSanitizer checks.  It
           is useful for experimenting with different shadow memory layouts in Kernel
           AddressSanitizer.

       --ffssaanniittiizzee--sseeccttiioonnss==_s_1,,_s_2,,......
           Sanitize global variables in selected user-defined sections.  _s_i may contain
           wildcards.

       --ffssaanniittiizzee--rreeccoovveerr[==_o_p_t_s]
           --ffssaanniittiizzee--rreeccoovveerr== controls error recovery mode for sanitizers mentioned in comma-
           separated list of _o_p_t_s.  Enabling this option for a sanitizer component causes it
           to attempt to continue running the program as if no error happened.  This means
           multiple runtime errors can be reported in a single program run, and the exit code
           of the program may indicate success even when errors have been reported.  The
           --ffnnoo--ssaanniittiizzee--rreeccoovveerr== option can be used to alter this behavior: only the first
           detected error is reported and program then exits with a non-zero exit code.

           Currently this feature only works for --ffssaanniittiizzee==uunnddeeffiinneedd (and its suboptions
           except for --ffssaanniittiizzee==uunnrreeaacchhaabbllee and --ffssaanniittiizzee==rreettuurrnn),
           --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww, --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo,
           --ffssaanniittiizzee==bboouunnddss--ssttrriicctt, --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss and --ffssaanniittiizzee==aaddddrreessss.  For
           these sanitizers error recovery is turned on by default, except --ffssaanniittiizzee==aaddddrreessss,
           for which this feature is experimental.  --ffssaanniittiizzee--rreeccoovveerr==aallll and
           --ffnnoo--ssaanniittiizzee--rreeccoovveerr==aallll is also accepted, the former enables recovery for all
           sanitizers that support it, the latter disables recovery for all sanitizers that
           support it.

           Even if a recovery mode is turned on the compiler side, it needs to be also enabled
           on the runtime library side, otherwise the failures are still fatal.  The runtime
           library defaults to "halt_on_error=0" for ThreadSanitizer and
           UndefinedBehaviorSanitizer, while default value for AddressSanitizer is
           "halt_on_error=1". This can be overridden through setting the "halt_on_error" flag
           in the corresponding environment variable.

           Syntax without an explicit _o_p_t_s parameter is deprecated.  It is equivalent to
           specifying an _o_p_t_s list of:

                   undefined,float-cast-overflow,float-divide-by-zero,bounds-strict

       --ffssaanniittiizzee--aaddddrreessss--uussee--aafftteerr--ssccooppee
           Enable sanitization of local variables to detect use-after-scope bugs.  The option
           sets --ffssttaacckk--rreeuussee to nnoonnee.

       --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr
           The --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr option instructs the compiler to report
           undefined behavior using "__builtin_trap" rather than a "libubsan" library routine.
           The advantage of this is that the "libubsan" library is not needed and is not
           linked in, so this is usable even in freestanding environments.

       --ffssaanniittiizzee--ccoovveerraaggee==ttrraaccee--ppcc
           Enable coverage-guided fuzzing code instrumentation.  Inserts a call to
           "__sanitizer_cov_trace_pc" into every basic block.

       --ffssaanniittiizzee--ccoovveerraaggee==ttrraaccee--ccmmpp
           Enable dataflow guided fuzzing code instrumentation.  Inserts a call to
           "__sanitizer_cov_trace_cmp1", "__sanitizer_cov_trace_cmp2",
           "__sanitizer_cov_trace_cmp4" or "__sanitizer_cov_trace_cmp8" for integral
           comparison with both operands variable or "__sanitizer_cov_trace_const_cmp1",
           "__sanitizer_cov_trace_const_cmp2", "__sanitizer_cov_trace_const_cmp4" or
           "__sanitizer_cov_trace_const_cmp8" for integral comparison with one operand
           constant, "__sanitizer_cov_trace_cmpf" or "__sanitizer_cov_trac